

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun May 19 17:40:09 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36  0000                     
    37                           ; Version 1.41
    38                           ; Generated 25/01/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4550 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  00146A                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for _LCD_01_ADDRESS
    77  00146A  40                 	db	64
    78                           
    79                           	psect	smallconst
    80  000800                     __psmallconst:
    81                           	opt stack 0
    82  000800  00                 	db	0
    83  000801                     _dpowers:
    84                           	opt stack 0
    85  000801  0001               	dw	1
    86  000803  0000               	dw	0
    87  000805  000A               	dw	10
    88  000807  0000               	dw	0
    89  000809  0064               	dw	100
    90  00080B  0000               	dw	0
    91  00080D  03E8               	dw	1000
    92  00080F  0000               	dw	0
    93  000811  2710               	dw	10000
    94  000813  0000               	dw	0
    95  000815  86A0               	dw	34464
    96  000817  0001               	dw	1
    97  000819  4240               	dw	16960
    98  00081B  000F               	dw	15
    99  00081D  9680               	dw	38528
   100  00081F  0098               	dw	152
   101  000821  E100               	dw	57600
   102  000823  05F5               	dw	1525
   103  000825  CA00               	dw	51712
   104  000827  3B9A               	dw	15258
   105  000829                     __end_of_dpowers:
   106                           	opt stack 0
   107  0000                     _SSPSTATbits	set	4039
   108  0000                     _PIR1bits	set	3998
   109  0000                     _TRISBbits	set	3987
   110  0000                     _SSPCON2	set	4037
   111  0000                     _SSPCON1	set	4038
   112  0000                     _SSPSTAT	set	4039
   113  0000                     _SSPCON1bits	set	4038
   114  0000                     _SSPBUF	set	4041
   115  0000                     _SSPCON2bits	set	4037
   116  0000                     _PORTDbits	set	3971
   117  0000                     _LATD	set	3980
   118  0000                     _TRISD	set	3989
   119  000829                     STR_1:
   120  000829  20                 	db	32
   121  00082A  20                 	db	32
   122  00082B  20                 	db	32
   123  00082C  20                 	db	32
   124  00082D  20                 	db	32
   125  00082E  20                 	db	32
   126  00082F  20                 	db	32
   127  000830  20                 	db	32
   128  000831  20                 	db	32
   129  000832  20                 	db	32
   130  000833  20                 	db	32
   131  000834  20                 	db	32
   132  000835  20                 	db	32
   133  000836  20                 	db	32
   134  000837  20                 	db	32
   135  000838  20                 	db	32
   136  000839  20                 	db	32
   137  00083A  20                 	db	32
   138  00083B  20                 	db	32
   139  00083C  20                 	db	32
   140  00083D  20                 	db	32
   141  00083E  20                 	db	32
   142  00083F  20                 	db	32
   143  000840  20                 	db	32
   144  000841  00                 	db	0
   145  000842                     STR_8:
   146  000842  54                 	db	84	;'T'
   147  000843  65                 	db	101	;'e'
   148  000844  63                 	db	99	;'c'
   149  000845  6C                 	db	108	;'l'
   150  000846  65                 	db	101	;'e'
   151  000847  65                 	db	101	;'e'
   152  000848  20                 	db	32
   153  000849  65                 	db	101	;'e'
   154  00084A  73                 	db	115	;'s'
   155  00084B  74                 	db	116	;'t'
   156  00084C  61                 	db	97	;'a'
   157  00084D  74                 	db	116	;'t'
   158  00084E  75                 	db	117	;'u'
   159  00084F  72                 	db	114	;'r'
   160  000850  61                 	db	97	;'a'
   161  000851  28                 	db	40
   162  000852  63                 	db	99	;'c'
   163  000853  6D                 	db	109	;'m'
   164  000854  29                 	db	41
   165  000855  00                 	db	0
   166  000856                     STR_5:
   167  000856  54                 	db	84	;'T'
   168  000857  65                 	db	101	;'e'
   169  000858  63                 	db	99	;'c'
   170  000859  6C                 	db	108	;'l'
   171  00085A  65                 	db	101	;'e'
   172  00085B  65                 	db	101	;'e'
   173  00085C  20                 	db	32
   174  00085D  70                 	db	112	;'p'
   175  00085E  65                 	db	101	;'e'
   176  00085F  73                 	db	115	;'s'
   177  000860  6F                 	db	111	;'o'
   178  000861  20                 	db	32
   179  000862  65                 	db	101	;'e'
   180  000863  6E                 	db	110	;'n'
   181  000864  20                 	db	32
   182  000865  6B                 	db	107	;'k'
   183  000866  67                 	db	103	;'g'
   184  000867  00                 	db	0
   185  000868                     STR_3:
   186  000868  54                 	db	84	;'T'
   187  000869  65                 	db	101	;'e'
   188  00086A  63                 	db	99	;'c'
   189  00086B  6C                 	db	108	;'l'
   190  00086C  65                 	db	101	;'e'
   191  00086D  65                 	db	101	;'e'
   192  00086E  20                 	db	32
   193  00086F  65                 	db	101	;'e'
   194  000870  64                 	db	100	;'d'
   195  000871  61                 	db	97	;'a'
   196  000872  64                 	db	100	;'d'
   197  000873  00                 	db	0
   198  000874                     STR_10:
   199  000874  25                 	db	37
   200  000875  6C                 	db	108	;'l'
   201  000876  75                 	db	117	;'u'
   202  000877  2C                 	db	44
   203  000878  25                 	db	37
   204  000879  6C                 	db	108	;'l'
   205  00087A  75                 	db	117	;'u'
   206  00087B  2C                 	db	44
   207  00087C  25                 	db	37
   208  00087D  6C                 	db	108	;'l'
   209  00087E  75                 	db	117	;'u'
   210  00087F  00                 	db	0
   211  000880  00                 	db	0	; dummy byte at the end
   212  0000                     
   213                           ; #config settings
   214                           
   215                           	psect	cinit
   216  0013A0                     __pcinit:
   217                           	opt stack 0
   218  0013A0                     start_initialization:
   219                           	opt stack 0
   220  0013A0                     __initialization:
   221                           	opt stack 0
   222                           
   223                           ; Initialize objects allocated to COMRAM (1 bytes)
   224                           ; load TBLPTR registers with __pidataCOMRAM
   225  0013A0  0E6A               	movlw	low __pidataCOMRAM
   226  0013A2  6EF6               	movwf	tblptrl,c
   227  0013A4  0E14               	movlw	high __pidataCOMRAM
   228  0013A6  6EF7               	movwf	tblptrh,c
   229  0013A8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   230  0013AA  6EF8               	movwf	tblptru,c
   231  0013AC  0009               	tblrd		*+	;fetch initializer
   232  0013AE  CFF5 F037          	movff	tablat,__pdataCOMRAM
   233                           
   234                           ; Clear objects allocated to BANK1 (80 bytes)
   235  0013B2  EE01  F000         	lfsr	0,__pbssBANK1
   236  0013B6  0E50               	movlw	80
   237  0013B8                     clear_0:
   238  0013B8  6AEE               	clrf	postinc0,c
   239  0013BA  06E8               	decf	wreg,f,c
   240  0013BC  E1FD               	bnz	clear_0
   241                           
   242                           ; Clear objects allocated to COMRAM (2 bytes)
   243  0013BE  6A36               	clrf	(__pbssCOMRAM+1)& (0+255),c
   244  0013C0  6A35               	clrf	__pbssCOMRAM& (0+255),c
   245  0013C2                     end_of_initialization:
   246                           	opt stack 0
   247  0013C2                     __end_of__initialization:
   248                           	opt stack 0
   249  0013C2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   250  0013C4  6EF8               	movwf	tblptru,c
   251  0013C6  0100               	movlb	0
   252  0013C8  EFB8  F009         	goto	_main	;jump to C main() function
   253                           tblptru	equ	0xFF8
   254                           tblptrh	equ	0xFF7
   255                           tblptrl	equ	0xFF6
   256                           tablat	equ	0xFF5
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           
   260                           	psect	bssCOMRAM
   261  000035                     __pbssCOMRAM:
   262                           	opt stack 0
   263  000035                     _keynum:
   264                           	opt stack 0
   265  000035                     	ds	2
   266                           tblptru	equ	0xFF8
   267                           tblptrh	equ	0xFF7
   268                           tblptrl	equ	0xFF6
   269                           tablat	equ	0xFF5
   270                           postinc0	equ	0xFEE
   271                           wreg	equ	0xFE8
   272                           
   273                           	psect	dataCOMRAM
   274  000037                     __pdataCOMRAM:
   275                           	opt stack 0
   276  000037                     _LCD_01_ADDRESS:
   277                           	opt stack 0
   278  000037                     	ds	1
   279                           tblptru	equ	0xFF8
   280                           tblptrh	equ	0xFF7
   281                           tblptrl	equ	0xFF6
   282                           tablat	equ	0xFF5
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           
   286                           	psect	bssBANK1
   287  000100                     __pbssBANK1:
   288                           	opt stack 0
   289  000100                     _text:
   290                           	opt stack 0
   291  000100                     	ds	80
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           
   299                           	psect	cstackBANK0
   300  000060                     __pcstackBANK0:
   301                           	opt stack 0
   302  000060                     riksFactors@text:
   303                           	opt stack 0
   304                           
   305                           ; 80 bytes @ 0x0
   306  000060                     	ds	80
   307  0000B0                     riksFactors@gender:
   308                           	opt stack 0
   309                           
   310                           ; 4 bytes @ 0x50
   311  0000B0                     	ds	4
   312  0000B4                     riksFactors@smoke:
   313                           	opt stack 0
   314                           
   315                           ; 4 bytes @ 0x54
   316  0000B4                     	ds	4
   317  0000B8                     riksFactors@parents:
   318                           	opt stack 0
   319                           
   320                           ; 4 bytes @ 0x58
   321  0000B8                     	ds	4
   322  0000BC                     riksFactors@systolic:
   323                           	opt stack 0
   324                           
   325                           ; 4 bytes @ 0x5C
   326  0000BC                     	ds	4
   327  0000C0                     riksFactors@diastolic:
   328                           	opt stack 0
   329                           
   330                           ; 4 bytes @ 0x60
   331  0000C0                     	ds	4
   332  0000C4                     riksFactors@edad:
   333                           	opt stack 0
   334                           
   335                           ; 4 bytes @ 0x64
   336  0000C4                     	ds	4
   337  0000C8                     riksFactors@estatura:
   338                           	opt stack 0
   339                           
   340                           ; 4 bytes @ 0x68
   341  0000C8                     	ds	4
   342  0000CC                     riksFactors@peso:
   343                           	opt stack 0
   344                           
   345                           ; 4 bytes @ 0x6C
   346  0000CC                     	ds	4
   347                           tblptru	equ	0xFF8
   348                           tblptrh	equ	0xFF7
   349                           tblptrl	equ	0xFF6
   350                           tablat	equ	0xFF5
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           
   354                           	psect	cstackCOMRAM
   355  000001                     __pcstackCOMRAM:
   356                           	opt stack 0
   357  000001                     ??_IdleI2C:
   358  000001                     ??_isdigit:
   359  000001                     ?_KP_scan:
   360                           	opt stack 0
   361  000001                     ?___wmul:
   362                           	opt stack 0
   363  000001                     ?___lldiv:
   364                           	opt stack 0
   365  000001                     OpenI2C@slew:
   366                           	opt stack 0
   367  000001                     ___wmul@multiplier:
   368                           	opt stack 0
   369  000001                     ___lldiv@dividend:
   370                           	opt stack 0
   371                           
   372                           ; 4 bytes @ 0x0
   373  000001                     	ds	1
   374  000002                     OpenI2C@sync_mode:
   375                           	opt stack 0
   376  000002                     WriteI2C@data_out:
   377                           	opt stack 0
   378  000002                     _isdigit$828:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0x1
   382  000002                     	ds	1
   383  000003                     ??_KP_scan:
   384  000003                     I2C_PCF8574_Write@value:
   385                           	opt stack 0
   386  000003                     isdigit@c:
   387                           	opt stack 0
   388  000003                     ___wmul@multiplicand:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x2
   392  000003                     	ds	1
   393  000004                     I2C_PCF8574_Write@dummy:
   394                           	opt stack 0
   395                           
   396                           ; 1 bytes @ 0x3
   397  000004                     	ds	1
   398  000005                     I2C_PCF8574_Write@S:
   399                           	opt stack 0
   400  000005                     KP_scan@press:
   401                           	opt stack 0
   402  000005                     ___wmul@product:
   403                           	opt stack 0
   404  000005                     ___lldiv@divisor:
   405                           	opt stack 0
   406                           
   407                           ; 4 bytes @ 0x4
   408  000005                     	ds	1
   409  000006                     I2C_PCF8574_Write@addr:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x5
   413  000006                     	ds	1
   414  000007                     ?_atoi:
   415                           	opt stack 0
   416  000007                     LCD_putcmd@data:
   417                           	opt stack 0
   418  000007                     LCD_putch@data:
   419                           	opt stack 0
   420  000007                     KP_scan@row:
   421                           	opt stack 0
   422  000007                     atoi@s:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x6
   426  000007                     	ds	1
   427  000008                     LCD_putcmd@cmdtype:
   428                           	opt stack 0
   429  000008                     LCD_putch@addr:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x7
   433  000008                     	ds	1
   434  000009                     ??_atoi:
   435  000009                     ??_LCD_putcmd:
   436  000009                     KP_Readbutton@key:
   437                           	opt stack 0
   438  000009                     LCD_putch@lcddata:
   439                           	opt stack 0
   440  000009                     ___lldiv@quotient:
   441                           	opt stack 0
   442                           
   443                           ; 4 bytes @ 0x8
   444  000009                     	ds	1
   445  00000A                     LCD_putcmd@addr:
   446                           	opt stack 0
   447  00000A                     LCD_puts@s:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x9
   451  00000A                     	ds	1
   452  00000B                     LCD_putcmd@lcddata:
   453                           	opt stack 0
   454  00000B                     atoi@sign:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0xA
   458  00000B                     	ds	1
   459  00000C                     ??_LCD_init:
   460  00000C                     LCD_goto@row:
   461                           	opt stack 0
   462  00000C                     LCD_puts@i:
   463                           	opt stack 0
   464  00000C                     atoi@a:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0xB
   468  00000C                     	ds	1
   469  00000D                     LCD_init@addr:
   470                           	opt stack 0
   471  00000D                     LCD_goto@column:
   472                           	opt stack 0
   473  00000D                     ___lldiv@counter:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0xC
   477  00000D                     	ds	1
   478  00000E                     ?___llmod:
   479                           	opt stack 0
   480  00000E                     LCD_goto@addr:
   481                           	opt stack 0
   482  00000E                     LCD_puts@addr:
   483                           	opt stack 0
   484  00000E                     ___llmod@dividend:
   485                           	opt stack 0
   486                           
   487                           ; 4 bytes @ 0xD
   488  00000E                     	ds	1
   489  00000F                     ?_keyNumber:
   490                           	opt stack 0
   491                           
   492                           ; 4 bytes @ 0xE
   493  00000F                     	ds	3
   494  000012                     ___llmod@divisor:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0x11
   498  000012                     	ds	1
   499  000013                     keyNumber@arreglo:
   500                           	opt stack 0
   501                           
   502                           ; 20 bytes @ 0x12
   503  000013                     	ds	3
   504  000016                     ___llmod@counter:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x15
   508  000016                     	ds	1
   509  000017                     ?_sprintf:
   510                           	opt stack 0
   511  000017                     sprintf@sp:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x16
   515  000017                     	ds	2
   516  000019                     sprintf@f:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x18
   520  000019                     	ds	14
   521  000027                     ??_sprintf:
   522  000027                     keyNumber@number:
   523                           	opt stack 0
   524                           
   525                           ; 4 bytes @ 0x26
   526  000027                     	ds	2
   527  000029                     sprintf@flag:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x28
   531  000029                     	ds	1
   532  00002A                     sprintf@prec:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x29
   536  00002A                     	ds	1
   537  00002B                     keyNumber@contador:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x2A
   541  00002B                     	ds	1
   542  00002C                     sprintf@val:
   543                           	opt stack 0
   544                           
   545                           ; 4 bytes @ 0x2B
   546  00002C                     	ds	1
   547  00002D                     keyNumber@tecla:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0x2C
   551  00002D                     	ds	1
   552  00002E                     keyNumber@i:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x2D
   556  00002E                     	ds	2
   557  000030                     sprintf@ap:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x2F
   561  000030                     	ds	2
   562  000032                     sprintf@c:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x31
   566  000032                     	ds	1
   567  000033                     main@counter:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x32
   571  000033                     	ds	2
   572                           tblptru	equ	0xFF8
   573                           tblptrh	equ	0xFF7
   574                           tblptrl	equ	0xFF6
   575                           tablat	equ	0xFF5
   576                           postinc0	equ	0xFEE
   577                           wreg	equ	0xFE8
   578                           
   579 ;;
   580 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   581 ;;
   582 ;; *************** function _main *****************
   583 ;; Defined at:
   584 ;;		line 21 in file "main.c"
   585 ;; Parameters:    Size  Location     Type
   586 ;;		None
   587 ;; Auto vars:     Size  Location     Type
   588 ;;  counter         2   50[COMRAM] unsigned int 
   589 ;; Return value:  Size  Location     Type
   590 ;;                  1    wreg      void 
   591 ;; Registers used:
   592 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   593 ;; Tracked objects:
   594 ;;		On entry : 0/0
   595 ;;		On exit  : 0/0
   596 ;;		Unchanged: 0/0
   597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   598 ;;      Params:         0       0       0       0       0       0       0       0       0
   599 ;;      Locals:         2       0       0       0       0       0       0       0       0
   600 ;;      Temps:          0       0       0       0       0       0       0       0       0
   601 ;;      Totals:         2       0       0       0       0       0       0       0       0
   602 ;;Total ram usage:        2 bytes
   603 ;; Hardware stack levels required when called:    7
   604 ;; This function calls:
   605 ;;		_KP_init
   606 ;;		_LCD_init
   607 ;;		_LCD_putcmd
   608 ;;		_OpenI2C
   609 ;;		_riksFactors
   610 ;; This function is called by:
   611 ;;		Startup code after reset
   612 ;; This function uses a non-reentrant model
   613 ;;
   614                           
   615                           	psect	text0
   616  001370                     __ptext0:
   617                           	opt stack 0
   618  001370                     _main:
   619                           	opt stack 24
   620                           
   621                           ;main.c: 25: OpenI2C(0b00001000, 0b10000000);
   622                           
   623                           ;incstack = 0
   624  001370  0E80               	movlw	128
   625  001372  6E01               	movwf	OpenI2C@slew,c
   626  001374  0E08               	movlw	8
   627  001376  EC18  F00A         	call	_OpenI2C
   628                           
   629                           ;main.c: 26: LCD_init(LCD_01_ADDRESS);
   630  00137A  5037               	movf	_LCD_01_ADDRESS,w,c
   631  00137C  EC08  F008         	call	_LCD_init
   632                           
   633                           ;main.c: 27: KP_init();
   634  001380  EC30  F00A         	call	_KP_init	;wreg free
   635                           
   636                           ;main.c: 30: unsigned int counter = 0;
   637  001384  0E00               	movlw	0
   638  001386  6E34               	movwf	main@counter+1,c
   639  001388  0E00               	movlw	0
   640  00138A  6E33               	movwf	main@counter,c
   641                           
   642                           ;main.c: 31: LCD_putcmd(LCD_01_ADDRESS, 0x01,1);
   643  00138C  0E01               	movlw	1
   644  00138E  6E07               	movwf	LCD_putcmd@data,c
   645  001390  0E01               	movlw	1
   646  001392  6E08               	movwf	LCD_putcmd@cmdtype,c
   647  001394  5037               	movf	_LCD_01_ADDRESS,w,c
   648  001396  EC67  F009         	call	_LCD_putcmd
   649  00139A                     l1964:
   650                           
   651                           ;main.c: 34: riksFactors();
   652  00139A  EC41  F004         	call	_riksFactors	;wreg free
   653  00139E  D7FD               	goto	l1964
   654  0013A0                     __end_of_main:
   655                           	opt stack 0
   656                           tblptru	equ	0xFF8
   657                           tblptrh	equ	0xFF7
   658                           tblptrl	equ	0xFF6
   659                           tablat	equ	0xFF5
   660                           postinc0	equ	0xFEE
   661                           wreg	equ	0xFE8
   662                           
   663 ;; *************** function _riksFactors *****************
   664 ;; Defined at:
   665 ;;		line 39 in file "funciones.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;		None
   668 ;; Auto vars:     Size  Location     Type
   669 ;;  text           80    0[BANK0 ] unsigned char [80]
   670 ;;  peso            4  108[BANK0 ] unsigned long 
   671 ;;  estatura        4  104[BANK0 ] unsigned long 
   672 ;;  edad            4  100[BANK0 ] unsigned long 
   673 ;;  diastolic       4   96[BANK0 ] unsigned long 
   674 ;;  systolic        4   92[BANK0 ] unsigned long 
   675 ;;  parents         4   88[BANK0 ] unsigned long 
   676 ;;  smoke           4   84[BANK0 ] unsigned long 
   677 ;;  gender          4   80[BANK0 ] unsigned long 
   678 ;; Return value:  Size  Location     Type
   679 ;;                  1    wreg      void 
   680 ;; Registers used:
   681 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   682 ;; Tracked objects:
   683 ;;		On entry : 0/0
   684 ;;		On exit  : 0/0
   685 ;;		Unchanged: 0/0
   686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   687 ;;      Params:         0       0       0       0       0       0       0       0       0
   688 ;;      Locals:         0     112       0       0       0       0       0       0       0
   689 ;;      Temps:          0       0       0       0       0       0       0       0       0
   690 ;;      Totals:         0     112       0       0       0       0       0       0       0
   691 ;;Total ram usage:      112 bytes
   692 ;; Hardware stack levels used:    1
   693 ;; Hardware stack levels required when called:    6
   694 ;; This function calls:
   695 ;;		_LCD_goto
   696 ;;		_LCD_puts
   697 ;;		_keyNumber
   698 ;;		_sprintf
   699 ;; This function is called by:
   700 ;;		_main
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           	psect	text1
   705  000882                     __ptext1:
   706                           	opt stack 0
   707  000882                     _riksFactors:
   708                           	opt stack 24
   709                           
   710                           ;funciones.c: 40: unsigned char text[80];
   711                           ;funciones.c: 41: unsigned long int edad=0,estatura=0,peso=0,gender=0,smoke=0,parents=0,
      +                          systolic=0,diastolic=0;
   712                           
   713                           ;incstack = 0
   714  000882  0E00               	movlw	0
   715  000884  0100               	movlb	0	; () banked
   716  000886  6FC4               	movwf	riksFactors@edad& (0+255),b
   717  000888  0E00               	movlw	0
   718  00088A  6FC5               	movwf	(riksFactors@edad+1)& (0+255),b
   719  00088C  0E00               	movlw	0
   720  00088E  6FC6               	movwf	(riksFactors@edad+2)& (0+255),b
   721  000890  0E00               	movlw	0
   722  000892  6FC7               	movwf	(riksFactors@edad+3)& (0+255),b
   723  000894  0E00               	movlw	0
   724  000896  0100               	movlb	0	; () banked
   725  000898  6FC8               	movwf	riksFactors@estatura& (0+255),b
   726  00089A  0E00               	movlw	0
   727  00089C  6FC9               	movwf	(riksFactors@estatura+1)& (0+255),b
   728  00089E  0E00               	movlw	0
   729  0008A0  6FCA               	movwf	(riksFactors@estatura+2)& (0+255),b
   730  0008A2  0E00               	movlw	0
   731  0008A4  6FCB               	movwf	(riksFactors@estatura+3)& (0+255),b
   732  0008A6  0E00               	movlw	0
   733  0008A8  0100               	movlb	0	; () banked
   734  0008AA  6FCC               	movwf	riksFactors@peso& (0+255),b
   735  0008AC  0E00               	movlw	0
   736  0008AE  6FCD               	movwf	(riksFactors@peso+1)& (0+255),b
   737  0008B0  0E00               	movlw	0
   738  0008B2  6FCE               	movwf	(riksFactors@peso+2)& (0+255),b
   739  0008B4  0E00               	movlw	0
   740  0008B6  6FCF               	movwf	(riksFactors@peso+3)& (0+255),b
   741  0008B8  0E00               	movlw	0
   742  0008BA  0100               	movlb	0	; () banked
   743  0008BC  6FB0               	movwf	riksFactors@gender& (0+255),b
   744  0008BE  0E00               	movlw	0
   745  0008C0  6FB1               	movwf	(riksFactors@gender+1)& (0+255),b
   746  0008C2  0E00               	movlw	0
   747  0008C4  6FB2               	movwf	(riksFactors@gender+2)& (0+255),b
   748  0008C6  0E00               	movlw	0
   749  0008C8  6FB3               	movwf	(riksFactors@gender+3)& (0+255),b
   750  0008CA  0E00               	movlw	0
   751  0008CC  0100               	movlb	0	; () banked
   752  0008CE  6FB4               	movwf	riksFactors@smoke& (0+255),b
   753  0008D0  0E00               	movlw	0
   754  0008D2  6FB5               	movwf	(riksFactors@smoke+1)& (0+255),b
   755  0008D4  0E00               	movlw	0
   756  0008D6  6FB6               	movwf	(riksFactors@smoke+2)& (0+255),b
   757  0008D8  0E00               	movlw	0
   758  0008DA  6FB7               	movwf	(riksFactors@smoke+3)& (0+255),b
   759  0008DC  0E00               	movlw	0
   760  0008DE  0100               	movlb	0	; () banked
   761  0008E0  6FB8               	movwf	riksFactors@parents& (0+255),b
   762  0008E2  0E00               	movlw	0
   763  0008E4  6FB9               	movwf	(riksFactors@parents+1)& (0+255),b
   764  0008E6  0E00               	movlw	0
   765  0008E8  6FBA               	movwf	(riksFactors@parents+2)& (0+255),b
   766  0008EA  0E00               	movlw	0
   767  0008EC  6FBB               	movwf	(riksFactors@parents+3)& (0+255),b
   768  0008EE  0E00               	movlw	0
   769  0008F0  0100               	movlb	0	; () banked
   770  0008F2  6FBC               	movwf	riksFactors@systolic& (0+255),b
   771  0008F4  0E00               	movlw	0
   772  0008F6  6FBD               	movwf	(riksFactors@systolic+1)& (0+255),b
   773  0008F8  0E00               	movlw	0
   774  0008FA  6FBE               	movwf	(riksFactors@systolic+2)& (0+255),b
   775  0008FC  0E00               	movlw	0
   776  0008FE  6FBF               	movwf	(riksFactors@systolic+3)& (0+255),b
   777  000900  0E00               	movlw	0
   778  000902  0100               	movlb	0	; () banked
   779  000904  6FC0               	movwf	riksFactors@diastolic& (0+255),b
   780  000906  0E00               	movlw	0
   781  000908  6FC1               	movwf	(riksFactors@diastolic+1)& (0+255),b
   782  00090A  0E00               	movlw	0
   783  00090C  6FC2               	movwf	(riksFactors@diastolic+2)& (0+255),b
   784  00090E  0E00               	movlw	0
   785  000910  6FC3               	movwf	(riksFactors@diastolic+3)& (0+255),b
   786                           
   787                           ; BSR set to: 0
   788                           ;funciones.c: 44: LCD_goto(LCD_01_ADDRESS,1,1);
   789  000912  0E01               	movlw	1
   790  000914  6E0C               	movwf	LCD_goto@row,c
   791  000916  0E01               	movlw	1
   792  000918  6E0D               	movwf	LCD_goto@column,c
   793  00091A  5037               	movf	_LCD_01_ADDRESS,w,c
   794  00091C  EC98  F008         	call	_LCD_goto
   795                           
   796                           ;funciones.c: 45: LCD_puts(LCD_01_ADDRESS,"                        " );
   797  000920  0E29               	movlw	low STR_1
   798  000922  6E0A               	movwf	LCD_puts@s,c
   799  000924  0E08               	movlw	high STR_1
   800  000926  6E0B               	movwf	LCD_puts@s+1,c
   801  000928  5037               	movf	_LCD_01_ADDRESS,w,c
   802  00092A  EC08  F009         	call	_LCD_puts
   803                           
   804                           ;funciones.c: 47: LCD_goto(LCD_01_ADDRESS,2,1);
   805  00092E  0E02               	movlw	2
   806  000930  6E0C               	movwf	LCD_goto@row,c
   807  000932  0E01               	movlw	1
   808  000934  6E0D               	movwf	LCD_goto@column,c
   809  000936  5037               	movf	_LCD_01_ADDRESS,w,c
   810  000938  EC98  F008         	call	_LCD_goto
   811                           
   812                           ;funciones.c: 48: LCD_puts(LCD_01_ADDRESS,"                        " );
   813  00093C  0E29               	movlw	low STR_1
   814  00093E  6E0A               	movwf	LCD_puts@s,c
   815  000940  0E08               	movlw	high STR_1
   816  000942  6E0B               	movwf	LCD_puts@s+1,c
   817  000944  5037               	movf	_LCD_01_ADDRESS,w,c
   818  000946  EC08  F009         	call	_LCD_puts
   819                           
   820                           ;funciones.c: 50: LCD_goto(LCD_01_ADDRESS,1,1);
   821  00094A  0E01               	movlw	1
   822  00094C  6E0C               	movwf	LCD_goto@row,c
   823  00094E  0E01               	movlw	1
   824  000950  6E0D               	movwf	LCD_goto@column,c
   825  000952  5037               	movf	_LCD_01_ADDRESS,w,c
   826  000954  EC98  F008         	call	_LCD_goto
   827                           
   828                           ;funciones.c: 51: LCD_puts(LCD_01_ADDRESS,"Teclee edad" );
   829  000958  0E68               	movlw	low STR_3
   830  00095A  6E0A               	movwf	LCD_puts@s,c
   831  00095C  0E08               	movlw	high STR_3
   832  00095E  6E0B               	movwf	LCD_puts@s+1,c
   833  000960  5037               	movf	_LCD_01_ADDRESS,w,c
   834  000962  EC08  F009         	call	_LCD_puts
   835                           
   836                           ;funciones.c: 52: edad = keyNumber();
   837  000966  ECA9  F007         	call	_keyNumber	;wreg free
   838  00096A  C00F  F0C4         	movff	?_keyNumber,riksFactors@edad
   839  00096E  C010  F0C5         	movff	?_keyNumber+1,riksFactors@edad+1
   840  000972  C011  F0C6         	movff	?_keyNumber+2,riksFactors@edad+2
   841  000976  C012  F0C7         	movff	?_keyNumber+3,riksFactors@edad+3
   842                           
   843                           ;funciones.c: 54: LCD_goto(LCD_01_ADDRESS,2,1);
   844  00097A  0E02               	movlw	2
   845  00097C  6E0C               	movwf	LCD_goto@row,c
   846  00097E  0E01               	movlw	1
   847  000980  6E0D               	movwf	LCD_goto@column,c
   848  000982  5037               	movf	_LCD_01_ADDRESS,w,c
   849  000984  EC98  F008         	call	_LCD_goto
   850                           
   851                           ;funciones.c: 55: LCD_puts(LCD_01_ADDRESS,"                        " );
   852  000988  0E29               	movlw	low STR_1
   853  00098A  6E0A               	movwf	LCD_puts@s,c
   854  00098C  0E08               	movlw	high STR_1
   855  00098E  6E0B               	movwf	LCD_puts@s+1,c
   856  000990  5037               	movf	_LCD_01_ADDRESS,w,c
   857  000992  EC08  F009         	call	_LCD_puts
   858                           
   859                           ;funciones.c: 57: LCD_goto(LCD_01_ADDRESS,1,1);
   860  000996  0E01               	movlw	1
   861  000998  6E0C               	movwf	LCD_goto@row,c
   862  00099A  0E01               	movlw	1
   863  00099C  6E0D               	movwf	LCD_goto@column,c
   864  00099E  5037               	movf	_LCD_01_ADDRESS,w,c
   865  0009A0  EC98  F008         	call	_LCD_goto
   866                           
   867                           ;funciones.c: 58: LCD_puts(LCD_01_ADDRESS,"Teclee peso en kg" );
   868  0009A4  0E56               	movlw	low STR_5
   869  0009A6  6E0A               	movwf	LCD_puts@s,c
   870  0009A8  0E08               	movlw	high STR_5
   871  0009AA  6E0B               	movwf	LCD_puts@s+1,c
   872  0009AC  5037               	movf	_LCD_01_ADDRESS,w,c
   873  0009AE  EC08  F009         	call	_LCD_puts
   874                           
   875                           ;funciones.c: 59: peso = keyNumber();
   876  0009B2  ECA9  F007         	call	_keyNumber	;wreg free
   877  0009B6  C00F  F0CC         	movff	?_keyNumber,riksFactors@peso
   878  0009BA  C010  F0CD         	movff	?_keyNumber+1,riksFactors@peso+1
   879  0009BE  C011  F0CE         	movff	?_keyNumber+2,riksFactors@peso+2
   880  0009C2  C012  F0CF         	movff	?_keyNumber+3,riksFactors@peso+3
   881                           
   882                           ;funciones.c: 61: LCD_goto(LCD_01_ADDRESS,2,1);
   883  0009C6  0E02               	movlw	2
   884  0009C8  6E0C               	movwf	LCD_goto@row,c
   885  0009CA  0E01               	movlw	1
   886  0009CC  6E0D               	movwf	LCD_goto@column,c
   887  0009CE  5037               	movf	_LCD_01_ADDRESS,w,c
   888  0009D0  EC98  F008         	call	_LCD_goto
   889                           
   890                           ;funciones.c: 62: LCD_puts(LCD_01_ADDRESS,"                        " );
   891  0009D4  0E29               	movlw	low STR_1
   892  0009D6  6E0A               	movwf	LCD_puts@s,c
   893  0009D8  0E08               	movlw	high STR_1
   894  0009DA  6E0B               	movwf	LCD_puts@s+1,c
   895  0009DC  5037               	movf	_LCD_01_ADDRESS,w,c
   896  0009DE  EC08  F009         	call	_LCD_puts
   897                           
   898                           ;funciones.c: 64: LCD_goto(LCD_01_ADDRESS,2,1);
   899  0009E2  0E02               	movlw	2
   900  0009E4  6E0C               	movwf	LCD_goto@row,c
   901  0009E6  0E01               	movlw	1
   902  0009E8  6E0D               	movwf	LCD_goto@column,c
   903  0009EA  5037               	movf	_LCD_01_ADDRESS,w,c
   904  0009EC  EC98  F008         	call	_LCD_goto
   905                           
   906                           ;funciones.c: 65: LCD_puts(LCD_01_ADDRESS,"                        " );
   907  0009F0  0E29               	movlw	low STR_1
   908  0009F2  6E0A               	movwf	LCD_puts@s,c
   909  0009F4  0E08               	movlw	high STR_1
   910  0009F6  6E0B               	movwf	LCD_puts@s+1,c
   911  0009F8  5037               	movf	_LCD_01_ADDRESS,w,c
   912  0009FA  EC08  F009         	call	_LCD_puts
   913                           
   914                           ;funciones.c: 67: LCD_goto(LCD_01_ADDRESS,1,1);
   915  0009FE  0E01               	movlw	1
   916  000A00  6E0C               	movwf	LCD_goto@row,c
   917  000A02  0E01               	movlw	1
   918  000A04  6E0D               	movwf	LCD_goto@column,c
   919  000A06  5037               	movf	_LCD_01_ADDRESS,w,c
   920  000A08  EC98  F008         	call	_LCD_goto
   921                           
   922                           ;funciones.c: 68: LCD_puts(LCD_01_ADDRESS,"Teclee estatura(cm)" );
   923  000A0C  0E42               	movlw	low STR_8
   924  000A0E  6E0A               	movwf	LCD_puts@s,c
   925  000A10  0E08               	movlw	high STR_8
   926  000A12  6E0B               	movwf	LCD_puts@s+1,c
   927  000A14  5037               	movf	_LCD_01_ADDRESS,w,c
   928  000A16  EC08  F009         	call	_LCD_puts
   929                           
   930                           ;funciones.c: 69: estatura = keyNumber();
   931  000A1A  ECA9  F007         	call	_keyNumber	;wreg free
   932  000A1E  C00F  F0C8         	movff	?_keyNumber,riksFactors@estatura
   933  000A22  C010  F0C9         	movff	?_keyNumber+1,riksFactors@estatura+1
   934  000A26  C011  F0CA         	movff	?_keyNumber+2,riksFactors@estatura+2
   935  000A2A  C012  F0CB         	movff	?_keyNumber+3,riksFactors@estatura+3
   936                           
   937                           ;funciones.c: 71: LCD_goto(LCD_01_ADDRESS,2,1);
   938  000A2E  0E02               	movlw	2
   939  000A30  6E0C               	movwf	LCD_goto@row,c
   940  000A32  0E01               	movlw	1
   941  000A34  6E0D               	movwf	LCD_goto@column,c
   942  000A36  5037               	movf	_LCD_01_ADDRESS,w,c
   943  000A38  EC98  F008         	call	_LCD_goto
   944                           
   945                           ;funciones.c: 72: LCD_puts(LCD_01_ADDRESS,"                        " );
   946  000A3C  0E29               	movlw	low STR_1
   947  000A3E  6E0A               	movwf	LCD_puts@s,c
   948  000A40  0E08               	movlw	high STR_1
   949  000A42  6E0B               	movwf	LCD_puts@s+1,c
   950  000A44  5037               	movf	_LCD_01_ADDRESS,w,c
   951  000A46  EC08  F009         	call	_LCD_puts
   952                           
   953                           ;funciones.c: 75: sprintf(text, "%lu,%lu,%lu", edad,peso,estatura);
   954  000A4A  0E60               	movlw	low riksFactors@text
   955  000A4C  6E17               	movwf	sprintf@sp,c
   956  000A4E  0E00               	movlw	high riksFactors@text
   957  000A50  6E18               	movwf	sprintf@sp+1,c
   958  000A52  0E74               	movlw	low STR_10
   959  000A54  6E19               	movwf	sprintf@f,c
   960  000A56  0E08               	movlw	high STR_10
   961  000A58  6E1A               	movwf	sprintf@f+1,c
   962  000A5A  C0C4  F01B         	movff	riksFactors@edad,?_sprintf+4
   963  000A5E  C0C5  F01C         	movff	riksFactors@edad+1,?_sprintf+5
   964  000A62  C0C6  F01D         	movff	riksFactors@edad+2,?_sprintf+6
   965  000A66  C0C7  F01E         	movff	riksFactors@edad+3,?_sprintf+7
   966  000A6A  C0CC  F01F         	movff	riksFactors@peso,?_sprintf+8
   967  000A6E  C0CD  F020         	movff	riksFactors@peso+1,?_sprintf+9
   968  000A72  C0CE  F021         	movff	riksFactors@peso+2,?_sprintf+10
   969  000A76  C0CF  F022         	movff	riksFactors@peso+3,?_sprintf+11
   970  000A7A  C0C8  F023         	movff	riksFactors@estatura,?_sprintf+12
   971  000A7E  C0C9  F024         	movff	riksFactors@estatura+1,?_sprintf+13
   972  000A82  C0CA  F025         	movff	riksFactors@estatura+2,?_sprintf+14
   973  000A86  C0CB  F026         	movff	riksFactors@estatura+3,?_sprintf+15
   974  000A8A  EC56  F005         	call	_sprintf	;wreg free
   975                           
   976                           ;funciones.c: 76: LCD_goto(LCD_01_ADDRESS,2,1);
   977  000A8E  0E02               	movlw	2
   978  000A90  6E0C               	movwf	LCD_goto@row,c
   979  000A92  0E01               	movlw	1
   980  000A94  6E0D               	movwf	LCD_goto@column,c
   981  000A96  5037               	movf	_LCD_01_ADDRESS,w,c
   982  000A98  EC98  F008         	call	_LCD_goto
   983                           
   984                           ;funciones.c: 77: LCD_puts(LCD_01_ADDRESS,text );
   985  000A9C  0E60               	movlw	low riksFactors@text
   986  000A9E  6E0A               	movwf	LCD_puts@s,c
   987  000AA0  0E00               	movlw	high riksFactors@text
   988  000AA2  6E0B               	movwf	LCD_puts@s+1,c
   989  000AA4  5037               	movf	_LCD_01_ADDRESS,w,c
   990  000AA6  EC08  F009         	call	_LCD_puts
   991  000AAA  0012               	return		;funcret
   992  000AAC                     __end_of_riksFactors:
   993                           	opt stack 0
   994                           tblptru	equ	0xFF8
   995                           tblptrh	equ	0xFF7
   996                           tblptrl	equ	0xFF6
   997                           tablat	equ	0xFF5
   998                           postinc0	equ	0xFEE
   999                           wreg	equ	0xFE8
  1000                           
  1001 ;; *************** function _sprintf *****************
  1002 ;; Defined at:
  1003 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;  sp              2   22[COMRAM] PTR unsigned char 
  1006 ;;		 -> riksFactors@text(80), 
  1007 ;;  f               2   24[COMRAM] PTR const unsigned char 
  1008 ;;		 -> STR_10(12), 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  val             4   43[COMRAM] unsigned long 
  1011 ;;  tmpval          4    0        struct .
  1012 ;;  cp              3    0        PTR const unsigned char 
  1013 ;;  ap              2   47[COMRAM] PTR void [1]
  1014 ;;		 -> ?_sprintf(2), 
  1015 ;;  prec            2   41[COMRAM] int 
  1016 ;;  len             2    0        unsigned int 
  1017 ;;  c               1   49[COMRAM] char 
  1018 ;;  flag            1   40[COMRAM] unsigned char 
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  2   22[COMRAM] int 
  1021 ;; Registers used:
  1022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1028 ;;      Params:        16       0       0       0       0       0       0       0       0
  1029 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1030 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1031 ;;      Totals:        28       0       0       0       0       0       0       0       0
  1032 ;;Total ram usage:       28 bytes
  1033 ;; Hardware stack levels used:    1
  1034 ;; Hardware stack levels required when called:    1
  1035 ;; This function calls:
  1036 ;;		___lldiv
  1037 ;;		___llmod
  1038 ;; This function is called by:
  1039 ;;		_riksFactors
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text2
  1044  000AAC                     __ptext2:
  1045                           	opt stack 0
  1046  000AAC                     _sprintf:
  1047                           	opt stack 28
  1048                           
  1049                           ;doprnt.c: 494: va_list ap;
  1050                           ;doprnt.c: 499: signed char c;
  1051                           ;doprnt.c: 504: int prec;
  1052                           ;doprnt.c: 508: unsigned char flag;
  1053                           ;doprnt.c: 523: union {
  1054                           ;doprnt.c: 524: unsigned long vd;
  1055                           ;doprnt.c: 525: double integ;
  1056                           ;doprnt.c: 526: } tmpval;
  1057                           ;doprnt.c: 528: unsigned long val;
  1058                           ;doprnt.c: 529: unsigned len;
  1059                           ;doprnt.c: 530: const char * cp;
  1060                           ;doprnt.c: 533: *ap = __va_start();
  1061                           
  1062                           ;incstack = 0
  1063  000AAC  0E1B               	movlw	low (?_sprintf+4)
  1064  000AAE  6E30               	movwf	sprintf@ap,c
  1065  000AB0  0E00               	movlw	high (?_sprintf+4)
  1066  000AB2  6E31               	movwf	sprintf@ap+1,c
  1067                           
  1068                           ;doprnt.c: 536: while(c = *f++) {
  1069  000AB4  D0BA               	goto	l1866
  1070  000AB6                     l1818:
  1071                           
  1072                           ;doprnt.c: 538: if(c != '%')
  1073  000AB6  0E25               	movlw	37
  1074  000AB8  1832               	xorwf	sprintf@c,w,c
  1075  000ABA  B4D8               	btfsc	status,2,c
  1076  000ABC  D009               	goto	l1824
  1077                           
  1078                           ;doprnt.c: 540: {
  1079                           ;doprnt.c: 541: ((*sp++ = (c)));
  1080  000ABE  C017  FFD9         	movff	sprintf@sp,fsr2l
  1081  000AC2  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1082  000AC6  C032  FFDF         	movff	sprintf@c,indf2
  1083  000ACA  4A17               	infsnz	sprintf@sp,f,c
  1084  000ACC  2A18               	incf	sprintf@sp+1,f,c
  1085                           
  1086                           ;doprnt.c: 542: continue;
  1087  000ACE  D0AD               	goto	l1866
  1088  000AD0                     l1824:
  1089                           
  1090                           ;doprnt.c: 543: }
  1091                           ;doprnt.c: 548: flag = 0;
  1092  000AD0  0E00               	movlw	0
  1093  000AD2  6E29               	movwf	sprintf@flag,c
  1094                           
  1095                           ;doprnt.c: 635: switch(c = *f++) {
  1096                           
  1097                           ;doprnt.c: 633: loop:
  1098  000AD4  D005               	goto	l1832
  1099  000AD6                     l1826:
  1100                           
  1101                           ;doprnt.c: 643: flag |= 0x10;
  1102  000AD6  8829               	bsf	sprintf@flag,4,c
  1103                           
  1104                           ;doprnt.c: 644: goto loop;
  1105  000AD8  D003               	goto	l1832
  1106  000ADA                     l1828:
  1107                           
  1108                           ;doprnt.c: 818: flag |= 0xC0;
  1109  000ADA  0EC0               	movlw	192
  1110  000ADC  1229               	iorwf	sprintf@flag,f,c
  1111                           
  1112                           ;doprnt.c: 822: }
  1113                           
  1114                           ;doprnt.c: 819: break;
  1115  000ADE  D014               	goto	l175
  1116  000AE0                     l1832:
  1117  000AE0  C019  FFF6         	movff	sprintf@f,tblptrl
  1118  000AE4  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1119  000AE8  4A19               	infsnz	sprintf@f,f,c
  1120  000AEA  2A1A               	incf	sprintf@f+1,f,c
  1121  000AEC                     	if	0	;tblptru may be non-zero
  1122  000AEC                     	endif
  1123  000AEC                     	if	0	;tblptru may be non-zero
  1124  000AEC                     	endif
  1125  000AEC  0008               	tblrd		*
  1126  000AEE  CFF5 F032          	movff	tablat,sprintf@c
  1127  000AF2  5032               	movf	sprintf@c,w,c
  1128                           
  1129                           ; Switch size 1, requested type "space"
  1130                           ; Number of cases is 3, Range of values is 0 to 117
  1131                           ; switch strategies available:
  1132                           ; Name         Instructions Cycles
  1133                           ; simple_byte           10     6 (average)
  1134                           ;	Chosen strategy is simple_byte
  1135  000AF4  0A00               	xorlw	0	; case 0
  1136  000AF6  B4D8               	btfsc	status,2,c
  1137  000AF8  D0A4               	goto	l1868
  1138  000AFA  0A6C               	xorlw	108	; case 108
  1139  000AFC  B4D8               	btfsc	status,2,c
  1140  000AFE  D7EB               	goto	l1826
  1141  000B00  0A19               	xorlw	25	; case 117
  1142  000B02  B4D8               	btfsc	status,2,c
  1143  000B04  D7EA               	goto	l1828
  1144  000B06  D091               	goto	l1866
  1145  000B08                     l175:
  1146                           
  1147                           ;doprnt.c: 1273: {
  1148                           ;doprnt.c: 1281: if(flag & 0x10)
  1149  000B08  A829               	btfss	sprintf@flag,4,c
  1150  000B0A  D00E               	goto	l1838
  1151                           
  1152                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  1153  000B0C  C030  FFD9         	movff	sprintf@ap,fsr2l
  1154  000B10  C031  FFDA         	movff	sprintf@ap+1,fsr2h
  1155  000B14  CFDE F02C          	movff	postinc2,sprintf@val
  1156  000B18  CFDE F02D          	movff	postinc2,sprintf@val+1
  1157  000B1C  CFDE F02E          	movff	postinc2,sprintf@val+2
  1158  000B20  CFDE F02F          	movff	postinc2,sprintf@val+3
  1159  000B24  0E04               	movlw	4
  1160  000B26  D00F               	goto	L1
  1161  000B28                     l1838:
  1162                           
  1163                           ;doprnt.c: 1283: else
  1164                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1165  000B28  C030  FFD9         	movff	sprintf@ap,fsr2l
  1166  000B2C  C031  FFDA         	movff	sprintf@ap+1,fsr2h
  1167  000B30  CFDE F027          	movff	postinc2,??_sprintf
  1168  000B34  CFDD F028          	movff	postdec2,??_sprintf+1
  1169  000B38  C027  F02C         	movff	??_sprintf,sprintf@val
  1170  000B3C  C028  F02D         	movff	??_sprintf+1,sprintf@val+1
  1171  000B40  6A2E               	clrf	sprintf@val+2,c
  1172  000B42  6A2F               	clrf	sprintf@val+3,c
  1173  000B44  0E02               	movlw	2
  1174  000B46                     L1:
  1175  000B46  2630               	addwf	sprintf@ap,f,c
  1176  000B48  0E00               	movlw	0
  1177  000B4A  2231               	addwfc	sprintf@ap+1,f,c
  1178                           
  1179                           ;doprnt.c: 1287: }
  1180                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1181  000B4C  0E01               	movlw	1
  1182  000B4E  6E32               	movwf	sprintf@c,c
  1183  000B50                     l1844:
  1184  000B50  0E0A               	movlw	10
  1185  000B52  1832               	xorwf	sprintf@c,w,c
  1186  000B54  B4D8               	btfsc	status,2,c
  1187  000B56  D018               	goto	l1856
  1188                           
  1189                           ;doprnt.c: 1306: if(val < dpowers[c])
  1190  000B58  5032               	movf	sprintf@c,w,c
  1191  000B5A  0D04               	mullw	4
  1192  000B5C  0E01               	movlw	low _dpowers
  1193  000B5E  24F3               	addwf	prodl,w,c
  1194  000B60  6EF6               	movwf	tblptrl,c
  1195  000B62  0E08               	movlw	high _dpowers
  1196  000B64  20F4               	addwfc	prodh,w,c
  1197  000B66  6EF7               	movwf	tblptrh,c
  1198  000B68                     	if	0	;There are less than 3 active tblptr bytes
  1199  000B68                     	endif
  1200  000B68  0009               	tblrd		*+
  1201  000B6A  50F5               	movf	tablat,w,c
  1202  000B6C  5C2C               	subwf	sprintf@val,w,c
  1203  000B6E  0009               	tblrd		*+
  1204  000B70  50F5               	movf	tablat,w,c
  1205  000B72  582D               	subwfb	sprintf@val+1,w,c
  1206  000B74  0009               	tblrd		*+
  1207  000B76  50F5               	movf	tablat,w,c
  1208  000B78  582E               	subwfb	sprintf@val+2,w,c
  1209  000B7A  0009               	tblrd		*+
  1210  000B7C  50F5               	movf	tablat,w,c
  1211  000B7E  582F               	subwfb	sprintf@val+3,w,c
  1212  000B80  A0D8               	btfss	status,0,c
  1213  000B82  D002               	goto	l1856
  1214                           
  1215                           ;doprnt.c: 1307: break;
  1216  000B84  2A32               	incf	sprintf@c,f,c
  1217  000B86  D7E4               	goto	l1844
  1218  000B88                     l1856:
  1219                           
  1220                           ;doprnt.c: 1422: {
  1221                           ;doprnt.c: 1469: }
  1222                           ;doprnt.c: 1472: prec = c;
  1223  000B88  5032               	movf	sprintf@c,w,c
  1224  000B8A  6E2A               	movwf	sprintf@prec,c
  1225  000B8C  6A2B               	clrf	sprintf@prec+1,c
  1226  000B8E  BE2A               	btfsc	sprintf@prec,7,c
  1227  000B90  062B               	decf	sprintf@prec+1,f,c
  1228                           
  1229                           ;doprnt.c: 1474: while(prec--) {
  1230  000B92  D043               	goto	l1864
  1231  000B94                     l1858:
  1232                           
  1233                           ;doprnt.c: 1478: {
  1234                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1235  000B94  C02A  F027         	movff	sprintf@prec,??_sprintf
  1236  000B98  C02B  F028         	movff	sprintf@prec+1,??_sprintf+1
  1237  000B9C  90D8               	bcf	status,0,c
  1238  000B9E  3627               	rlcf	??_sprintf,f,c
  1239  000BA0  3628               	rlcf	??_sprintf+1,f,c
  1240  000BA2  90D8               	bcf	status,0,c
  1241  000BA4  3627               	rlcf	??_sprintf,f,c
  1242  000BA6  3628               	rlcf	??_sprintf+1,f,c
  1243  000BA8  0E01               	movlw	low _dpowers
  1244  000BAA  2427               	addwf	??_sprintf,w,c
  1245  000BAC  6EF6               	movwf	tblptrl,c
  1246  000BAE  0E08               	movlw	high _dpowers
  1247  000BB0  2028               	addwfc	??_sprintf+1,w,c
  1248  000BB2  6EF7               	movwf	tblptrh,c
  1249  000BB4                     	if	0	;There are less than 3 active tblptr bytes
  1250  000BB4                     	endif
  1251  000BB4  0009               	tblrd		*+
  1252  000BB6  CFF5 F005          	movff	tablat,___lldiv@divisor
  1253  000BBA  0009               	tblrd		*+
  1254  000BBC  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1255  000BC0  0009               	tblrd		*+
  1256  000BC2  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1257  000BC6  000A               	tblrd		*-
  1258  000BC8  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1259  000BCC  C02C  F001         	movff	sprintf@val,___lldiv@dividend
  1260  000BD0  C02D  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1261  000BD4  C02E  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1262  000BD8  C02F  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1263  000BDC  EC57  F008         	call	___lldiv	;wreg free
  1264  000BE0  C001  F00E         	movff	?___lldiv,___llmod@dividend
  1265  000BE4  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  1266  000BE8  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  1267  000BEC  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  1268  000BF0  0E0A               	movlw	10
  1269  000BF2  6E12               	movwf	___llmod@divisor,c
  1270  000BF4  0E00               	movlw	0
  1271  000BF6  6E13               	movwf	___llmod@divisor+1,c
  1272  000BF8  0E00               	movlw	0
  1273  000BFA  6E14               	movwf	___llmod@divisor+2,c
  1274  000BFC  0E00               	movlw	0
  1275  000BFE  6E15               	movwf	___llmod@divisor+3,c
  1276  000C00  ECD5  F008         	call	___llmod	;wreg free
  1277  000C04  500E               	movf	?___llmod,w,c
  1278  000C06  0F30               	addlw	48
  1279  000C08  6E32               	movwf	sprintf@c,c
  1280                           
  1281                           ;doprnt.c: 1523: }
  1282                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1283  000C0A  C017  FFD9         	movff	sprintf@sp,fsr2l
  1284  000C0E  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1285  000C12  C032  FFDF         	movff	sprintf@c,indf2
  1286  000C16  4A17               	infsnz	sprintf@sp,f,c
  1287  000C18  2A18               	incf	sprintf@sp+1,f,c
  1288  000C1A                     l1864:
  1289  000C1A  062A               	decf	sprintf@prec,f,c
  1290  000C1C  A0D8               	btfss	status,0,c
  1291  000C1E  062B               	decf	sprintf@prec+1,f,c
  1292  000C20  282A               	incf	sprintf@prec,w,c
  1293  000C22  E1B8               	bnz	l1858
  1294  000C24  282B               	incf	sprintf@prec+1,w,c
  1295  000C26  A4D8               	btfss	status,2,c
  1296  000C28  D7B5               	goto	l1858
  1297  000C2A                     l1866:
  1298  000C2A  C019  FFF6         	movff	sprintf@f,tblptrl
  1299  000C2E  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1300  000C32  4A19               	infsnz	sprintf@f,f,c
  1301  000C34  2A1A               	incf	sprintf@f+1,f,c
  1302  000C36                     	if	0	;tblptru may be non-zero
  1303  000C36                     	endif
  1304  000C36                     	if	0	;tblptru may be non-zero
  1305  000C36                     	endif
  1306  000C36  0008               	tblrd		*
  1307  000C38  CFF5 F032          	movff	tablat,sprintf@c
  1308  000C3C  5032               	movf	sprintf@c,w,c
  1309  000C3E  A4D8               	btfss	status,2,c
  1310  000C40  D73A               	goto	l1818
  1311  000C42                     l1868:
  1312                           
  1313                           ;doprnt.c: 1538: *sp = 0;
  1314  000C42  C017  FFD9         	movff	sprintf@sp,fsr2l
  1315  000C46  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1316  000C4A  0E00               	movlw	0
  1317  000C4C  6EDF               	movwf	indf2,c
  1318  000C4E  0012               	return	
  1319  000C50                     __end_of_sprintf:
  1320                           	opt stack 0
  1321                           tblptru	equ	0xFF8
  1322                           tblptrh	equ	0xFF7
  1323                           tblptrl	equ	0xFF6
  1324                           tablat	equ	0xFF5
  1325                           prodh	equ	0xFF4
  1326                           prodl	equ	0xFF3
  1327                           postinc0	equ	0xFEE
  1328                           wreg	equ	0xFE8
  1329                           indf2	equ	0xFDF
  1330                           postinc2	equ	0xFDE
  1331                           postdec2	equ	0xFDD
  1332                           fsr2h	equ	0xFDA
  1333                           fsr2l	equ	0xFD9
  1334                           status	equ	0xFD8
  1335                           
  1336 ;; *************** function ___llmod *****************
  1337 ;; Defined at:
  1338 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  dividend        4   13[COMRAM] unsigned long 
  1341 ;;  divisor         4   17[COMRAM] unsigned long 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;  counter         1   21[COMRAM] unsigned char 
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  4   13[COMRAM] unsigned long 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1353 ;;      Params:         8       0       0       0       0       0       0       0       0
  1354 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1355 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1356 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1357 ;;Total ram usage:        9 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_sprintf
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text3
  1367  0011AA                     __ptext3:
  1368                           	opt stack 0
  1369  0011AA                     ___llmod:
  1370                           	opt stack 28
  1371                           
  1372                           ;incstack = 0
  1373  0011AA  5012               	movf	___llmod@divisor,w,c
  1374  0011AC  1013               	iorwf	___llmod@divisor+1,w,c
  1375  0011AE  1014               	iorwf	___llmod@divisor+2,w,c
  1376  0011B0  1015               	iorwf	___llmod@divisor+3,w,c
  1377  0011B2  B4D8               	btfsc	status,2,c
  1378  0011B4  D024               	goto	l610
  1379  0011B6  0E01               	movlw	1
  1380  0011B8  6E16               	movwf	___llmod@counter,c
  1381  0011BA  D006               	goto	l1772
  1382  0011BC                     l1770:
  1383  0011BC  90D8               	bcf	status,0,c
  1384  0011BE  3612               	rlcf	___llmod@divisor,f,c
  1385  0011C0  3613               	rlcf	___llmod@divisor+1,f,c
  1386  0011C2  3614               	rlcf	___llmod@divisor+2,f,c
  1387  0011C4  3615               	rlcf	___llmod@divisor+3,f,c
  1388  0011C6  2A16               	incf	___llmod@counter,f,c
  1389  0011C8                     l1772:
  1390  0011C8  AE15               	btfss	___llmod@divisor+3,7,c
  1391  0011CA  D7F8               	goto	l1770
  1392  0011CC                     l1774:
  1393  0011CC  5012               	movf	___llmod@divisor,w,c
  1394  0011CE  5C0E               	subwf	___llmod@dividend,w,c
  1395  0011D0  5013               	movf	___llmod@divisor+1,w,c
  1396  0011D2  580F               	subwfb	___llmod@dividend+1,w,c
  1397  0011D4  5014               	movf	___llmod@divisor+2,w,c
  1398  0011D6  5810               	subwfb	___llmod@dividend+2,w,c
  1399  0011D8  5015               	movf	___llmod@divisor+3,w,c
  1400  0011DA  5811               	subwfb	___llmod@dividend+3,w,c
  1401  0011DC  A0D8               	btfss	status,0,c
  1402  0011DE  D008               	goto	l1778
  1403  0011E0  5012               	movf	___llmod@divisor,w,c
  1404  0011E2  5E0E               	subwf	___llmod@dividend,f,c
  1405  0011E4  5013               	movf	___llmod@divisor+1,w,c
  1406  0011E6  5A0F               	subwfb	___llmod@dividend+1,f,c
  1407  0011E8  5014               	movf	___llmod@divisor+2,w,c
  1408  0011EA  5A10               	subwfb	___llmod@dividend+2,f,c
  1409  0011EC  5015               	movf	___llmod@divisor+3,w,c
  1410  0011EE  5A11               	subwfb	___llmod@dividend+3,f,c
  1411  0011F0                     l1778:
  1412  0011F0  90D8               	bcf	status,0,c
  1413  0011F2  3215               	rrcf	___llmod@divisor+3,f,c
  1414  0011F4  3214               	rrcf	___llmod@divisor+2,f,c
  1415  0011F6  3213               	rrcf	___llmod@divisor+1,f,c
  1416  0011F8  3212               	rrcf	___llmod@divisor,f,c
  1417  0011FA  2E16               	decfsz	___llmod@counter,f,c
  1418  0011FC  D7E7               	goto	l1774
  1419  0011FE                     l610:
  1420  0011FE  C00E  F00E         	movff	___llmod@dividend,?___llmod
  1421  001202  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  1422  001206  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  1423  00120A  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  1424  00120E  0012               	return		;funcret
  1425  001210                     __end_of___llmod:
  1426                           	opt stack 0
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           prodh	equ	0xFF4
  1432                           prodl	equ	0xFF3
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           indf2	equ	0xFDF
  1436                           postinc2	equ	0xFDE
  1437                           postdec2	equ	0xFDD
  1438                           fsr2h	equ	0xFDA
  1439                           fsr2l	equ	0xFD9
  1440                           status	equ	0xFD8
  1441                           
  1442 ;; *************** function ___lldiv *****************
  1443 ;; Defined at:
  1444 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  dividend        4    0[COMRAM] unsigned long 
  1447 ;;  divisor         4    4[COMRAM] unsigned long 
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  quotient        4    8[COMRAM] unsigned long 
  1450 ;;  counter         1   12[COMRAM] unsigned char 
  1451 ;; Return value:  Size  Location     Type
  1452 ;;                  4    0[COMRAM] unsigned long 
  1453 ;; Registers used:
  1454 ;;		wreg, status,2, status,0
  1455 ;; Tracked objects:
  1456 ;;		On entry : 0/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1460 ;;      Params:         8       0       0       0       0       0       0       0       0
  1461 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1462 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1463 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1464 ;;Total ram usage:       13 bytes
  1465 ;; Hardware stack levels used:    1
  1466 ;; This function calls:
  1467 ;;		Nothing
  1468 ;; This function is called by:
  1469 ;;		_sprintf
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text4
  1474  0010AE                     __ptext4:
  1475                           	opt stack 0
  1476  0010AE                     ___lldiv:
  1477                           	opt stack 28
  1478                           
  1479                           ;incstack = 0
  1480  0010AE  0E00               	movlw	0
  1481  0010B0  6E09               	movwf	___lldiv@quotient,c
  1482  0010B2  0E00               	movlw	0
  1483  0010B4  6E0A               	movwf	___lldiv@quotient+1,c
  1484  0010B6  0E00               	movlw	0
  1485  0010B8  6E0B               	movwf	___lldiv@quotient+2,c
  1486  0010BA  0E00               	movlw	0
  1487  0010BC  6E0C               	movwf	___lldiv@quotient+3,c
  1488  0010BE  5005               	movf	___lldiv@divisor,w,c
  1489  0010C0  1006               	iorwf	___lldiv@divisor+1,w,c
  1490  0010C2  1007               	iorwf	___lldiv@divisor+2,w,c
  1491  0010C4  1008               	iorwf	___lldiv@divisor+3,w,c
  1492  0010C6  B4D8               	btfsc	status,2,c
  1493  0010C8  D02A               	goto	l600
  1494  0010CA  0E01               	movlw	1
  1495  0010CC  6E0D               	movwf	___lldiv@counter,c
  1496  0010CE  D006               	goto	l1752
  1497  0010D0                     l1750:
  1498  0010D0  90D8               	bcf	status,0,c
  1499  0010D2  3605               	rlcf	___lldiv@divisor,f,c
  1500  0010D4  3606               	rlcf	___lldiv@divisor+1,f,c
  1501  0010D6  3607               	rlcf	___lldiv@divisor+2,f,c
  1502  0010D8  3608               	rlcf	___lldiv@divisor+3,f,c
  1503  0010DA  2A0D               	incf	___lldiv@counter,f,c
  1504  0010DC                     l1752:
  1505  0010DC  AE08               	btfss	___lldiv@divisor+3,7,c
  1506  0010DE  D7F8               	goto	l1750
  1507  0010E0                     l1754:
  1508  0010E0  90D8               	bcf	status,0,c
  1509  0010E2  3609               	rlcf	___lldiv@quotient,f,c
  1510  0010E4  360A               	rlcf	___lldiv@quotient+1,f,c
  1511  0010E6  360B               	rlcf	___lldiv@quotient+2,f,c
  1512  0010E8  360C               	rlcf	___lldiv@quotient+3,f,c
  1513  0010EA  5005               	movf	___lldiv@divisor,w,c
  1514  0010EC  5C01               	subwf	___lldiv@dividend,w,c
  1515  0010EE  5006               	movf	___lldiv@divisor+1,w,c
  1516  0010F0  5802               	subwfb	___lldiv@dividend+1,w,c
  1517  0010F2  5007               	movf	___lldiv@divisor+2,w,c
  1518  0010F4  5803               	subwfb	___lldiv@dividend+2,w,c
  1519  0010F6  5008               	movf	___lldiv@divisor+3,w,c
  1520  0010F8  5804               	subwfb	___lldiv@dividend+3,w,c
  1521  0010FA  A0D8               	btfss	status,0,c
  1522  0010FC  D009               	goto	l1762
  1523  0010FE  5005               	movf	___lldiv@divisor,w,c
  1524  001100  5E01               	subwf	___lldiv@dividend,f,c
  1525  001102  5006               	movf	___lldiv@divisor+1,w,c
  1526  001104  5A02               	subwfb	___lldiv@dividend+1,f,c
  1527  001106  5007               	movf	___lldiv@divisor+2,w,c
  1528  001108  5A03               	subwfb	___lldiv@dividend+2,f,c
  1529  00110A  5008               	movf	___lldiv@divisor+3,w,c
  1530  00110C  5A04               	subwfb	___lldiv@dividend+3,f,c
  1531  00110E  8009               	bsf	___lldiv@quotient,0,c
  1532  001110                     l1762:
  1533  001110  90D8               	bcf	status,0,c
  1534  001112  3208               	rrcf	___lldiv@divisor+3,f,c
  1535  001114  3207               	rrcf	___lldiv@divisor+2,f,c
  1536  001116  3206               	rrcf	___lldiv@divisor+1,f,c
  1537  001118  3205               	rrcf	___lldiv@divisor,f,c
  1538  00111A  2E0D               	decfsz	___lldiv@counter,f,c
  1539  00111C  D7E1               	goto	l1754
  1540  00111E                     l600:
  1541  00111E  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1542  001122  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1543  001126  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1544  00112A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1545  00112E  0012               	return		;funcret
  1546  001130                     __end_of___lldiv:
  1547                           	opt stack 0
  1548                           tblptru	equ	0xFF8
  1549                           tblptrh	equ	0xFF7
  1550                           tblptrl	equ	0xFF6
  1551                           tablat	equ	0xFF5
  1552                           prodh	equ	0xFF4
  1553                           prodl	equ	0xFF3
  1554                           postinc0	equ	0xFEE
  1555                           wreg	equ	0xFE8
  1556                           indf2	equ	0xFDF
  1557                           postinc2	equ	0xFDE
  1558                           postdec2	equ	0xFDD
  1559                           fsr2h	equ	0xFDA
  1560                           fsr2l	equ	0xFD9
  1561                           status	equ	0xFD8
  1562                           
  1563 ;; *************** function _keyNumber *****************
  1564 ;; Defined at:
  1565 ;;		line 6 in file "funciones.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;		None
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  arreglo        20   18[COMRAM] unsigned char [20]
  1570 ;;  number          4   38[COMRAM] unsigned long 
  1571 ;;  i               2   45[COMRAM] unsigned int 
  1572 ;;  contador        2   42[COMRAM] unsigned int 
  1573 ;;  tecla           1   44[COMRAM] unsigned char 
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  4   14[COMRAM] unsigned long 
  1576 ;; Registers used:
  1577 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1583 ;;      Params:         4       0       0       0       0       0       0       0       0
  1584 ;;      Locals:        29       0       0       0       0       0       0       0       0
  1585 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1586 ;;      Totals:        33       0       0       0       0       0       0       0       0
  1587 ;;Total ram usage:       33 bytes
  1588 ;; Hardware stack levels used:    1
  1589 ;; Hardware stack levels required when called:    5
  1590 ;; This function calls:
  1591 ;;		_KP_Readbutton
  1592 ;;		_LCD_goto
  1593 ;;		_LCD_puts
  1594 ;;		_atoi
  1595 ;; This function is called by:
  1596 ;;		_riksFactors
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600                           	psect	text5
  1601  000F52                     __ptext5:
  1602                           	opt stack 0
  1603  000F52                     _keyNumber:
  1604                           	opt stack 24
  1605                           
  1606                           ;funciones.c: 7: unsigned char arreglo[20];
  1607                           ;funciones.c: 8: unsigned int contador =0,i=0;
  1608                           
  1609                           ;incstack = 0
  1610  000F52  0E00               	movlw	0
  1611  000F54  6E2C               	movwf	keyNumber@contador+1,c
  1612  000F56  0E00               	movlw	0
  1613  000F58  6E2B               	movwf	keyNumber@contador,c
  1614  000F5A  0E00               	movlw	0
  1615  000F5C  6E2F               	movwf	keyNumber@i+1,c
  1616  000F5E  0E00               	movlw	0
  1617  000F60  6E2E               	movwf	keyNumber@i,c
  1618  000F62                     l1784:
  1619  000F62  502F               	movf	keyNumber@i+1,w,c
  1620  000F64  E10F               	bnz	l1794
  1621  000F66  0E0A               	movlw	10
  1622  000F68  5C2E               	subwf	keyNumber@i,w,c
  1623  000F6A  B0D8               	btfsc	status,0,c
  1624  000F6C  D00B               	goto	l1794
  1625                           
  1626                           ;funciones.c: 11: arreglo[i]=0;
  1627  000F6E  0E13               	movlw	low keyNumber@arreglo
  1628  000F70  242E               	addwf	keyNumber@i,w,c
  1629  000F72  6ED9               	movwf	fsr2l,c
  1630  000F74  0E00               	movlw	high keyNumber@arreglo
  1631  000F76  202F               	addwfc	keyNumber@i+1,w,c
  1632  000F78  6EDA               	movwf	fsr2h,c
  1633  000F7A  0E00               	movlw	0
  1634  000F7C  6EDF               	movwf	indf2,c
  1635  000F7E  4A2E               	infsnz	keyNumber@i,f,c
  1636  000F80  2A2F               	incf	keyNumber@i+1,f,c
  1637  000F82  D7EF               	goto	l1784
  1638  000F84                     l1794:
  1639                           
  1640                           ;funciones.c: 15: tecla = KP_Readbutton();
  1641  000F84  EC28  F006         	call	_KP_Readbutton	;wreg free
  1642  000F88  6E2D               	movwf	keyNumber@tecla,c
  1643                           
  1644                           ;funciones.c: 17: if (tecla != '+'){
  1645  000F8A  0E2B               	movlw	43
  1646  000F8C  182D               	xorwf	keyNumber@tecla,w,c
  1647  000F8E  B4D8               	btfsc	status,2,c
  1648  000F90  D019               	goto	l1806
  1649                           
  1650                           ;funciones.c: 18: arreglo[contador]= tecla;
  1651  000F92  0E13               	movlw	low keyNumber@arreglo
  1652  000F94  242B               	addwf	keyNumber@contador,w,c
  1653  000F96  6ED9               	movwf	fsr2l,c
  1654  000F98  0E00               	movlw	high keyNumber@arreglo
  1655  000F9A  202C               	addwfc	keyNumber@contador+1,w,c
  1656  000F9C  6EDA               	movwf	fsr2h,c
  1657  000F9E  C02D  FFDF         	movff	keyNumber@tecla,indf2
  1658                           
  1659                           ;funciones.c: 19: LCD_goto(LCD_01_ADDRESS,2,1);
  1660  000FA2  0E02               	movlw	2
  1661  000FA4  6E0C               	movwf	LCD_goto@row,c
  1662  000FA6  0E01               	movlw	1
  1663  000FA8  6E0D               	movwf	LCD_goto@column,c
  1664  000FAA  5037               	movf	_LCD_01_ADDRESS,w,c
  1665  000FAC  EC98  F008         	call	_LCD_goto
  1666                           
  1667                           ;funciones.c: 20: LCD_puts(LCD_01_ADDRESS, arreglo);
  1668  000FB0  0E13               	movlw	low keyNumber@arreglo
  1669  000FB2  6E0A               	movwf	LCD_puts@s,c
  1670  000FB4  0E00               	movlw	high keyNumber@arreglo
  1671  000FB6  6E0B               	movwf	LCD_puts@s+1,c
  1672  000FB8  5037               	movf	_LCD_01_ADDRESS,w,c
  1673  000FBA  EC08  F009         	call	_LCD_puts
  1674                           
  1675                           ;funciones.c: 21: contador++;
  1676  000FBE  4A2B               	infsnz	keyNumber@contador,f,c
  1677  000FC0  2A2C               	incf	keyNumber@contador+1,f,c
  1678                           
  1679                           ;funciones.c: 23: }
  1680  000FC2  D7E0               	goto	l1794
  1681  000FC4                     l1806:
  1682                           
  1683                           ;funciones.c: 24: else
  1684                           ;funciones.c: 25: {
  1685                           ;funciones.c: 26: LCD_goto(LCD_01_ADDRESS,2,1);
  1686  000FC4  0E02               	movlw	2
  1687  000FC6  6E0C               	movwf	LCD_goto@row,c
  1688  000FC8  0E01               	movlw	1
  1689  000FCA  6E0D               	movwf	LCD_goto@column,c
  1690  000FCC  5037               	movf	_LCD_01_ADDRESS,w,c
  1691  000FCE  EC98  F008         	call	_LCD_goto
  1692                           
  1693                           ;funciones.c: 27: LCD_puts(LCD_01_ADDRESS, arreglo);
  1694  000FD2  0E13               	movlw	low keyNumber@arreglo
  1695  000FD4  6E0A               	movwf	LCD_puts@s,c
  1696  000FD6  0E00               	movlw	high keyNumber@arreglo
  1697  000FD8  6E0B               	movwf	LCD_puts@s+1,c
  1698  000FDA  5037               	movf	_LCD_01_ADDRESS,w,c
  1699  000FDC  EC08  F009         	call	_LCD_puts
  1700                           
  1701                           ;funciones.c: 29: }
  1702                           ;funciones.c: 33: }
  1703                           ;funciones.c: 35: number = (unsigned long int)atoi(arreglo);
  1704                           
  1705                           ;funciones.c: 28: break;
  1706  000FE0  0E13               	movlw	low keyNumber@arreglo
  1707  000FE2  6E07               	movwf	atoi@s,c
  1708  000FE4  0E00               	movlw	high keyNumber@arreglo
  1709  000FE6  6E08               	movwf	atoi@s+1,c
  1710  000FE8  EC42  F007         	call	_atoi	;wreg free
  1711  000FEC  C007  F027         	movff	?_atoi,keyNumber@number
  1712  000FF0  C008  F028         	movff	?_atoi+1,keyNumber@number+1
  1713  000FF4  0E00               	movlw	0
  1714  000FF6  BE28               	btfsc	keyNumber@number+1,7,c
  1715  000FF8  0EFF               	movlw	-1
  1716  000FFA  6E29               	movwf	keyNumber@number+2,c
  1717  000FFC  6E2A               	movwf	keyNumber@number+3,c
  1718                           
  1719                           ;funciones.c: 36: return number;
  1720  000FFE  C027  F00F         	movff	keyNumber@number,?_keyNumber
  1721  001002  C028  F010         	movff	keyNumber@number+1,?_keyNumber+1
  1722  001006  C029  F011         	movff	keyNumber@number+2,?_keyNumber+2
  1723  00100A  C02A  F012         	movff	keyNumber@number+3,?_keyNumber+3
  1724  00100E  0012               	return	
  1725  001010                     __end_of_keyNumber:
  1726                           	opt stack 0
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           prodh	equ	0xFF4
  1732                           prodl	equ	0xFF3
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           indf2	equ	0xFDF
  1736                           postinc2	equ	0xFDE
  1737                           postdec2	equ	0xFDD
  1738                           fsr2h	equ	0xFDA
  1739                           fsr2l	equ	0xFD9
  1740                           status	equ	0xFD8
  1741                           
  1742 ;; *************** function _atoi *****************
  1743 ;; Defined at:
  1744 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  1745 ;; Parameters:    Size  Location     Type
  1746 ;;  s               2    6[COMRAM] PTR const unsigned char 
  1747 ;;		 -> keyNumber@arreglo(20), 
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;  a               2   11[COMRAM] int 
  1750 ;;  sign            1   10[COMRAM] unsigned char 
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  2    6[COMRAM] int 
  1753 ;; Registers used:
  1754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1760 ;;      Params:         2       0       0       0       0       0       0       0       0
  1761 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1762 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1763 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1764 ;;Total ram usage:        7 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:    1
  1767 ;; This function calls:
  1768 ;;		___wmul
  1769 ;;		_isdigit
  1770 ;; This function is called by:
  1771 ;;		_keyNumber
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text6
  1776  000E84                     __ptext6:
  1777                           	opt stack 0
  1778  000E84                     _atoi:
  1779                           	opt stack 27
  1780                           
  1781                           ;incstack = 0
  1782  000E84  D002               	goto	l1720
  1783  000E86                     l1718:
  1784  000E86  4A07               	infsnz	atoi@s,f,c
  1785  000E88  2A08               	incf	atoi@s+1,f,c
  1786  000E8A                     l1720:
  1787  000E8A  C007  FFD9         	movff	atoi@s,fsr2l
  1788  000E8E  C008  FFDA         	movff	atoi@s+1,fsr2h
  1789  000E92  0E20               	movlw	32
  1790  000E94  18DE               	xorwf	postinc2,w,c
  1791  000E96  B4D8               	btfsc	status,2,c
  1792  000E98  D7F6               	goto	l1718
  1793  000E9A  C007  FFD9         	movff	atoi@s,fsr2l
  1794  000E9E  C008  FFDA         	movff	atoi@s+1,fsr2h
  1795  000EA2  0E09               	movlw	9
  1796  000EA4  18DE               	xorwf	postinc2,w,c
  1797  000EA6  B4D8               	btfsc	status,2,c
  1798  000EA8  D7EE               	goto	l1718
  1799  000EAA  0E00               	movlw	0
  1800  000EAC  6E0D               	movwf	atoi@a+1,c
  1801  000EAE  0E00               	movlw	0
  1802  000EB0  6E0C               	movwf	atoi@a,c
  1803  000EB2  0E00               	movlw	0
  1804  000EB4  6E0B               	movwf	atoi@sign,c
  1805  000EB6  C007  FFD9         	movff	atoi@s,fsr2l
  1806  000EBA  C008  FFDA         	movff	atoi@s+1,fsr2h
  1807  000EBE  0E2D               	movlw	45
  1808  000EC0  18DE               	xorwf	postinc2,w,c
  1809  000EC2  A4D8               	btfss	status,2,c
  1810  000EC4  D002               	goto	l1730
  1811  000EC6  2A0B               	incf	atoi@sign,f,c
  1812  000EC8  D024               	goto	l1736
  1813  000ECA                     l1730:
  1814  000ECA  C007  FFD9         	movff	atoi@s,fsr2l
  1815  000ECE  C008  FFDA         	movff	atoi@s+1,fsr2h
  1816  000ED2  0E2B               	movlw	43
  1817  000ED4  18DE               	xorwf	postinc2,w,c
  1818  000ED6  A4D8               	btfss	status,2,c
  1819  000ED8  D01E               	goto	l1738
  1820  000EDA  D01B               	goto	l1736
  1821  000EDC                     l1734:
  1822  000EDC  C00C  F001         	movff	atoi@a,___wmul@multiplier
  1823  000EE0  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  1824  000EE4  0E00               	movlw	0
  1825  000EE6  6E04               	movwf	___wmul@multiplicand+1,c
  1826  000EE8  0E0A               	movlw	10
  1827  000EEA  6E03               	movwf	___wmul@multiplicand,c
  1828  000EEC  ECE6  F009         	call	___wmul	;wreg free
  1829  000EF0  C007  FFD9         	movff	atoi@s,fsr2l
  1830  000EF4  C008  FFDA         	movff	atoi@s+1,fsr2h
  1831  000EF8  50DF               	movf	indf2,w,c
  1832  000EFA  6E09               	movwf	??_atoi& (0+255),c
  1833  000EFC  6A0A               	clrf	(??_atoi+1)& (0+255),c
  1834  000EFE  5001               	movf	?___wmul,w,c
  1835  000F00  2609               	addwf	??_atoi,f,c
  1836  000F02  5002               	movf	?___wmul+1,w,c
  1837  000F04  220A               	addwfc	??_atoi+1,f,c
  1838  000F06  0ED0               	movlw	208
  1839  000F08  2409               	addwf	??_atoi,w,c
  1840  000F0A  6E0C               	movwf	atoi@a,c
  1841  000F0C  0EFF               	movlw	255
  1842  000F0E  200A               	addwfc	??_atoi+1,w,c
  1843  000F10  6E0D               	movwf	atoi@a+1,c
  1844  000F12                     l1736:
  1845  000F12  4A07               	infsnz	atoi@s,f,c
  1846  000F14  2A08               	incf	atoi@s+1,f,c
  1847  000F16                     l1738:
  1848  000F16  C007  FFD9         	movff	atoi@s,fsr2l
  1849  000F1A  C008  FFDA         	movff	atoi@s+1,fsr2h
  1850  000F1E  50DF               	movf	indf2,w,c
  1851  000F20  EC09  F00A         	call	_isdigit
  1852  000F24  B0D8               	btfsc	status,0,c
  1853  000F26  D7DA               	goto	l1734
  1854  000F28  500B               	movf	atoi@sign,w,c
  1855  000F2A  B4D8               	btfsc	status,2,c
  1856  000F2C  D00D               	goto	l403
  1857  000F2E  C00C  F009         	movff	atoi@a,??_atoi
  1858  000F32  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  1859  000F36  1E09               	comf	??_atoi,f,c
  1860  000F38  1E0A               	comf	??_atoi+1,f,c
  1861  000F3A  4A09               	infsnz	??_atoi,f,c
  1862  000F3C  2A0A               	incf	??_atoi+1,f,c
  1863  000F3E  C009  F007         	movff	??_atoi,?_atoi
  1864  000F42  C00A  F008         	movff	??_atoi+1,?_atoi+1
  1865  000F46  0012               	return	
  1866  000F48                     l403:
  1867  000F48  C00C  F007         	movff	atoi@a,?_atoi
  1868  000F4C  C00D  F008         	movff	atoi@a+1,?_atoi+1
  1869  000F50  0012               	return		;funcret
  1870  000F52                     __end_of_atoi:
  1871                           	opt stack 0
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           prodh	equ	0xFF4
  1877                           prodl	equ	0xFF3
  1878                           postinc0	equ	0xFEE
  1879                           wreg	equ	0xFE8
  1880                           indf2	equ	0xFDF
  1881                           postinc2	equ	0xFDE
  1882                           postdec2	equ	0xFDD
  1883                           fsr2h	equ	0xFDA
  1884                           fsr2l	equ	0xFD9
  1885                           status	equ	0xFD8
  1886                           
  1887 ;; *************** function _isdigit *****************
  1888 ;; Defined at:
  1889 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;  c               1    wreg     unsigned char 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  c               1    2[COMRAM] unsigned char 
  1894 ;; Return value:  Size  Location     Type
  1895 ;;		None               void
  1896 ;; Registers used:
  1897 ;;		wreg, status,2, status,0
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1903 ;;      Params:         0       0       0       0       0       0       0       0       0
  1904 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1905 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1906 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1907 ;;Total ram usage:        3 bytes
  1908 ;; Hardware stack levels used:    1
  1909 ;; This function calls:
  1910 ;;		Nothing
  1911 ;; This function is called by:
  1912 ;;		_atoi
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text7
  1917  001412                     __ptext7:
  1918                           	opt stack 0
  1919  001412                     _isdigit:
  1920                           	opt stack 27
  1921                           
  1922                           ;incstack = 0
  1923                           ;isdigit@c stored from wreg
  1924  001412  6E03               	movwf	isdigit@c,c
  1925  001414  0E00               	movlw	0
  1926  001416  6E02               	movwf	_isdigit$828,c
  1927  001418  0E3A               	movlw	58
  1928  00141A  6003               	cpfslt	isdigit@c,c
  1929  00141C  D005               	goto	l1584
  1930  00141E  0E2F               	movlw	47
  1931  001420  6403               	cpfsgt	isdigit@c,c
  1932  001422  D002               	goto	l1584
  1933  001424  0E01               	movlw	1
  1934  001426  6E02               	movwf	_isdigit$828,c
  1935  001428                     l1584:
  1936  001428  C002  F001         	movff	_isdigit$828,??_isdigit
  1937  00142C  3001               	rrcf	??_isdigit,w,c
  1938  00142E  0012               	return	
  1939  001430                     __end_of_isdigit:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           tblptrh	equ	0xFF7
  1943                           tblptrl	equ	0xFF6
  1944                           tablat	equ	0xFF5
  1945                           prodh	equ	0xFF4
  1946                           prodl	equ	0xFF3
  1947                           postinc0	equ	0xFEE
  1948                           wreg	equ	0xFE8
  1949                           indf2	equ	0xFDF
  1950                           postinc2	equ	0xFDE
  1951                           postdec2	equ	0xFDD
  1952                           fsr2h	equ	0xFDA
  1953                           fsr2l	equ	0xFD9
  1954                           status	equ	0xFD8
  1955                           
  1956 ;; *************** function ___wmul *****************
  1957 ;; Defined at:
  1958 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;  multiplier      2    0[COMRAM] unsigned int 
  1961 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  product         2    4[COMRAM] unsigned int 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  2    0[COMRAM] unsigned int 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, prodl, prodh
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1973 ;;      Params:         4       0       0       0       0       0       0       0       0
  1974 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1976 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1977 ;;Total ram usage:        6 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; This function calls:
  1980 ;;		Nothing
  1981 ;; This function is called by:
  1982 ;;		_atoi
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text8
  1987  0013CC                     __ptext8:
  1988                           	opt stack 0
  1989  0013CC                     ___wmul:
  1990                           	opt stack 27
  1991                           
  1992                           ;incstack = 0
  1993  0013CC  5001               	movf	___wmul@multiplier,w,c
  1994  0013CE  0203               	mulwf	___wmul@multiplicand,c
  1995  0013D0  CFF3 F005          	movff	prodl,___wmul@product
  1996  0013D4  CFF4 F006          	movff	prodh,___wmul@product+1
  1997  0013D8  5001               	movf	___wmul@multiplier,w,c
  1998  0013DA  0204               	mulwf	___wmul@multiplicand+1,c
  1999  0013DC  50F3               	movf	prodl,w,c
  2000  0013DE  2606               	addwf	___wmul@product+1,f,c
  2001  0013E0  5002               	movf	___wmul@multiplier+1,w,c
  2002  0013E2  0203               	mulwf	___wmul@multiplicand,c
  2003  0013E4  50F3               	movf	prodl,w,c
  2004  0013E6  2606               	addwf	___wmul@product+1,f,c
  2005  0013E8  C005  F001         	movff	___wmul@product,?___wmul
  2006  0013EC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2007  0013F0  0012               	return	
  2008  0013F2                     __end_of___wmul:
  2009                           	opt stack 0
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           prodh	equ	0xFF4
  2015                           prodl	equ	0xFF3
  2016                           postinc0	equ	0xFEE
  2017                           wreg	equ	0xFE8
  2018                           indf2	equ	0xFDF
  2019                           postinc2	equ	0xFDE
  2020                           postdec2	equ	0xFDD
  2021                           fsr2h	equ	0xFDA
  2022                           fsr2l	equ	0xFD9
  2023                           status	equ	0xFD8
  2024                           
  2025 ;; *************** function _LCD_puts *****************
  2026 ;; Defined at:
  2027 ;;		line 93 in file "i2c_lcd.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;  addr            1    wreg     unsigned char 
  2030 ;;  s               2    9[COMRAM] PTR unsigned char 
  2031 ;;		 -> riksFactors@text(80), STR_9(25), STR_8(20), STR_7(25), 
  2032 ;;		 -> STR_6(25), STR_5(18), STR_4(25), STR_3(12), 
  2033 ;;		 -> STR_2(25), STR_1(25), keyNumber@arreglo(20), 
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;  addr            1   13[COMRAM] unsigned char 
  2036 ;;  i               2   11[COMRAM] int 
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  1    wreg      void 
  2039 ;; Registers used:
  2040 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2046 ;;      Params:         2       0       0       0       0       0       0       0       0
  2047 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2048 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2049 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2050 ;;Total ram usage:        5 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:    4
  2053 ;; This function calls:
  2054 ;;		_LCD_putch
  2055 ;; This function is called by:
  2056 ;;		_keyNumber
  2057 ;;		_riksFactors
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text9
  2062  001210                     __ptext9:
  2063                           	opt stack 0
  2064  001210                     _LCD_puts:
  2065                           	opt stack 24
  2066                           
  2067                           ;incstack = 0
  2068                           ;LCD_puts@addr stored from wreg
  2069  001210  6E0E               	movwf	LCD_puts@addr,c
  2070                           
  2071                           ;i2c_lcd.c: 95: int i=0;
  2072  001212  0E00               	movlw	0
  2073  001214  6E0D               	movwf	LCD_puts@i+1,c
  2074  001216  0E00               	movlw	0
  2075  001218  6E0C               	movwf	LCD_puts@i,c
  2076                           
  2077                           ;i2c_lcd.c: 96: while(*s != 0) LCD_putch(addr, *s++);
  2078  00121A  D016               	goto	l1714
  2079  00121C                     l1710:
  2080  00121C  C00A  FFF6         	movff	LCD_puts@s,tblptrl
  2081  001220  C00B  FFF7         	movff	LCD_puts@s+1,tblptrh
  2082  001224  6AF8               	clrf	tblptru,c
  2083  001226  0E07               	movlw	(high __ramtop+-1)
  2084  001228  64F7               	cpfsgt	tblptrh,c
  2085  00122A  D003               	bra	u1197
  2086  00122C  0008               	tblrd		*
  2087  00122E  50F5               	movf	tablat,w,c
  2088  001230  D005               	bra	u1190
  2089  001232                     u1197:
  2090  001232  CFF6 FFE9          	movff	tblptrl,fsr0l
  2091  001236  CFF7 FFEA          	movff	tblptrh,fsr0h
  2092  00123A  50EF               	movf	indf0,w,c
  2093  00123C                     u1190:
  2094  00123C  6E07               	movwf	LCD_putch@data,c
  2095  00123E  500E               	movf	LCD_puts@addr,w,c
  2096  001240  EC95  F009         	call	_LCD_putch
  2097  001244  4A0A               	infsnz	LCD_puts@s,f,c
  2098  001246  2A0B               	incf	LCD_puts@s+1,f,c
  2099  001248                     l1714:
  2100  001248  C00A  FFF6         	movff	LCD_puts@s,tblptrl
  2101  00124C  C00B  FFF7         	movff	LCD_puts@s+1,tblptrh
  2102  001250  6AF8               	clrf	tblptru,c
  2103  001252  0E07               	movlw	(high __ramtop+-1)
  2104  001254  64F7               	cpfsgt	tblptrh,c
  2105  001256  D003               	bra	u1207
  2106  001258  0008               	tblrd		*
  2107  00125A  50F5               	movf	tablat,w,c
  2108  00125C  D005               	bra	u1200
  2109  00125E                     u1207:
  2110  00125E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2111  001262  CFF7 FFEA          	movff	tblptrh,fsr0h
  2112  001266  50EF               	movf	indf0,w,c
  2113  001268                     u1200:
  2114  001268  0900               	iorlw	0
  2115  00126A  B4D8               	btfsc	status,2,c
  2116  00126C  0012               	return	
  2117  00126E  D7D6               	goto	l1710
  2118  001270                     __end_of_LCD_puts:
  2119                           	opt stack 0
  2120                           tblptru	equ	0xFF8
  2121                           tblptrh	equ	0xFF7
  2122                           tblptrl	equ	0xFF6
  2123                           tablat	equ	0xFF5
  2124                           prodh	equ	0xFF4
  2125                           prodl	equ	0xFF3
  2126                           indf0	equ	0xFEF
  2127                           postinc0	equ	0xFEE
  2128                           fsr0h	equ	0xFEA
  2129                           fsr0l	equ	0xFE9
  2130                           wreg	equ	0xFE8
  2131                           indf2	equ	0xFDF
  2132                           postinc2	equ	0xFDE
  2133                           postdec2	equ	0xFDD
  2134                           fsr2h	equ	0xFDA
  2135                           fsr2l	equ	0xFD9
  2136                           status	equ	0xFD8
  2137                           
  2138 ;; *************** function _LCD_putch *****************
  2139 ;; Defined at:
  2140 ;;		line 50 in file "i2c_lcd.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;  addr            1    wreg     unsigned char 
  2143 ;;  data            1    6[COMRAM] unsigned char 
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  addr            1    7[COMRAM] unsigned char 
  2146 ;;  lcddata         1    8[COMRAM] unsigned char 
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, status,2, status,0, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2156 ;;      Params:         1       0       0       0       0       0       0       0       0
  2157 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2158 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2159 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2160 ;;Total ram usage:        3 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; Hardware stack levels required when called:    3
  2163 ;; This function calls:
  2164 ;;		_I2C_PCF8574_Write
  2165 ;; This function is called by:
  2166 ;;		_LCD_puts
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           	psect	text10
  2171  00132A                     __ptext10:
  2172                           	opt stack 0
  2173  00132A                     _LCD_putch:
  2174                           	opt stack 24
  2175                           
  2176                           ;incstack = 0
  2177                           ;LCD_putch@addr stored from wreg
  2178  00132A  6E08               	movwf	LCD_putch@addr,c
  2179                           
  2180                           ;i2c_lcd.c: 52: unsigned char lcddata;
  2181                           ;i2c_lcd.c: 53: lcddata = (data & 0xF0)|0x08|0x01;
  2182  00132C  5007               	movf	LCD_putch@data,w,c
  2183  00132E  0BF0               	andlw	240
  2184  001330  0909               	iorlw	9
  2185  001332  6E09               	movwf	LCD_putch@lcddata,c
  2186                           
  2187                           ;i2c_lcd.c: 54: I2C_PCF8574_Write(addr,lcddata | 0x04);
  2188  001334  5009               	movf	LCD_putch@lcddata,w,c
  2189  001336  0904               	iorlw	4
  2190  001338  6E03               	movwf	I2C_PCF8574_Write@value,c
  2191  00133A  5008               	movf	LCD_putch@addr,w,c
  2192  00133C  ECF9  F009         	call	_I2C_PCF8574_Write
  2193                           
  2194                           ;i2c_lcd.c: 55: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  2195  001340  5009               	movf	LCD_putch@lcddata,w,c
  2196  001342  0BFB               	andlw	251
  2197  001344  6E03               	movwf	I2C_PCF8574_Write@value,c
  2198  001346  5008               	movf	LCD_putch@addr,w,c
  2199  001348  ECF9  F009         	call	_I2C_PCF8574_Write
  2200                           
  2201                           ;i2c_lcd.c: 56: lcddata = ((data << 4) & 0xF0)|0x08|0x01;
  2202  00134C  3807               	swapf	LCD_putch@data,w,c
  2203  00134E  0BF0               	andlw	240
  2204  001350  0BF0               	andlw	240
  2205  001352  0909               	iorlw	9
  2206  001354  6E09               	movwf	LCD_putch@lcddata,c
  2207                           
  2208                           ;i2c_lcd.c: 57: I2C_PCF8574_Write(addr,lcddata | 0x04);
  2209  001356  5009               	movf	LCD_putch@lcddata,w,c
  2210  001358  0904               	iorlw	4
  2211  00135A  6E03               	movwf	I2C_PCF8574_Write@value,c
  2212  00135C  5008               	movf	LCD_putch@addr,w,c
  2213  00135E  ECF9  F009         	call	_I2C_PCF8574_Write
  2214                           
  2215                           ;i2c_lcd.c: 58: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  2216  001362  5009               	movf	LCD_putch@lcddata,w,c
  2217  001364  0BFB               	andlw	251
  2218  001366  6E03               	movwf	I2C_PCF8574_Write@value,c
  2219  001368  5008               	movf	LCD_putch@addr,w,c
  2220  00136A  ECF9  F009         	call	_I2C_PCF8574_Write
  2221  00136E  0012               	return		;funcret
  2222  001370                     __end_of_LCD_putch:
  2223                           	opt stack 0
  2224                           tblptru	equ	0xFF8
  2225                           tblptrh	equ	0xFF7
  2226                           tblptrl	equ	0xFF6
  2227                           tablat	equ	0xFF5
  2228                           prodh	equ	0xFF4
  2229                           prodl	equ	0xFF3
  2230                           indf0	equ	0xFEF
  2231                           postinc0	equ	0xFEE
  2232                           fsr0h	equ	0xFEA
  2233                           fsr0l	equ	0xFE9
  2234                           wreg	equ	0xFE8
  2235                           indf2	equ	0xFDF
  2236                           postinc2	equ	0xFDE
  2237                           postdec2	equ	0xFDD
  2238                           fsr2h	equ	0xFDA
  2239                           fsr2l	equ	0xFD9
  2240                           status	equ	0xFD8
  2241                           
  2242 ;; *************** function _LCD_goto *****************
  2243 ;; Defined at:
  2244 ;;		line 80 in file "i2c_lcd.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;  addr            1    wreg     unsigned char 
  2247 ;;  row             1   11[COMRAM] unsigned char 
  2248 ;;  column          1   12[COMRAM] unsigned char 
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;  addr            1   13[COMRAM] unsigned char 
  2251 ;; Return value:  Size  Location     Type
  2252 ;;                  1    wreg      void 
  2253 ;; Registers used:
  2254 ;;		wreg, status,2, status,0, cstack
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2260 ;;      Params:         2       0       0       0       0       0       0       0       0
  2261 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2262 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2263 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2264 ;;Total ram usage:        3 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:    4
  2267 ;; This function calls:
  2268 ;;		_LCD_putcmd
  2269 ;; This function is called by:
  2270 ;;		_keyNumber
  2271 ;;		_riksFactors
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text11
  2276  001130                     __ptext11:
  2277                           	opt stack 0
  2278  001130                     _LCD_goto:
  2279                           	opt stack 24
  2280                           
  2281                           ;incstack = 0
  2282                           ;LCD_goto@addr stored from wreg
  2283  001130  6E0E               	movwf	LCD_goto@addr,c
  2284                           
  2285                           ;i2c_lcd.c: 81: switch(row){
  2286  001132  D02D               	goto	l1706
  2287  001134                     l1694:
  2288  001134  500D               	movf	LCD_goto@column,w,c
  2289  001136  0F7F               	addlw	127
  2290  001138  6E07               	movwf	LCD_putcmd@data,c
  2291  00113A  0E01               	movlw	1
  2292  00113C  6E08               	movwf	LCD_putcmd@cmdtype,c
  2293  00113E  500E               	movf	LCD_goto@addr,w,c
  2294  001140  EC67  F009         	call	_LCD_putcmd
  2295  001144  0012               	return	
  2296  001146                     l1696:
  2297  001146  500D               	movf	LCD_goto@column,w,c
  2298  001148  0FBF               	addlw	191
  2299  00114A  6E07               	movwf	LCD_putcmd@data,c
  2300  00114C  0E01               	movlw	1
  2301  00114E  6E08               	movwf	LCD_putcmd@cmdtype,c
  2302  001150  500E               	movf	LCD_goto@addr,w,c
  2303  001152  EC67  F009         	call	_LCD_putcmd
  2304  001156  0012               	return	
  2305  001158                     l1698:
  2306  001158  500D               	movf	LCD_goto@column,w,c
  2307  00115A  0F93               	addlw	147
  2308  00115C  6E07               	movwf	LCD_putcmd@data,c
  2309  00115E  0E01               	movlw	1
  2310  001160  6E08               	movwf	LCD_putcmd@cmdtype,c
  2311  001162  500E               	movf	LCD_goto@addr,w,c
  2312  001164  EC67  F009         	call	_LCD_putcmd
  2313  001168  0012               	return	
  2314  00116A                     l1700:
  2315  00116A  500D               	movf	LCD_goto@column,w,c
  2316  00116C  0FD3               	addlw	211
  2317  00116E  6E07               	movwf	LCD_putcmd@data,c
  2318  001170  0E01               	movlw	1
  2319  001172  6E08               	movwf	LCD_putcmd@cmdtype,c
  2320  001174  500E               	movf	LCD_goto@addr,w,c
  2321  001176  EC67  F009         	call	_LCD_putcmd
  2322  00117A  0012               	return	
  2323  00117C                     l1702:
  2324  00117C  500D               	movf	LCD_goto@column,w,c
  2325  00117E  0F7F               	addlw	127
  2326  001180  6E07               	movwf	LCD_putcmd@data,c
  2327  001182  0E01               	movlw	1
  2328  001184  6E08               	movwf	LCD_putcmd@cmdtype,c
  2329  001186  500E               	movf	LCD_goto@addr,w,c
  2330  001188  EC67  F009         	call	_LCD_putcmd
  2331                           
  2332                           ;i2c_lcd.c: 87: }
  2333  00118C  0012               	return	
  2334  00118E                     l1706:
  2335  00118E  500C               	movf	LCD_goto@row,w,c
  2336                           
  2337                           ; Switch size 1, requested type "space"
  2338                           ; Number of cases is 4, Range of values is 1 to 4
  2339                           ; switch strategies available:
  2340                           ; Name         Instructions Cycles
  2341                           ; simple_byte           13     7 (average)
  2342                           ;	Chosen strategy is simple_byte
  2343  001190  0A01               	xorlw	1	; case 1
  2344  001192  B4D8               	btfsc	status,2,c
  2345  001194  D7CF               	goto	l1694
  2346  001196  0A03               	xorlw	3	; case 2
  2347  001198  B4D8               	btfsc	status,2,c
  2348  00119A  D7D5               	goto	l1696
  2349  00119C  0A01               	xorlw	1	; case 3
  2350  00119E  B4D8               	btfsc	status,2,c
  2351  0011A0  D7DB               	goto	l1698
  2352  0011A2  0A07               	xorlw	7	; case 4
  2353  0011A4  B4D8               	btfsc	status,2,c
  2354  0011A6  D7E1               	goto	l1700
  2355  0011A8  D7E9               	goto	l1702
  2356  0011AA                     __end_of_LCD_goto:
  2357                           	opt stack 0
  2358                           tblptru	equ	0xFF8
  2359                           tblptrh	equ	0xFF7
  2360                           tblptrl	equ	0xFF6
  2361                           tablat	equ	0xFF5
  2362                           prodh	equ	0xFF4
  2363                           prodl	equ	0xFF3
  2364                           indf0	equ	0xFEF
  2365                           postinc0	equ	0xFEE
  2366                           fsr0h	equ	0xFEA
  2367                           fsr0l	equ	0xFE9
  2368                           wreg	equ	0xFE8
  2369                           indf2	equ	0xFDF
  2370                           postinc2	equ	0xFDE
  2371                           postdec2	equ	0xFDD
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function _KP_Readbutton *****************
  2377 ;; Defined at:
  2378 ;;		line 30 in file "KeyPad Library.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;		None
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  key             1    8[COMRAM] unsigned char 
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      unsigned char 
  2385 ;; Registers used:
  2386 ;;		wreg, status,2, status,0, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2392 ;;      Params:         0       0       0       0       0       0       0       0       0
  2393 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2394 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2395 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2396 ;;Total ram usage:        1 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    1
  2399 ;; This function calls:
  2400 ;;		_KP_scan
  2401 ;; This function is called by:
  2402 ;;		_keyNumber
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text12
  2407  000C50                     __ptext12:
  2408                           	opt stack 0
  2409  000C50                     _KP_Readbutton:
  2410                           	opt stack 27
  2411                           
  2412                           ;KeyPad Library.c: 32: char key = ',';
  2413                           
  2414                           ;incstack = 0
  2415  000C50  0E2C               	movlw	44
  2416  000C52  6E09               	movwf	KP_Readbutton@key,c
  2417                           
  2418                           ;KeyPad Library.c: 33: while(!((key = KP_scan()) == ','))
  2419  000C54  D08F               	goto	l1686
  2420  000C56                     l1590:
  2421                           
  2422                           ;KeyPad Library.c: 34: {
  2423                           ;KeyPad Library.c: 35: if(keynum == 1) { return key = '7'; }
  2424  000C56  0435               	decf	_keynum,w,c
  2425  000C58  1036               	iorwf	_keynum+1,w,c
  2426  000C5A  A4D8               	btfss	status,2,c
  2427  000C5C  D004               	goto	l1596
  2428  000C5E  0E37               	movlw	55
  2429  000C60  6E09               	movwf	KP_Readbutton@key,c
  2430  000C62  5009               	movf	KP_Readbutton@key,w,c
  2431  000C64  0012               	return	
  2432  000C66                     l1596:
  2433                           
  2434                           ;KeyPad Library.c: 36: if(keynum == 2) { return key = '8'; }
  2435  000C66  0E02               	movlw	2
  2436  000C68  1835               	xorwf	_keynum,w,c
  2437  000C6A  1036               	iorwf	_keynum+1,w,c
  2438  000C6C  A4D8               	btfss	status,2,c
  2439  000C6E  D004               	goto	l1602
  2440  000C70  0E38               	movlw	56
  2441  000C72  6E09               	movwf	KP_Readbutton@key,c
  2442  000C74  5009               	movf	KP_Readbutton@key,w,c
  2443  000C76  0012               	return	
  2444  000C78                     l1602:
  2445                           
  2446                           ;KeyPad Library.c: 37: if(keynum == 3) { return key = '9'; }
  2447  000C78  0E03               	movlw	3
  2448  000C7A  1835               	xorwf	_keynum,w,c
  2449  000C7C  1036               	iorwf	_keynum+1,w,c
  2450  000C7E  A4D8               	btfss	status,2,c
  2451  000C80  D004               	goto	l1608
  2452  000C82  0E39               	movlw	57
  2453  000C84  6E09               	movwf	KP_Readbutton@key,c
  2454  000C86  5009               	movf	KP_Readbutton@key,w,c
  2455  000C88  0012               	return	
  2456  000C8A                     l1608:
  2457                           
  2458                           ;KeyPad Library.c: 38: if(keynum == 4) { return key = '/'; }
  2459  000C8A  0E04               	movlw	4
  2460  000C8C  1835               	xorwf	_keynum,w,c
  2461  000C8E  1036               	iorwf	_keynum+1,w,c
  2462  000C90  A4D8               	btfss	status,2,c
  2463  000C92  D004               	goto	l1614
  2464  000C94  0E2F               	movlw	47
  2465  000C96  6E09               	movwf	KP_Readbutton@key,c
  2466  000C98  5009               	movf	KP_Readbutton@key,w,c
  2467  000C9A  0012               	return	
  2468  000C9C                     l1614:
  2469                           
  2470                           ;KeyPad Library.c: 39: if(keynum == 5) { return key = '4'; }
  2471  000C9C  0E05               	movlw	5
  2472  000C9E  1835               	xorwf	_keynum,w,c
  2473  000CA0  1036               	iorwf	_keynum+1,w,c
  2474  000CA2  A4D8               	btfss	status,2,c
  2475  000CA4  D004               	goto	l1620
  2476  000CA6  0E34               	movlw	52
  2477  000CA8  6E09               	movwf	KP_Readbutton@key,c
  2478  000CAA  5009               	movf	KP_Readbutton@key,w,c
  2479  000CAC  0012               	return	
  2480  000CAE                     l1620:
  2481                           
  2482                           ;KeyPad Library.c: 40: if(keynum == 6) { return key = '5'; }
  2483  000CAE  0E06               	movlw	6
  2484  000CB0  1835               	xorwf	_keynum,w,c
  2485  000CB2  1036               	iorwf	_keynum+1,w,c
  2486  000CB4  A4D8               	btfss	status,2,c
  2487  000CB6  D004               	goto	l1626
  2488  000CB8  0E35               	movlw	53
  2489  000CBA  6E09               	movwf	KP_Readbutton@key,c
  2490  000CBC  5009               	movf	KP_Readbutton@key,w,c
  2491  000CBE  0012               	return	
  2492  000CC0                     l1626:
  2493                           
  2494                           ;KeyPad Library.c: 41: if(keynum == 7) { return key = '6'; }
  2495  000CC0  0E07               	movlw	7
  2496  000CC2  1835               	xorwf	_keynum,w,c
  2497  000CC4  1036               	iorwf	_keynum+1,w,c
  2498  000CC6  A4D8               	btfss	status,2,c
  2499  000CC8  D004               	goto	l1632
  2500  000CCA  0E36               	movlw	54
  2501  000CCC  6E09               	movwf	KP_Readbutton@key,c
  2502  000CCE  5009               	movf	KP_Readbutton@key,w,c
  2503  000CD0  0012               	return	
  2504  000CD2                     l1632:
  2505                           
  2506                           ;KeyPad Library.c: 42: if(keynum == 8) { return key = '*'; }
  2507  000CD2  0E08               	movlw	8
  2508  000CD4  1835               	xorwf	_keynum,w,c
  2509  000CD6  1036               	iorwf	_keynum+1,w,c
  2510  000CD8  A4D8               	btfss	status,2,c
  2511  000CDA  D004               	goto	l1638
  2512  000CDC  0E2A               	movlw	42
  2513  000CDE  6E09               	movwf	KP_Readbutton@key,c
  2514  000CE0  5009               	movf	KP_Readbutton@key,w,c
  2515  000CE2  0012               	return	
  2516  000CE4                     l1638:
  2517                           
  2518                           ;KeyPad Library.c: 43: if(keynum == 9) { return key = '1'; }
  2519  000CE4  0E09               	movlw	9
  2520  000CE6  1835               	xorwf	_keynum,w,c
  2521  000CE8  1036               	iorwf	_keynum+1,w,c
  2522  000CEA  A4D8               	btfss	status,2,c
  2523  000CEC  D004               	goto	l1644
  2524  000CEE  0E31               	movlw	49
  2525  000CF0  6E09               	movwf	KP_Readbutton@key,c
  2526  000CF2  5009               	movf	KP_Readbutton@key,w,c
  2527  000CF4  0012               	return	
  2528  000CF6                     l1644:
  2529                           
  2530                           ;KeyPad Library.c: 44: if(keynum == 10){ return key = '2';}
  2531  000CF6  0E0A               	movlw	10
  2532  000CF8  1835               	xorwf	_keynum,w,c
  2533  000CFA  1036               	iorwf	_keynum+1,w,c
  2534  000CFC  A4D8               	btfss	status,2,c
  2535  000CFE  D004               	goto	l1650
  2536  000D00  0E32               	movlw	50
  2537  000D02  6E09               	movwf	KP_Readbutton@key,c
  2538  000D04  5009               	movf	KP_Readbutton@key,w,c
  2539  000D06  0012               	return	
  2540  000D08                     l1650:
  2541                           
  2542                           ;KeyPad Library.c: 45: if(keynum == 11){ return key = '3';}
  2543  000D08  0E0B               	movlw	11
  2544  000D0A  1835               	xorwf	_keynum,w,c
  2545  000D0C  1036               	iorwf	_keynum+1,w,c
  2546  000D0E  A4D8               	btfss	status,2,c
  2547  000D10  D004               	goto	l1656
  2548  000D12  0E33               	movlw	51
  2549  000D14  6E09               	movwf	KP_Readbutton@key,c
  2550  000D16  5009               	movf	KP_Readbutton@key,w,c
  2551  000D18  0012               	return	
  2552  000D1A                     l1656:
  2553                           
  2554                           ;KeyPad Library.c: 46: if(keynum == 12){ return key = '-';}
  2555  000D1A  0E0C               	movlw	12
  2556  000D1C  1835               	xorwf	_keynum,w,c
  2557  000D1E  1036               	iorwf	_keynum+1,w,c
  2558  000D20  A4D8               	btfss	status,2,c
  2559  000D22  D004               	goto	l1662
  2560  000D24  0E2D               	movlw	45
  2561  000D26  6E09               	movwf	KP_Readbutton@key,c
  2562  000D28  5009               	movf	KP_Readbutton@key,w,c
  2563  000D2A  0012               	return	
  2564  000D2C                     l1662:
  2565                           
  2566                           ;KeyPad Library.c: 47: if(keynum == 13){ return key = 'd';}
  2567  000D2C  0E0D               	movlw	13
  2568  000D2E  1835               	xorwf	_keynum,w,c
  2569  000D30  1036               	iorwf	_keynum+1,w,c
  2570  000D32  A4D8               	btfss	status,2,c
  2571  000D34  D004               	goto	l1668
  2572  000D36  0E64               	movlw	100
  2573  000D38  6E09               	movwf	KP_Readbutton@key,c
  2574  000D3A  5009               	movf	KP_Readbutton@key,w,c
  2575  000D3C  0012               	return	
  2576  000D3E                     l1668:
  2577                           
  2578                           ;KeyPad Library.c: 48: if(keynum == 14){ return key = '0';}
  2579  000D3E  0E0E               	movlw	14
  2580  000D40  1835               	xorwf	_keynum,w,c
  2581  000D42  1036               	iorwf	_keynum+1,w,c
  2582  000D44  A4D8               	btfss	status,2,c
  2583  000D46  D004               	goto	l1674
  2584  000D48  0E30               	movlw	48
  2585  000D4A  6E09               	movwf	KP_Readbutton@key,c
  2586  000D4C  5009               	movf	KP_Readbutton@key,w,c
  2587  000D4E  0012               	return	
  2588  000D50                     l1674:
  2589                           
  2590                           ;KeyPad Library.c: 49: if(keynum == 15){ return key = '=';}
  2591  000D50  0E0F               	movlw	15
  2592  000D52  1835               	xorwf	_keynum,w,c
  2593  000D54  1036               	iorwf	_keynum+1,w,c
  2594  000D56  A4D8               	btfss	status,2,c
  2595  000D58  D004               	goto	l1680
  2596  000D5A  0E3D               	movlw	61
  2597  000D5C  6E09               	movwf	KP_Readbutton@key,c
  2598  000D5E  5009               	movf	KP_Readbutton@key,w,c
  2599  000D60  0012               	return	
  2600  000D62                     l1680:
  2601                           
  2602                           ;KeyPad Library.c: 50: if(keynum == 16){ return key = '+';}
  2603  000D62  0E10               	movlw	16
  2604  000D64  1835               	xorwf	_keynum,w,c
  2605  000D66  1036               	iorwf	_keynum+1,w,c
  2606  000D68  A4D8               	btfss	status,2,c
  2607  000D6A  D004               	goto	l1686
  2608  000D6C  0E2B               	movlw	43
  2609  000D6E  6E09               	movwf	KP_Readbutton@key,c
  2610  000D70  5009               	movf	KP_Readbutton@key,w,c
  2611  000D72  0012               	return	
  2612  000D74                     l1686:
  2613  000D74  ECC4  F006         	call	_KP_scan	;wreg free
  2614  000D78  5001               	movf	?_KP_scan,w,c
  2615  000D7A  6E09               	movwf	KP_Readbutton@key,c
  2616  000D7C  0E2C               	movlw	44
  2617  000D7E  1809               	xorwf	KP_Readbutton@key,w,c
  2618  000D80  A4D8               	btfss	status,2,c
  2619  000D82  D769               	goto	l1590
  2620                           
  2621                           ;KeyPad Library.c: 51: }
  2622                           ;KeyPad Library.c: 52: return key;
  2623  000D84  5009               	movf	KP_Readbutton@key,w,c
  2624  000D86  0012               	return	
  2625  000D88                     __end_of_KP_Readbutton:
  2626                           	opt stack 0
  2627                           tblptru	equ	0xFF8
  2628                           tblptrh	equ	0xFF7
  2629                           tblptrl	equ	0xFF6
  2630                           tablat	equ	0xFF5
  2631                           prodh	equ	0xFF4
  2632                           prodl	equ	0xFF3
  2633                           indf0	equ	0xFEF
  2634                           postinc0	equ	0xFEE
  2635                           fsr0h	equ	0xFEA
  2636                           fsr0l	equ	0xFE9
  2637                           wreg	equ	0xFE8
  2638                           indf2	equ	0xFDF
  2639                           postinc2	equ	0xFDE
  2640                           postdec2	equ	0xFDD
  2641                           fsr2h	equ	0xFDA
  2642                           fsr2l	equ	0xFD9
  2643                           status	equ	0xFD8
  2644                           
  2645 ;; *************** function _KP_scan *****************
  2646 ;; Defined at:
  2647 ;;		line 12 in file "KeyPad Library.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;		None
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;  row             2    6[COMRAM] short 
  2652 ;;  press           2    4[COMRAM] short 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  2    0[COMRAM] int 
  2655 ;; Registers used:
  2656 ;;		wreg, status,2, status,0
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2662 ;;      Params:         2       0       0       0       0       0       0       0       0
  2663 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2664 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2665 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2666 ;;Total ram usage:        8 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; This function calls:
  2669 ;;		Nothing
  2670 ;; This function is called by:
  2671 ;;		_KP_Readbutton
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           	psect	text13
  2676  000D88                     __ptext13:
  2677                           	opt stack 0
  2678  000D88                     _KP_scan:
  2679                           	opt stack 27
  2680                           
  2681                           ;KeyPad Library.c: 14: short row,press = 0;
  2682                           
  2683                           ;incstack = 0
  2684  000D88  0E00               	movlw	0
  2685  000D8A  6E06               	movwf	KP_scan@press+1,c
  2686  000D8C  0E00               	movlw	0
  2687  000D8E  6E05               	movwf	KP_scan@press,c
  2688                           
  2689                           ;KeyPad Library.c: 15: keynum = 0;
  2690  000D90  0E00               	movlw	0
  2691  000D92  6E36               	movwf	_keynum+1,c
  2692  000D94  0E00               	movlw	0
  2693  000D96  6E35               	movwf	_keynum,c
  2694                           
  2695                           ;KeyPad Library.c: 16: for(row = 0; row < 4; row++)
  2696  000D98  0E00               	movlw	0
  2697  000D9A  6E08               	movwf	KP_scan@row+1,c
  2698  000D9C  0E00               	movlw	0
  2699  000D9E  6E07               	movwf	KP_scan@row,c
  2700  000DA0  BE08               	btfsc	KP_scan@row+1,7,c
  2701  000DA2  D006               	goto	l1492
  2702  000DA4  5008               	movf	KP_scan@row+1,w,c
  2703  000DA6  E165               	bnz	l1540
  2704  000DA8  0E04               	movlw	4
  2705  000DAA  5C07               	subwf	KP_scan@row,w,c
  2706  000DAC  B0D8               	btfsc	status,0,c
  2707  000DAE  D061               	goto	l1540
  2708  000DB0                     l1492:
  2709                           
  2710                           ;KeyPad Library.c: 17: {
  2711                           ;KeyPad Library.c: 18: LATD = (0x10<<row);
  2712  000DB0  C007  F003         	movff	KP_scan@row,??_KP_scan
  2713  000DB4  0E10               	movlw	16
  2714  000DB6  6E04               	movwf	(??_KP_scan+1)& (0+255),c
  2715  000DB8  2A03               	incf	??_KP_scan,f,c
  2716  000DBA  D002               	goto	u884
  2717  000DBC                     u885:
  2718  000DBC  90D8               	bcf	status,0,c
  2719  000DBE  3604               	rlcf	??_KP_scan+1,f,c
  2720  000DC0                     u884:
  2721  000DC0  2E03               	decfsz	??_KP_scan,f,c
  2722  000DC2  D7FC               	goto	u885
  2723  000DC4  5004               	movf	??_KP_scan+1,w,c
  2724  000DC6  6E8C               	movwf	3980,c	;volatile
  2725                           
  2726                           ;KeyPad Library.c: 20: if(PORTDbits.RD0 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD0 == 1); return keynum+=1; press = 1;}
  2727  000DC8  A083               	btfss	3971,0,c	;volatile
  2728  000DCA  D010               	goto	l1504
  2729  000DCC  0EE4               	movlw	228
  2730  000DCE                     u1447:
  2731  000DCE  D000               	nop2	
  2732  000DD0  D000               	nop2	
  2733  000DD2  2EE8               	decfsz	wreg,f,c
  2734  000DD4  D7FC               	bra	u1447
  2735  000DD6  D000               	nop2	
  2736  000DD8  D000               	nop2	
  2737  000DDA                     l19:
  2738  000DDA  B083               	btfsc	3971,0,c	;volatile
  2739  000DDC  D7FE               	goto	l19
  2740  000DDE  4A35               	infsnz	_keynum,f,c
  2741  000DE0  2A36               	incf	_keynum+1,f,c
  2742  000DE2  C035  F001         	movff	_keynum,?_KP_scan
  2743  000DE6  C036  F002         	movff	_keynum+1,?_KP_scan+1
  2744  000DEA  0012               	return	
  2745  000DEC                     l1504:
  2746                           
  2747                           ;KeyPad Library.c: 21: if(PORTDbits.RD1 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD1 == 1); return keynum+=2; press = 1;}
  2748  000DEC  A283               	btfss	3971,1,c	;volatile
  2749  000DEE  D012               	goto	l1514
  2750  000DF0  0EE4               	movlw	228
  2751  000DF2                     u1457:
  2752  000DF2  D000               	nop2	
  2753  000DF4  D000               	nop2	
  2754  000DF6  2EE8               	decfsz	wreg,f,c
  2755  000DF8  D7FC               	bra	u1457
  2756  000DFA  D000               	nop2	
  2757  000DFC  D000               	nop2	
  2758  000DFE                     l24:
  2759  000DFE  B283               	btfsc	3971,1,c	;volatile
  2760  000E00  D7FE               	goto	l24
  2761  000E02  0E02               	movlw	2
  2762  000E04  2635               	addwf	_keynum,f,c
  2763  000E06  0E00               	movlw	0
  2764  000E08  2236               	addwfc	_keynum+1,f,c
  2765  000E0A  C035  F001         	movff	_keynum,?_KP_scan
  2766  000E0E  C036  F002         	movff	_keynum+1,?_KP_scan+1
  2767  000E12  0012               	return	
  2768  000E14                     l1514:
  2769                           
  2770                           ;KeyPad Library.c: 22: if(PORTDbits.RD2 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD2 == 1); return keynum+=3; press = 1;}
  2771  000E14  A483               	btfss	3971,2,c	;volatile
  2772  000E16  D012               	goto	l1524
  2773  000E18  0EE4               	movlw	228
  2774  000E1A                     u1467:
  2775  000E1A  D000               	nop2	
  2776  000E1C  D000               	nop2	
  2777  000E1E  2EE8               	decfsz	wreg,f,c
  2778  000E20  D7FC               	bra	u1467
  2779  000E22  D000               	nop2	
  2780  000E24  D000               	nop2	
  2781  000E26                     l28:
  2782  000E26  B483               	btfsc	3971,2,c	;volatile
  2783  000E28  D7FE               	goto	l28
  2784  000E2A  0E03               	movlw	3
  2785  000E2C  2635               	addwf	_keynum,f,c
  2786  000E2E  0E00               	movlw	0
  2787  000E30  2236               	addwfc	_keynum+1,f,c
  2788  000E32  C035  F001         	movff	_keynum,?_KP_scan
  2789  000E36  C036  F002         	movff	_keynum+1,?_KP_scan+1
  2790  000E3A  0012               	return	
  2791  000E3C                     l1524:
  2792                           
  2793                           ;KeyPad Library.c: 23: if(PORTDbits.RD3 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD3 == 1); return keynum+=4; press = 1;}
  2794  000E3C  A683               	btfss	3971,3,c	;volatile
  2795  000E3E  D012               	goto	l1534
  2796  000E40  0EE4               	movlw	228
  2797  000E42                     u1477:
  2798  000E42  D000               	nop2	
  2799  000E44  D000               	nop2	
  2800  000E46  2EE8               	decfsz	wreg,f,c
  2801  000E48  D7FC               	bra	u1477
  2802  000E4A  D000               	nop2	
  2803  000E4C  D000               	nop2	
  2804  000E4E                     l32:
  2805  000E4E  B683               	btfsc	3971,3,c	;volatile
  2806  000E50  D7FE               	goto	l32
  2807  000E52  0E04               	movlw	4
  2808  000E54  2635               	addwf	_keynum,f,c
  2809  000E56  0E00               	movlw	0
  2810  000E58  2236               	addwfc	_keynum+1,f,c
  2811  000E5A  C035  F001         	movff	_keynum,?_KP_scan
  2812  000E5E  C036  F002         	movff	_keynum+1,?_KP_scan+1
  2813  000E62  0012               	return	
  2814  000E64                     l1534:
  2815                           
  2816                           ;KeyPad Library.c: 25: keynum +=4;
  2817  000E64  0E04               	movlw	4
  2818  000E66  2635               	addwf	_keynum,f,c
  2819  000E68  0E00               	movlw	0
  2820  000E6A  2236               	addwfc	_keynum+1,f,c
  2821  000E6C  4A07               	infsnz	KP_scan@row,f,c
  2822  000E6E  2A08               	incf	KP_scan@row+1,f,c
  2823  000E70  D797               	goto	L3
  2824  000E72                     l1540:
  2825                           
  2826                           ;KeyPad Library.c: 26: }
  2827                           ;KeyPad Library.c: 27: if(press == 0) keynum = 0;
  2828  000E72  5005               	movf	KP_scan@press,w,c
  2829  000E74  1006               	iorwf	KP_scan@press+1,w,c
  2830  000E76  A4D8               	btfss	status,2,c
  2831  000E78  0012               	return	
  2832  000E7A  0E00               	movlw	0
  2833  000E7C  6E36               	movwf	_keynum+1,c
  2834  000E7E  0E00               	movlw	0
  2835  000E80  6E35               	movwf	_keynum,c
  2836  000E82  0012               	return	
  2837  000E84                     __end_of_KP_scan:
  2838                           	opt stack 0
  2839                           tblptru	equ	0xFF8
  2840                           tblptrh	equ	0xFF7
  2841                           tblptrl	equ	0xFF6
  2842                           tablat	equ	0xFF5
  2843                           prodh	equ	0xFF4
  2844                           prodl	equ	0xFF3
  2845                           indf0	equ	0xFEF
  2846                           postinc0	equ	0xFEE
  2847                           fsr0h	equ	0xFEA
  2848                           fsr0l	equ	0xFE9
  2849                           wreg	equ	0xFE8
  2850                           indf2	equ	0xFDF
  2851                           postinc2	equ	0xFDE
  2852                           postdec2	equ	0xFDD
  2853                           fsr2h	equ	0xFDA
  2854                           fsr2l	equ	0xFD9
  2855                           status	equ	0xFD8
  2856                           
  2857 ;; *************** function _OpenI2C *****************
  2858 ;; Defined at:
  2859 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_open.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;  sync_mode       1    wreg     unsigned char 
  2862 ;;  slew            1    0[COMRAM] unsigned char 
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;  sync_mode       1    1[COMRAM] unsigned char 
  2865 ;; Return value:  Size  Location     Type
  2866 ;;                  1    wreg      void 
  2867 ;; Registers used:
  2868 ;;		wreg, status,2, status,0
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2874 ;;      Params:         1       0       0       0       0       0       0       0       0
  2875 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2876 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2877 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2878 ;;Total ram usage:        2 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; This function calls:
  2881 ;;		Nothing
  2882 ;; This function is called by:
  2883 ;;		_main
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text14
  2888  001430                     __ptext14:
  2889                           	opt stack 0
  2890  001430                     _OpenI2C:
  2891                           	opt stack 30
  2892                           
  2893                           ;incstack = 0
  2894                           ;OpenI2C@sync_mode stored from wreg
  2895  001430  6E02               	movwf	OpenI2C@sync_mode,c
  2896  001432  0E3F               	movlw	63
  2897  001434  16C7               	andwf	4039,f,c	;volatile
  2898  001436  0E00               	movlw	0
  2899  001438  6EC6               	movwf	4038,c	;volatile
  2900  00143A  0E00               	movlw	0
  2901  00143C  6EC5               	movwf	4037,c	;volatile
  2902  00143E  5002               	movf	OpenI2C@sync_mode,w,c
  2903  001440  12C6               	iorwf	4038,f,c	;volatile
  2904  001442  5001               	movf	OpenI2C@slew,w,c
  2905  001444  12C7               	iorwf	4039,f,c	;volatile
  2906  001446  8293               	bsf	3987,1,c	;volatile
  2907  001448  8093               	bsf	3987,0,c	;volatile
  2908  00144A  8AC6               	bsf	4038,5,c	;volatile
  2909  00144C  0012               	return		;funcret
  2910  00144E                     __end_of_OpenI2C:
  2911                           	opt stack 0
  2912                           tblptru	equ	0xFF8
  2913                           tblptrh	equ	0xFF7
  2914                           tblptrl	equ	0xFF6
  2915                           tablat	equ	0xFF5
  2916                           prodh	equ	0xFF4
  2917                           prodl	equ	0xFF3
  2918                           indf0	equ	0xFEF
  2919                           postinc0	equ	0xFEE
  2920                           fsr0h	equ	0xFEA
  2921                           fsr0l	equ	0xFE9
  2922                           wreg	equ	0xFE8
  2923                           indf2	equ	0xFDF
  2924                           postinc2	equ	0xFDE
  2925                           postdec2	equ	0xFDD
  2926                           fsr2h	equ	0xFDA
  2927                           fsr2l	equ	0xFD9
  2928                           status	equ	0xFD8
  2929                           
  2930 ;; *************** function _LCD_init *****************
  2931 ;; Defined at:
  2932 ;;		line 63 in file "i2c_lcd.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;  addr            1    wreg     unsigned char 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;  addr            1   12[COMRAM] unsigned char 
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, status,2, status,0, cstack
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2946 ;;      Params:         0       0       0       0       0       0       0       0       0
  2947 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2948 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2949 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2950 ;;Total ram usage:        2 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; Hardware stack levels required when called:    4
  2953 ;; This function calls:
  2954 ;;		_LCD_putcmd
  2955 ;; This function is called by:
  2956 ;;		_main
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text15
  2961  001010                     __ptext15:
  2962                           	opt stack 0
  2963  001010                     _LCD_init:
  2964                           	opt stack 26
  2965                           
  2966                           ;incstack = 0
  2967                           ;LCD_init@addr stored from wreg
  2968  001010  6E0D               	movwf	LCD_init@addr,c
  2969                           
  2970                           ;i2c_lcd.c: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
  2971  001012  0E34               	movlw	52
  2972  001014  6E0C               	movwf	??_LCD_init& (0+255),c
  2973  001016  0EF2               	movlw	242
  2974  001018                     u1487:
  2975  001018  2EE8               	decfsz	wreg,f,c
  2976  00101A  D7FE               	bra	u1487
  2977  00101C  2E0C               	decfsz	??_LCD_init& (0+255),f,c
  2978  00101E  D7FC               	bra	u1487
  2979                           
  2980                           ;i2c_lcd.c: 67: LCD_putcmd(addr, 0x30,0);_delay((unsigned long)((5)*(8000000/4000.0)));
  2981  001020  0E30               	movlw	48
  2982  001022  6E07               	movwf	LCD_putcmd@data,c
  2983  001024  0E00               	movlw	0
  2984  001026  6E08               	movwf	LCD_putcmd@cmdtype,c
  2985  001028  500D               	movf	LCD_init@addr,w,c
  2986  00102A  EC67  F009         	call	_LCD_putcmd
  2987  00102E  0E0D               	movlw	13
  2988  001030  6E0C               	movwf	??_LCD_init& (0+255),c
  2989  001032  0EFC               	movlw	252
  2990  001034                     u1497:
  2991  001034  2EE8               	decfsz	wreg,f,c
  2992  001036  D7FE               	bra	u1497
  2993  001038  2E0C               	decfsz	??_LCD_init& (0+255),f,c
  2994  00103A  D7FC               	bra	u1497
  2995                           
  2996                           ;i2c_lcd.c: 68: LCD_putcmd(addr, 0x30,0);
  2997  00103C  0E30               	movlw	48
  2998  00103E  6E07               	movwf	LCD_putcmd@data,c
  2999  001040  0E00               	movlw	0
  3000  001042  6E08               	movwf	LCD_putcmd@cmdtype,c
  3001  001044  500D               	movf	LCD_init@addr,w,c
  3002  001046  EC67  F009         	call	_LCD_putcmd
  3003                           
  3004                           ;i2c_lcd.c: 69: LCD_putcmd(addr, 0x30,0);
  3005  00104A  0E30               	movlw	48
  3006  00104C  6E07               	movwf	LCD_putcmd@data,c
  3007  00104E  0E00               	movlw	0
  3008  001050  6E08               	movwf	LCD_putcmd@cmdtype,c
  3009  001052  500D               	movf	LCD_init@addr,w,c
  3010  001054  EC67  F009         	call	_LCD_putcmd
  3011                           
  3012                           ;i2c_lcd.c: 70: LCD_putcmd(addr, 0x20,0);
  3013  001058  0E20               	movlw	32
  3014  00105A  6E07               	movwf	LCD_putcmd@data,c
  3015  00105C  0E00               	movlw	0
  3016  00105E  6E08               	movwf	LCD_putcmd@cmdtype,c
  3017  001060  500D               	movf	LCD_init@addr,w,c
  3018  001062  EC67  F009         	call	_LCD_putcmd
  3019                           
  3020                           ;i2c_lcd.c: 71: LCD_putcmd(addr, 0x28,1);
  3021  001066  0E28               	movlw	40
  3022  001068  6E07               	movwf	LCD_putcmd@data,c
  3023  00106A  0E01               	movlw	1
  3024  00106C  6E08               	movwf	LCD_putcmd@cmdtype,c
  3025  00106E  500D               	movf	LCD_init@addr,w,c
  3026  001070  EC67  F009         	call	_LCD_putcmd
  3027                           
  3028                           ;i2c_lcd.c: 72: LCD_putcmd(addr, 0x08,1);
  3029  001074  0E08               	movlw	8
  3030  001076  6E07               	movwf	LCD_putcmd@data,c
  3031  001078  0E01               	movlw	1
  3032  00107A  6E08               	movwf	LCD_putcmd@cmdtype,c
  3033  00107C  500D               	movf	LCD_init@addr,w,c
  3034  00107E  EC67  F009         	call	_LCD_putcmd
  3035                           
  3036                           ;i2c_lcd.c: 73: LCD_putcmd(addr, 0x01,1);
  3037  001082  0E01               	movlw	1
  3038  001084  6E07               	movwf	LCD_putcmd@data,c
  3039  001086  0E01               	movlw	1
  3040  001088  6E08               	movwf	LCD_putcmd@cmdtype,c
  3041  00108A  500D               	movf	LCD_init@addr,w,c
  3042  00108C  EC67  F009         	call	_LCD_putcmd
  3043                           
  3044                           ;i2c_lcd.c: 74: LCD_putcmd(addr, 0x06,1);
  3045  001090  0E06               	movlw	6
  3046  001092  6E07               	movwf	LCD_putcmd@data,c
  3047  001094  0E01               	movlw	1
  3048  001096  6E08               	movwf	LCD_putcmd@cmdtype,c
  3049  001098  500D               	movf	LCD_init@addr,w,c
  3050  00109A  EC67  F009         	call	_LCD_putcmd
  3051                           
  3052                           ;i2c_lcd.c: 75: LCD_putcmd(addr, 0x0c,1);
  3053  00109E  0E0C               	movlw	12
  3054  0010A0  6E07               	movwf	LCD_putcmd@data,c
  3055  0010A2  0E01               	movlw	1
  3056  0010A4  6E08               	movwf	LCD_putcmd@cmdtype,c
  3057  0010A6  500D               	movf	LCD_init@addr,w,c
  3058  0010A8  EC67  F009         	call	_LCD_putcmd
  3059  0010AC  0012               	return		;funcret
  3060  0010AE                     __end_of_LCD_init:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           indf0	equ	0xFEF
  3069                           postinc0	equ	0xFEE
  3070                           fsr0h	equ	0xFEA
  3071                           fsr0l	equ	0xFE9
  3072                           wreg	equ	0xFE8
  3073                           indf2	equ	0xFDF
  3074                           postinc2	equ	0xFDE
  3075                           postdec2	equ	0xFDD
  3076                           fsr2h	equ	0xFDA
  3077                           fsr2l	equ	0xFD9
  3078                           status	equ	0xFD8
  3079                           
  3080 ;; *************** function _LCD_putcmd *****************
  3081 ;; Defined at:
  3082 ;;		line 29 in file "i2c_lcd.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;  addr            1    wreg     unsigned char 
  3085 ;;  data            1    6[COMRAM] unsigned char 
  3086 ;;  cmdtype         1    7[COMRAM] unsigned char 
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;  addr            1    9[COMRAM] unsigned char 
  3089 ;;  lcddata         1   10[COMRAM] unsigned char 
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  1    wreg      void 
  3092 ;; Registers used:
  3093 ;;		wreg, status,2, status,0, cstack
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3099 ;;      Params:         2       0       0       0       0       0       0       0       0
  3100 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3101 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3102 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3103 ;;Total ram usage:        5 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    3
  3106 ;; This function calls:
  3107 ;;		_I2C_PCF8574_Write
  3108 ;; This function is called by:
  3109 ;;		_LCD_init
  3110 ;;		_LCD_goto
  3111 ;;		_main
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           	psect	text16
  3116  0012CE                     __ptext16:
  3117                           	opt stack 0
  3118  0012CE                     _LCD_putcmd:
  3119                           	opt stack 24
  3120                           
  3121                           ;incstack = 0
  3122                           ;LCD_putcmd@addr stored from wreg
  3123  0012CE  6E0A               	movwf	LCD_putcmd@addr,c
  3124                           
  3125                           ;i2c_lcd.c: 31: unsigned char lcddata;
  3126                           ;i2c_lcd.c: 34: lcddata = (data & 0xF0)|0x08;
  3127  0012D0  5007               	movf	LCD_putcmd@data,w,c
  3128  0012D2  0BF0               	andlw	240
  3129  0012D4  0908               	iorlw	8
  3130  0012D6  6E0B               	movwf	LCD_putcmd@lcddata,c
  3131                           
  3132                           ;i2c_lcd.c: 35: I2C_PCF8574_Write(addr,lcddata | 0x04);
  3133  0012D8  500B               	movf	LCD_putcmd@lcddata,w,c
  3134  0012DA  0904               	iorlw	4
  3135  0012DC  6E03               	movwf	I2C_PCF8574_Write@value,c
  3136  0012DE  500A               	movf	LCD_putcmd@addr,w,c
  3137  0012E0  ECF9  F009         	call	_I2C_PCF8574_Write
  3138                           
  3139                           ;i2c_lcd.c: 36: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  3140  0012E4  500B               	movf	LCD_putcmd@lcddata,w,c
  3141  0012E6  0BFB               	andlw	251
  3142  0012E8  6E03               	movwf	I2C_PCF8574_Write@value,c
  3143  0012EA  500A               	movf	LCD_putcmd@addr,w,c
  3144  0012EC  ECF9  F009         	call	_I2C_PCF8574_Write
  3145                           
  3146                           ;i2c_lcd.c: 39: if (cmdtype) {
  3147  0012F0  5008               	movf	LCD_putcmd@cmdtype,w,c
  3148  0012F2  B4D8               	btfsc	status,2,c
  3149  0012F4  D011               	goto	l1558
  3150                           
  3151                           ;i2c_lcd.c: 41: lcddata = ((data << 4) & 0xF0)|0x08;
  3152  0012F6  3807               	swapf	LCD_putcmd@data,w,c
  3153  0012F8  0BF0               	andlw	240
  3154  0012FA  0BF0               	andlw	240
  3155  0012FC  0908               	iorlw	8
  3156  0012FE  6E0B               	movwf	LCD_putcmd@lcddata,c
  3157                           
  3158                           ;i2c_lcd.c: 42: I2C_PCF8574_Write(addr,lcddata | 0x04);
  3159  001300  500B               	movf	LCD_putcmd@lcddata,w,c
  3160  001302  0904               	iorlw	4
  3161  001304  6E03               	movwf	I2C_PCF8574_Write@value,c
  3162  001306  500A               	movf	LCD_putcmd@addr,w,c
  3163  001308  ECF9  F009         	call	_I2C_PCF8574_Write
  3164                           
  3165                           ;i2c_lcd.c: 43: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  3166  00130C  500B               	movf	LCD_putcmd@lcddata,w,c
  3167  00130E  0BFB               	andlw	251
  3168  001310  6E03               	movwf	I2C_PCF8574_Write@value,c
  3169  001312  500A               	movf	LCD_putcmd@addr,w,c
  3170  001314  ECF9  F009         	call	_I2C_PCF8574_Write
  3171  001318                     l1558:
  3172                           
  3173                           ;i2c_lcd.c: 44: }
  3174                           ;i2c_lcd.c: 45: _delay((unsigned long)((2)*(8000000/4000.0)));
  3175  001318  0E06               	movlw	6
  3176  00131A  6E09               	movwf	??_LCD_putcmd& (0+255),c
  3177  00131C  0E30               	movlw	48
  3178  00131E                     u1507:
  3179  00131E  2EE8               	decfsz	wreg,f,c
  3180  001320  D7FE               	bra	u1507
  3181  001322  2E09               	decfsz	??_LCD_putcmd& (0+255),f,c
  3182  001324  D7FC               	bra	u1507
  3183  001326  D000               	nop2	
  3184  001328  0012               	return		;funcret
  3185  00132A                     __end_of_LCD_putcmd:
  3186                           	opt stack 0
  3187                           tblptru	equ	0xFF8
  3188                           tblptrh	equ	0xFF7
  3189                           tblptrl	equ	0xFF6
  3190                           tablat	equ	0xFF5
  3191                           prodh	equ	0xFF4
  3192                           prodl	equ	0xFF3
  3193                           indf0	equ	0xFEF
  3194                           postinc0	equ	0xFEE
  3195                           fsr0h	equ	0xFEA
  3196                           fsr0l	equ	0xFE9
  3197                           wreg	equ	0xFE8
  3198                           indf2	equ	0xFDF
  3199                           postinc2	equ	0xFDE
  3200                           postdec2	equ	0xFDD
  3201                           fsr2h	equ	0xFDA
  3202                           fsr2l	equ	0xFD9
  3203                           status	equ	0xFD8
  3204                           
  3205 ;; *************** function _I2C_PCF8574_Write *****************
  3206 ;; Defined at:
  3207 ;;		line 12 in file "i2c_lcd.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  addr            1    wreg     unsigned char 
  3210 ;;  value           1    2[COMRAM] unsigned char 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  addr            1    5[COMRAM] unsigned char 
  3213 ;;  S               1    4[COMRAM] unsigned char 
  3214 ;;  dummy           1    3[COMRAM] unsigned char 
  3215 ;; Return value:  Size  Location     Type
  3216 ;;                  1    wreg      unsigned char 
  3217 ;; Registers used:
  3218 ;;		wreg, status,2, status,0, cstack
  3219 ;; Tracked objects:
  3220 ;;		On entry : 0/0
  3221 ;;		On exit  : 0/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3224 ;;      Params:         1       0       0       0       0       0       0       0       0
  3225 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3226 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3227 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3228 ;;Total ram usage:        4 bytes
  3229 ;; Hardware stack levels used:    1
  3230 ;; Hardware stack levels required when called:    2
  3231 ;; This function calls:
  3232 ;;		_WriteI2C
  3233 ;; This function is called by:
  3234 ;;		_LCD_putcmd
  3235 ;;		_LCD_putch
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text17
  3240  0013F2                     __ptext17:
  3241                           	opt stack 0
  3242  0013F2                     _I2C_PCF8574_Write:
  3243                           	opt stack 24
  3244                           
  3245                           ;incstack = 0
  3246                           ;I2C_PCF8574_Write@addr stored from wreg
  3247  0013F2  6E06               	movwf	I2C_PCF8574_Write@addr,c
  3248                           
  3249                           ;i2c_lcd.c: 14: unsigned char S,dummy;
  3250                           ;i2c_lcd.c: 15: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3251  0013F4  80C5               	bsf	4037,0,c	;volatile
  3252  0013F6                     l70:
  3253  0013F6  B0C5               	btfsc	4037,0,c	;volatile
  3254  0013F8  D7FE               	goto	l70
  3255                           
  3256                           ;i2c_lcd.c: 16: S = WriteI2C( addr );
  3257  0013FA  5006               	movf	I2C_PCF8574_Write@addr,w,c
  3258  0013FC  EC38  F009         	call	_WriteI2C
  3259  001400  6E05               	movwf	I2C_PCF8574_Write@S,c
  3260                           
  3261                           ;i2c_lcd.c: 21: }
  3262                           ;i2c_lcd.c: 22: S = WriteI2C(value);
  3263                           
  3264                           ;i2c_lcd.c: 20: SSPCON1bits.WCOL=0;
  3265                           
  3266                           ;i2c_lcd.c: 18: {
  3267                           ;i2c_lcd.c: 19: dummy = SSPBUF;
  3268                           
  3269                           ;i2c_lcd.c: 17: if(S == -1)
  3270  001402  5003               	movf	I2C_PCF8574_Write@value,w,c
  3271  001404  EC38  F009         	call	_WriteI2C
  3272  001408  6E05               	movwf	I2C_PCF8574_Write@S,c
  3273                           
  3274                           ;i2c_lcd.c: 23: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3275  00140A  84C5               	bsf	4037,2,c	;volatile
  3276  00140C                     l74:
  3277  00140C  A4C5               	btfss	4037,2,c	;volatile
  3278  00140E  0012               	return	
  3279  001410  D7FD               	goto	l74
  3280  001412                     __end_of_I2C_PCF8574_Write:
  3281                           	opt stack 0
  3282                           tblptru	equ	0xFF8
  3283                           tblptrh	equ	0xFF7
  3284                           tblptrl	equ	0xFF6
  3285                           tablat	equ	0xFF5
  3286                           prodh	equ	0xFF4
  3287                           prodl	equ	0xFF3
  3288                           indf0	equ	0xFEF
  3289                           postinc0	equ	0xFEE
  3290                           fsr0h	equ	0xFEA
  3291                           fsr0l	equ	0xFE9
  3292                           wreg	equ	0xFE8
  3293                           indf2	equ	0xFDF
  3294                           postinc2	equ	0xFDE
  3295                           postdec2	equ	0xFDD
  3296                           fsr2h	equ	0xFDA
  3297                           fsr2l	equ	0xFD9
  3298                           status	equ	0xFD8
  3299                           
  3300 ;; *************** function _WriteI2C *****************
  3301 ;; Defined at:
  3302 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_writ.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;  data_out        1    wreg     unsigned char 
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  data_out        1    1[COMRAM] unsigned char 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      char 
  3309 ;; Registers used:
  3310 ;;		wreg, status,2, status,0, cstack
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3316 ;;      Params:         0       0       0       0       0       0       0       0       0
  3317 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3318 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3319 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3320 ;;Total ram usage:        1 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    1
  3323 ;; This function calls:
  3324 ;;		_IdleI2C
  3325 ;; This function is called by:
  3326 ;;		_I2C_PCF8574_Write
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text18
  3331  001270                     __ptext18:
  3332                           	opt stack 0
  3333  001270                     _WriteI2C:
  3334                           	opt stack 24
  3335                           
  3336                           ;incstack = 0
  3337                           ;WriteI2C@data_out stored from wreg
  3338  001270  6E02               	movwf	WriteI2C@data_out,c
  3339  001272  C002  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  3340  001276  AEC6               	btfss	4038,7,c	;volatile
  3341  001278  D002               	goto	l1440
  3342  00127A  0EFF               	movlw	255
  3343  00127C  0012               	return	
  3344  00127E                     l1440:
  3345  00127E  50C6               	movf	4038,w,c	;volatile
  3346  001280  0B0F               	andlw	15
  3347  001282  0A08               	xorlw	8
  3348  001284  B4D8               	btfsc	status,2,c
  3349  001286  D00F               	goto	l1458
  3350  001288  50C6               	movf	4038,w,c	;volatile
  3351  00128A  0B0F               	andlw	15
  3352  00128C  0A0B               	xorlw	11
  3353  00128E  B4D8               	btfsc	status,2,c
  3354  001290  D00A               	goto	l1458
  3355  001292  88C6               	bsf	4038,4,c	;volatile
  3356  001294                     l217:
  3357  001294  A69E               	btfss	3998,3,c	;volatile
  3358  001296  D7FE               	goto	l217
  3359  001298  A4C7               	btfss	4039,2,c	;volatile
  3360  00129A  B0C7               	btfsc	4039,0,c	;volatile
  3361  00129C  D002               	goto	l1454
  3362  00129E  0EFE               	movlw	254
  3363  0012A0  0012               	return	
  3364  0012A2                     l1454:
  3365  0012A2  0E00               	movlw	0
  3366  0012A4  0012               	return	
  3367  0012A6                     l1458:
  3368  0012A6  50C6               	movf	4038,w,c	;volatile
  3369  0012A8  0B0F               	andlw	15
  3370  0012AA  0A08               	xorlw	8
  3371  0012AC  B4D8               	btfsc	status,2,c
  3372  0012AE  D005               	goto	l226
  3373  0012B0  50C6               	movf	4038,w,c	;volatile
  3374  0012B2  0B0F               	andlw	15
  3375  0012B4  0A0B               	xorlw	11
  3376  0012B6  A4D8               	btfss	status,2,c
  3377  0012B8  0012               	return	
  3378  0012BA                     l226:
  3379  0012BA  B0C7               	btfsc	4039,0,c	;volatile
  3380  0012BC  D7FE               	goto	l226
  3381  0012BE  EC27  F00A         	call	_IdleI2C	;wreg free
  3382  0012C2  ACC5               	btfss	4037,6,c	;volatile
  3383  0012C4  D002               	goto	l1472
  3384  0012C6  0EFE               	movlw	254
  3385  0012C8  0012               	return	
  3386  0012CA                     l1472:
  3387  0012CA  0E00               	movlw	0
  3388  0012CC  0012               	return	
  3389  0012CE                     __end_of_WriteI2C:
  3390                           	opt stack 0
  3391                           tblptru	equ	0xFF8
  3392                           tblptrh	equ	0xFF7
  3393                           tblptrl	equ	0xFF6
  3394                           tablat	equ	0xFF5
  3395                           prodh	equ	0xFF4
  3396                           prodl	equ	0xFF3
  3397                           indf0	equ	0xFEF
  3398                           postinc0	equ	0xFEE
  3399                           fsr0h	equ	0xFEA
  3400                           fsr0l	equ	0xFE9
  3401                           wreg	equ	0xFE8
  3402                           indf2	equ	0xFDF
  3403                           postinc2	equ	0xFDE
  3404                           postdec2	equ	0xFDD
  3405                           fsr2h	equ	0xFDA
  3406                           fsr2l	equ	0xFD9
  3407                           status	equ	0xFD8
  3408                           
  3409 ;; *************** function _IdleI2C *****************
  3410 ;; Defined at:
  3411 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_idle.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;		None
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, status,0
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3425 ;;      Params:         0       0       0       0       0       0       0       0       0
  3426 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3427 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3428 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3429 ;;Total ram usage:        1 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_WriteI2C
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           	psect	text19
  3439  00144E                     __ptext19:
  3440                           	opt stack 0
  3441  00144E                     _IdleI2C:
  3442                           	opt stack 24
  3443  00144E                     l1426:
  3444  00144E  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
  3445  001452  0E1F               	movlw	31
  3446  001454  1601               	andwf	??_IdleI2C,f,c
  3447  001456  A4D8               	btfss	status,2,c
  3448  001458  D7FA               	goto	l1426
  3449  00145A  A4C7               	btfss	4039,2,c	;volatile
  3450  00145C  0012               	return	
  3451  00145E  D7F7               	goto	l1426
  3452  001460                     __end_of_IdleI2C:
  3453                           	opt stack 0
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           prodh	equ	0xFF4
  3459                           prodl	equ	0xFF3
  3460                           indf0	equ	0xFEF
  3461                           postinc0	equ	0xFEE
  3462                           fsr0h	equ	0xFEA
  3463                           fsr0l	equ	0xFE9
  3464                           wreg	equ	0xFE8
  3465                           indf2	equ	0xFDF
  3466                           postinc2	equ	0xFDE
  3467                           postdec2	equ	0xFDD
  3468                           fsr2h	equ	0xFDA
  3469                           fsr2l	equ	0xFD9
  3470                           status	equ	0xFD8
  3471                           
  3472 ;; *************** function _KP_init *****************
  3473 ;; Defined at:
  3474 ;;		line 6 in file "KeyPad Library.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3488 ;;      Params:         0       0       0       0       0       0       0       0       0
  3489 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3490 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3491 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; This function calls:
  3495 ;;		Nothing
  3496 ;; This function is called by:
  3497 ;;		_main
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text20
  3502  001460                     __ptext20:
  3503                           	opt stack 0
  3504  001460                     _KP_init:
  3505                           	opt stack 30
  3506                           
  3507                           ;KeyPad Library.c: 8: TRISD = 0x0F;
  3508                           
  3509                           ;incstack = 0
  3510  001460  0E0F               	movlw	15
  3511  001462  6E95               	movwf	3989,c	;volatile
  3512                           
  3513                           ;KeyPad Library.c: 9: LATD = 0x00;
  3514  001464  0E00               	movlw	0
  3515  001466  6E8C               	movwf	3980,c	;volatile
  3516  001468  0012               	return		;funcret
  3517  00146A                     __end_of_KP_init:
  3518                           	opt stack 0
  3519                           tblptru	equ	0xFF8
  3520                           tblptrh	equ	0xFF7
  3521                           tblptrl	equ	0xFF6
  3522                           tablat	equ	0xFF5
  3523                           prodh	equ	0xFF4
  3524                           prodl	equ	0xFF3
  3525                           indf0	equ	0xFEF
  3526                           postinc0	equ	0xFEE
  3527                           fsr0h	equ	0xFEA
  3528                           fsr0l	equ	0xFE9
  3529                           wreg	equ	0xFE8
  3530                           indf2	equ	0xFDF
  3531                           postinc2	equ	0xFDE
  3532                           postdec2	equ	0xFDD
  3533                           fsr2h	equ	0xFDA
  3534                           fsr2l	equ	0xFD9
  3535                           status	equ	0xFD8
  3536                           tblptru	equ	0xFF8
  3537                           tblptrh	equ	0xFF7
  3538                           tblptrl	equ	0xFF6
  3539                           tablat	equ	0xFF5
  3540                           prodh	equ	0xFF4
  3541                           prodl	equ	0xFF3
  3542                           indf0	equ	0xFEF
  3543                           postinc0	equ	0xFEE
  3544                           fsr0h	equ	0xFEA
  3545                           fsr0l	equ	0xFE9
  3546                           wreg	equ	0xFE8
  3547                           indf2	equ	0xFDF
  3548                           postinc2	equ	0xFDE
  3549                           postdec2	equ	0xFDD
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554                           	psect	rparam
  3555  0000                     tblptru	equ	0xFF8
  3556                           tblptrh	equ	0xFF7
  3557                           tblptrl	equ	0xFF6
  3558                           tablat	equ	0xFF5
  3559                           prodh	equ	0xFF4
  3560                           prodl	equ	0xFF3
  3561                           indf0	equ	0xFEF
  3562                           postinc0	equ	0xFEE
  3563                           fsr0h	equ	0xFEA
  3564                           fsr0l	equ	0xFE9
  3565                           wreg	equ	0xFE8
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           fsr2h	equ	0xFDA
  3570                           fsr2l	equ	0xFD9
  3571                           status	equ	0xFD8


Data Sizes:
    Strings     87
    Constant    40
    Data        1
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     52      55
    BANK0           160    112     112
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> keyNumber@arreglo(COMRAM[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_10(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> riksFactors@text(BANK0[80]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    LCD_puts@s	PTR unsigned char  size(2) Largest target is 80
		 -> riksFactors@text(BANK0[80]), STR_9(CODE[25]), STR_8(CODE[20]), STR_7(CODE[25]), 
		 -> STR_6(CODE[25]), STR_5(CODE[18]), STR_4(CODE[25]), STR_3(CODE[12]), 
		 -> STR_2(CODE[25]), STR_1(CODE[25]), keyNumber@arreglo(COMRAM[20]), 


Critical Paths under _main in COMRAM

    _riksFactors->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    _keyNumber->_LCD_goto
    _keyNumber->_LCD_puts
    _atoi->___wmul
    _LCD_puts->_LCD_putch
    _LCD_putch->_I2C_PCF8574_Write
    _LCD_goto->_LCD_putcmd
    _KP_Readbutton->_KP_scan
    _LCD_init->_LCD_putcmd
    _LCD_putcmd->_I2C_PCF8574_Write
    _I2C_PCF8574_Write->_WriteI2C
    _WriteI2C->_IdleI2C

Critical Paths under _main in BANK0

    _main->_riksFactors

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   20617
                                             50 COMRAM     2     2      0
                            _KP_init
                           _LCD_init
                         _LCD_putcmd
                            _OpenI2C
                        _riksFactors
 ---------------------------------------------------------------------------------
 (1) _riksFactors                                        112   112      0   14808
                                              0 BANK0    112   112      0
                           _LCD_goto
                           _LCD_puts
                          _keyNumber
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             37    21     16    1139
                                             22 COMRAM    28    12     16
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     287
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _keyNumber                                           33    29      4    7302
                                             14 COMRAM    33    29      4
                      _KP_Readbutton
                           _LCD_goto
                           _LCD_puts
                               _atoi
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2     647
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _LCD_puts                                             5     3      2    1709
                                              9 COMRAM     5     3      2
                          _LCD_putch
 ---------------------------------------------------------------------------------
 (4) _LCD_putch                                            3     2      1     873
                                              6 COMRAM     3     2      1
                  _I2C_PCF8574_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_goto                                             3     1      2    4529
                                             11 COMRAM     3     1      2
                         _LCD_putcmd
 ---------------------------------------------------------------------------------
 (3) _KP_Readbutton                                        1     1      0     135
                                              8 COMRAM     1     1      0
                            _KP_scan
 ---------------------------------------------------------------------------------
 (4) _KP_scan                                              8     6      2      95
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _OpenI2C                                              2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0    2949
                                             11 COMRAM     2     2      0
                         _LCD_putcmd
 ---------------------------------------------------------------------------------
 (4) _LCD_putcmd                                           5     3      2    2751
                                              6 COMRAM     5     3      2
                  _I2C_PCF8574_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_PCF8574_Write                                    4     3      1     587
                                              2 COMRAM     4     3      1
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (6) _WriteI2C                                             1     1      0      22
                                              1 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (7) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _KP_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KP_init
   _LCD_init
     _LCD_putcmd
       _I2C_PCF8574_Write
         _WriteI2C
           _IdleI2C
   _LCD_putcmd
     _I2C_PCF8574_Write
       _WriteI2C
         _IdleI2C
   _OpenI2C
   _riksFactors
     _LCD_goto
       _LCD_putcmd
         _I2C_PCF8574_Write
           _WriteI2C
             _IdleI2C
     _LCD_puts
       _LCD_putch
         _I2C_PCF8574_Write
           _WriteI2C
             _IdleI2C
     _keyNumber
       _KP_Readbutton
         _KP_scan
       _LCD_goto
         _LCD_putcmd
           _I2C_PCF8574_Write
             _WriteI2C
               _IdleI2C
       _LCD_puts
         _LCD_putch
           _I2C_PCF8574_Write
             _WriteI2C
               _IdleI2C
       _atoi
         ___wmul
         _isdigit
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      50       7       31.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      70       5       70.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     34      37       1       57.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F7      20        0.0%
DATA                 0      0      F7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun May 19 17:40:09 2019

               _SSPSTATbits 000FC7                          l32 0E4E                          l24 0DFE  
                        l19 0DDA                          l28 0E26                          l70 13F6  
                        l74 140C         ___wmul@multiplicand 0003                         l217 1294  
                       l226 12BA                         l403 0F48                         l175 0B08  
                       l600 111E                         l610 11FE                         u884 0DC0  
                       u885 0DBC                         wreg 000FE8                 ?_LCD_putcmd 0007  
          KP_Readbutton@key 0009                        l1440 127E                        l1504 0DEC  
                      l1426 144E                        l1514 0E14                        l1602 0C78  
                      l1524 0E3C                        l1540 0E72                        l1620 0CAE  
                      l1700 116A                        l1454 12A2                        l1534 0E64  
                      l1614 0C9C                        l1702 117C                        l1710 121C  
                      l1472 12CA                        l1632 0CD2                        l1608 0C8A  
                      l1720 0E8A                        l1458 12A6                        l1650 0D08  
                      l1626 0CC0                        l1706 118E                        l1714 1248  
                      l1730 0ECA                        l1492 0DB0                        l1644 0CF6  
                      l1558 1318                        l1662 0D2C                        l1638 0CE4  
                      l1590 0C56                        l1734 0EDC                        l1718 0E86  
                      l1806 0FC4                        l1750 10D0                        l1680 0D62  
                      l1656 0D1A                        l1584 1428                        l1736 0F12  
                      l1752 10DC                        l1832 0AE0                        l1824 0AD0  
                      l1674 0D50                        l1738 0F16                        l1762 1110  
                      l1754 10E0                        l1770 11BC                        l1826 0AD6  
                      l1818 0AB6                        l1668 0D3E                        l1596 0C66  
                      l1772 11C8                        l1844 0B50                        l1828 0ADA  
                      l1686 0D74                        l1694 1134                        l1774 11CC  
                      l1838 0B28                        l1696 1146                        l1784 0F62  
                      l1864 0C1A                        l1856 0B88                        l1698 1158  
                      l1794 0F84                        l1778 11F0                        l1858 0B94  
                      l1866 0C2A                        l1868 0C42                        l1964 139A  
                      STR_1 0829                        STR_2 0829                        STR_3 0868  
                      STR_4 0829                        STR_5 0856                        STR_6 0829  
                      STR_7 0829                        STR_8 0842                        STR_9 0829  
                      u1200 1268                        u1207 125E                        u1190 123C  
                      _LATD 000F8C                        u1507 131E                        u1197 1232  
                      u1447 0DCE                        u1457 0DF2                        u1467 0E1A  
                      u1477 0E42                        u1487 1018                        u1497 1034  
               main@counter 0033            LCD_putch@lcddata 0009                        _atoi 0E84  
                      _main 1370  __size_of_I2C_PCF8574_Write 0020                        _text 0100  
                      fsr0h 000FEA                        indf0 000FEF                        fsr2h 000FDA  
                      fsr0l 000FE9                        indf2 000FDF                        fsr2l 000FD9  
           __end_of_KP_init 146A             __end_of_KP_scan 0E84                        prodh 000FF4  
                      prodl 000FF3                        start 0000             __end_of_IdleI2C 1460  
            LCD_goto@column 000D          __size_of_LCD_putch 0046                ___param_bank 000000  
         riksFactors@gender 00B0             __end_of_OpenI2C 144E            __end_of_LCD_init 10AE  
          __end_of_LCD_goto 11AA            __end_of_LCD_puts 1270                       ?_atoi 0007  
                     ?_main 0001                       STR_10 0874             __end_of___lldiv 1130  
           __end_of___llmod 1210          I2C_PCF8574_Write@S 0005                       _TRISD 000F95  
           __end_of_dpowers 0829             __end_of_isdigit 1430                       atoi@a 000C  
                     atoi@s 0007                       tablat 000FF5                       status 000FD8  
           __end_of_sprintf 0C50             __initialization 13A0                 LCD_goto@row 000C  
       __size_of_LCD_putcmd 005C                __end_of_atoi 0F52                __end_of_main 13A0  
                    ??_atoi 0009                      ??_main 0033          riksFactors@parents 00B8  
             __activetblptr 000002           __end_of_LCD_putch 1370            ___llmod@dividend 000E  
          __end_of_WriteI2C 12CE                   ??_KP_init 0001                   ??_KP_scan 0003  
              ?_riksFactors 0001                 OpenI2C@slew 0001                   ??_IdleI2C 0001  
                    _SSPBUF 000FC9                   ??_OpenI2C 0002                KP_scan@press 0005  
                    ___wmul 13CC                   ??___lldiv 0009                   ??___llmod 0016  
         LCD_putcmd@cmdtype 0008                      _keynum 0035           LCD_putcmd@lcddata 000B  
                    clear_0 13B8                __pdataCOMRAM 0037                   ??_isdigit 0001  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8              keyNumber@tecla 002D                   ??_sprintf 0027  
                __accesstop 0060     __end_of__initialization 13C2                   ?_LCD_init 0001  
                 ?_LCD_goto 000C                   ?_LCD_puts 000A               ___rparam_used 000001  
              LCD_init@addr 000D                LCD_goto@addr 000E             riksFactors@edad 00C4  
            __pcstackCOMRAM 0001             riksFactors@peso 00CC             riksFactors@text 0060  
            LCD_putcmd@addr 000A              LCD_putcmd@data 0007                   LCD_puts@i 000C  
                 LCD_puts@s 000A                ??_LCD_putcmd 0009         riksFactors@estatura 00C8  
                __pbssBANK1 0100          __size_of_keyNumber 00BE                LCD_puts@addr 000E  
                ??_LCD_init 000C                  ??_LCD_goto 000E                  ??_LCD_puts 000C  
     __end_of_KP_Readbutton 0D88          __end_of_LCD_putcmd 132A                     ?___wmul 0001  
       riksFactors@systolic 00BC                   ?_WriteI2C 0001                     _SSPCON1 000FC6  
                   _SSPCON2 000FC5                     _SSPSTAT 000FC7                     _KP_init 1460  
                   _KP_scan 0D88                     _IdleI2C 144E        __size_of_riksFactors 022A  
                   _OpenI2C 1430                     __Hparam 0000                     __Lparam 0000  
                   ___lldiv 10AE             __size_of___wmul 0026                     ___llmod 11AA  
              __psmallconst 0800                     __pcinit 13A0                  ??_WriteI2C 0002  
                   __ramtop 0800                     __ptext0 1370                     __ptext1 0882  
                   __ptext2 0AAC                     __ptext3 11AA                     __ptext4 10AE  
                   __ptext5 0F52                     __ptext6 0E84                     __ptext7 1412  
                   __ptext8 13CC           __end_of_keyNumber 1010                     __ptext9 1210  
                   _dpowers 0801                     _isdigit 1412              _LCD_01_ADDRESS 0037  
                   _sprintf 0AAC        end_of_initialization 13C2                   _LCD_putch 132A  
             __Lmediumconst 0000             ___lldiv@divisor 0005             ___lldiv@counter 000D  
           keyNumber@number 0027                     postdec2 000FDD      I2C_PCF8574_Write@dummy 0004  
                   postinc0 000FEE                     postinc2 000FDE      I2C_PCF8574_Write@value 0003  
                 _PORTDbits 000F83                   _TRISBbits 000F93                  ?_LCD_putch 0007  
         __size_of_LCD_init 009E           __size_of_LCD_goto 007A           __size_of_LCD_puts 0060  
          riksFactors@smoke 00B4              __end_of___wmul 13F2               __pidataCOMRAM 146A  
       start_initialization 13A0        riksFactors@diastolic 00C0            WriteI2C@data_out 0002  
                keyNumber@i 002E             ___llmod@divisor 0012             ___llmod@counter 0016  
                  ??___wmul 0005           __size_of_WriteI2C 005E                 __pbssCOMRAM 0035  
             LCD_putch@addr 0008               LCD_putch@data 0007               __pcstackBANK0 0060  
                  ?_KP_init 0001                    ?_KP_scan 0001                 ??_LCD_putch 0008  
                  ?_IdleI2C 0001                 sprintf@flag 0029                 sprintf@prec 002A  
                  ?_OpenI2C 0001                    ?___lldiv 0001                    ?___llmod 000E  
               __smallconst 0800                    ?_isdigit 0001                   _keyNumber 0F52  
    __size_of_KP_Readbutton 0138                    ?_sprintf 0017               ??_riksFactors 0033  
            ___wmul@product 0005                    _LCD_init 1010                    _LCD_goto 1130  
                  _LCD_puts 1210                    _PIR1bits 000F9E       I2C_PCF8574_Write@addr 0006  
         ___wmul@multiplier 0001                  ?_keyNumber 000F            __size_of_KP_init 000A  
          __size_of_KP_scan 00FC            OpenI2C@sync_mode 0002            __size_of_IdleI2C 0012  
       __end_of_riksFactors 0AAC                    __Hrparam 0000            __size_of_OpenI2C 001E  
                  __Lrparam 0000                  KP_scan@row 0007               _KP_Readbutton 0C50  
          __size_of___lldiv 0082            __size_of___llmod 0066                    _WriteI2C 1270  
               _isdigit$828 0002                  sprintf@val 002C            __size_of_isdigit 001E  
                  __ptext10 132A                    __ptext11 1130                    __ptext20 1460  
                  __ptext12 0C50                    __ptext13 0D88                    __ptext14 1430  
                  __ptext15 1010                    __ptext16 12CE                    __ptext17 13F2  
                  __ptext18 1270                    __ptext19 144E            __size_of_sprintf 01A4  
             __size_of_atoi 00CE               __size_of_main 0030           keyNumber@contador 002B  
         _I2C_PCF8574_Write 13F2              ?_KP_Readbutton 0001          ?_I2C_PCF8574_Write 0003  
                  atoi@sign 000B         ??_I2C_PCF8574_Write 0004                 ??_keyNumber 0013  
                _LCD_putcmd 12CE                    isdigit@c 0003                 _riksFactors 0882  
                 sprintf@ap 0030                   sprintf@sp 0017            ___lldiv@dividend 0001  
 __end_of_I2C_PCF8574_Write 1412            keyNumber@arreglo 0013                    sprintf@c 0032  
                  sprintf@f 0019            ___lldiv@quotient 0009                 _SSPCON1bits 000FC6  
               _SSPCON2bits 000FC5             ??_KP_Readbutton 0009  
