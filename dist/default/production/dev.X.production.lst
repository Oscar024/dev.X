

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun May 19 17:44:42 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36  0000                     
    37                           ; Version 1.41
    38                           ; Generated 25/01/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4550 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  0014FC                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for _LCD_01_ADDRESS
    77  0014FC  40                 	db	64
    78                           
    79                           	psect	smallconst
    80  000800                     __psmallconst:
    81                           	opt stack 0
    82  000800  00                 	db	0
    83  000801                     _dpowers:
    84                           	opt stack 0
    85  000801  0001               	dw	1
    86  000803  0000               	dw	0
    87  000805  000A               	dw	10
    88  000807  0000               	dw	0
    89  000809  0064               	dw	100
    90  00080B  0000               	dw	0
    91  00080D  03E8               	dw	1000
    92  00080F  0000               	dw	0
    93  000811  2710               	dw	10000
    94  000813  0000               	dw	0
    95  000815  86A0               	dw	34464
    96  000817  0001               	dw	1
    97  000819  4240               	dw	16960
    98  00081B  000F               	dw	15
    99  00081D  9680               	dw	38528
   100  00081F  0098               	dw	152
   101  000821  E100               	dw	57600
   102  000823  05F5               	dw	1525
   103  000825  CA00               	dw	51712
   104  000827  3B9A               	dw	15258
   105  000829                     __end_of_dpowers:
   106                           	opt stack 0
   107  0000                     _SSPSTATbits	set	4039
   108  0000                     _PIR1bits	set	3998
   109  0000                     _TRISBbits	set	3987
   110  0000                     _SSPCON2	set	4037
   111  0000                     _SSPCON1	set	4038
   112  0000                     _SSPSTAT	set	4039
   113  0000                     _SSPCON1bits	set	4038
   114  0000                     _SSPBUF	set	4041
   115  0000                     _SSPCON2bits	set	4037
   116  0000                     _PORTDbits	set	3971
   117  0000                     _LATD	set	3980
   118  0000                     _TRISD	set	3989
   119  000829                     STR_1:
   120  000829  20                 	db	32
   121  00082A  20                 	db	32
   122  00082B  20                 	db	32
   123  00082C  20                 	db	32
   124  00082D  20                 	db	32
   125  00082E  20                 	db	32
   126  00082F  20                 	db	32
   127  000830  20                 	db	32
   128  000831  20                 	db	32
   129  000832  20                 	db	32
   130  000833  20                 	db	32
   131  000834  20                 	db	32
   132  000835  20                 	db	32
   133  000836  20                 	db	32
   134  000837  20                 	db	32
   135  000838  20                 	db	32
   136  000839  20                 	db	32
   137  00083A  20                 	db	32
   138  00083B  20                 	db	32
   139  00083C  20                 	db	32
   140  00083D  20                 	db	32
   141  00083E  20                 	db	32
   142  00083F  20                 	db	32
   143  000840  20                 	db	32
   144  000841  00                 	db	0
   145  000842                     STR_11:
   146  000842  54                 	db	84	;'T'
   147  000843  65                 	db	101	;'e'
   148  000844  63                 	db	99	;'c'
   149  000845  6C                 	db	108	;'l'
   150  000846  65                 	db	101	;'e'
   151  000847  65                 	db	101	;'e'
   152  000848  20                 	db	32
   153  000849  67                 	db	103	;'g'
   154  00084A  65                 	db	101	;'e'
   155  00084B  6E                 	db	110	;'n'
   156  00084C  64                 	db	100	;'d'
   157  00084D  65                 	db	101	;'e'
   158  00084E  72                 	db	114	;'r'
   159  00084F  20                 	db	32
   160  000850  30                 	db	48	;'0'
   161  000851  20                 	db	32
   162  000852  48                 	db	72	;'H'
   163  000853  20                 	db	32
   164  000854  31                 	db	49	;'1'
   165  000855  20                 	db	32
   166  000856  4D                 	db	77	;'M'
   167  000857  00                 	db	0
   168  000858                     STR_8:
   169  000858  54                 	db	84	;'T'
   170  000859  65                 	db	101	;'e'
   171  00085A  63                 	db	99	;'c'
   172  00085B  6C                 	db	108	;'l'
   173  00085C  65                 	db	101	;'e'
   174  00085D  65                 	db	101	;'e'
   175  00085E  20                 	db	32
   176  00085F  65                 	db	101	;'e'
   177  000860  73                 	db	115	;'s'
   178  000861  74                 	db	116	;'t'
   179  000862  61                 	db	97	;'a'
   180  000863  74                 	db	116	;'t'
   181  000864  75                 	db	117	;'u'
   182  000865  72                 	db	114	;'r'
   183  000866  61                 	db	97	;'a'
   184  000867  28                 	db	40
   185  000868  63                 	db	99	;'c'
   186  000869  6D                 	db	109	;'m'
   187  00086A  29                 	db	41
   188  00086B  00                 	db	0
   189  00086C                     STR_5:
   190  00086C  54                 	db	84	;'T'
   191  00086D  65                 	db	101	;'e'
   192  00086E  63                 	db	99	;'c'
   193  00086F  6C                 	db	108	;'l'
   194  000870  65                 	db	101	;'e'
   195  000871  65                 	db	101	;'e'
   196  000872  20                 	db	32
   197  000873  70                 	db	112	;'p'
   198  000874  65                 	db	101	;'e'
   199  000875  73                 	db	115	;'s'
   200  000876  6F                 	db	111	;'o'
   201  000877  20                 	db	32
   202  000878  65                 	db	101	;'e'
   203  000879  6E                 	db	110	;'n'
   204  00087A  20                 	db	32
   205  00087B  6B                 	db	107	;'k'
   206  00087C  67                 	db	103	;'g'
   207  00087D  00                 	db	0
   208  00087E                     STR_13:
   209  00087E  25                 	db	37
   210  00087F  6C                 	db	108	;'l'
   211  000880  75                 	db	117	;'u'
   212  000881  2C                 	db	44
   213  000882  25                 	db	37
   214  000883  6C                 	db	108	;'l'
   215  000884  75                 	db	117	;'u'
   216  000885  2C                 	db	44
   217  000886  25                 	db	37
   218  000887  6C                 	db	108	;'l'
   219  000888  75                 	db	117	;'u'
   220  000889  2C                 	db	44
   221  00088A  25                 	db	37
   222  00088B  6C                 	db	108	;'l'
   223  00088C  75                 	db	117	;'u'
   224  00088D  00                 	db	0
   225  00088E                     STR_3:
   226  00088E  54                 	db	84	;'T'
   227  00088F  65                 	db	101	;'e'
   228  000890  63                 	db	99	;'c'
   229  000891  6C                 	db	108	;'l'
   230  000892  65                 	db	101	;'e'
   231  000893  65                 	db	101	;'e'
   232  000894  20                 	db	32
   233  000895  65                 	db	101	;'e'
   234  000896  64                 	db	100	;'d'
   235  000897  61                 	db	97	;'a'
   236  000898  64                 	db	100	;'d'
   237  000899  00                 	db	0
   238  00089A  00                 	db	0	; dummy byte at the end
   239  0000                     
   240                           ; #config settings
   241                           
   242                           	psect	cinit
   243  001432                     __pcinit:
   244                           	opt stack 0
   245  001432                     start_initialization:
   246                           	opt stack 0
   247  001432                     __initialization:
   248                           	opt stack 0
   249                           
   250                           ; Initialize objects allocated to COMRAM (1 bytes)
   251                           ; load TBLPTR registers with __pidataCOMRAM
   252  001432  0EFC               	movlw	low __pidataCOMRAM
   253  001434  6EF6               	movwf	tblptrl,c
   254  001436  0E14               	movlw	high __pidataCOMRAM
   255  001438  6EF7               	movwf	tblptrh,c
   256  00143A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   257  00143C  6EF8               	movwf	tblptru,c
   258  00143E  0009               	tblrd		*+	;fetch initializer
   259  001440  CFF5 F03B          	movff	tablat,__pdataCOMRAM
   260                           
   261                           ; Clear objects allocated to BANK1 (80 bytes)
   262  001444  EE01  F000         	lfsr	0,__pbssBANK1
   263  001448  0E50               	movlw	80
   264  00144A                     clear_0:
   265  00144A  6AEE               	clrf	postinc0,c
   266  00144C  06E8               	decf	wreg,f,c
   267  00144E  E1FD               	bnz	clear_0
   268                           
   269                           ; Clear objects allocated to COMRAM (2 bytes)
   270  001450  6A3A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   271  001452  6A39               	clrf	__pbssCOMRAM& (0+255),c
   272  001454                     end_of_initialization:
   273                           	opt stack 0
   274  001454                     __end_of__initialization:
   275                           	opt stack 0
   276  001454  0E00               	movlw	low (__Lmediumconst shr (0+16))
   277  001456  6EF8               	movwf	tblptru,c
   278  001458  0100               	movlb	0
   279  00145A  EF01  F00A         	goto	_main	;jump to C main() function
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           tblptrl	equ	0xFF6
   283                           tablat	equ	0xFF5
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	bssCOMRAM
   288  000039                     __pbssCOMRAM:
   289                           	opt stack 0
   290  000039                     _keynum:
   291                           	opt stack 0
   292  000039                     	ds	2
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           postinc0	equ	0xFEE
   298                           wreg	equ	0xFE8
   299                           
   300                           	psect	dataCOMRAM
   301  00003B                     __pdataCOMRAM:
   302                           	opt stack 0
   303  00003B                     _LCD_01_ADDRESS:
   304                           	opt stack 0
   305  00003B                     	ds	1
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           
   313                           	psect	bssBANK1
   314  000100                     __pbssBANK1:
   315                           	opt stack 0
   316  000100                     _text:
   317                           	opt stack 0
   318  000100                     	ds	80
   319                           tblptru	equ	0xFF8
   320                           tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           
   326                           	psect	cstackBANK0
   327  000060                     __pcstackBANK0:
   328                           	opt stack 0
   329  000060                     riksFactors@text:
   330                           	opt stack 0
   331                           
   332                           ; 80 bytes @ 0x0
   333  000060                     	ds	80
   334  0000B0                     riksFactors@smoke:
   335                           	opt stack 0
   336                           
   337                           ; 4 bytes @ 0x50
   338  0000B0                     	ds	4
   339  0000B4                     riksFactors@parents:
   340                           	opt stack 0
   341                           
   342                           ; 4 bytes @ 0x54
   343  0000B4                     	ds	4
   344  0000B8                     riksFactors@systolic:
   345                           	opt stack 0
   346                           
   347                           ; 4 bytes @ 0x58
   348  0000B8                     	ds	4
   349  0000BC                     riksFactors@diastolic:
   350                           	opt stack 0
   351                           
   352                           ; 4 bytes @ 0x5C
   353  0000BC                     	ds	4
   354  0000C0                     riksFactors@edad:
   355                           	opt stack 0
   356                           
   357                           ; 4 bytes @ 0x60
   358  0000C0                     	ds	4
   359  0000C4                     riksFactors@estatura:
   360                           	opt stack 0
   361                           
   362                           ; 4 bytes @ 0x64
   363  0000C4                     	ds	4
   364  0000C8                     riksFactors@peso:
   365                           	opt stack 0
   366                           
   367                           ; 4 bytes @ 0x68
   368  0000C8                     	ds	4
   369  0000CC                     riksFactors@gender:
   370                           	opt stack 0
   371                           
   372                           ; 4 bytes @ 0x6C
   373  0000CC                     	ds	4
   374                           tblptru	equ	0xFF8
   375                           tblptrh	equ	0xFF7
   376                           tblptrl	equ	0xFF6
   377                           tablat	equ	0xFF5
   378                           postinc0	equ	0xFEE
   379                           wreg	equ	0xFE8
   380                           
   381                           	psect	cstackCOMRAM
   382  000001                     __pcstackCOMRAM:
   383                           	opt stack 0
   384  000001                     ??_IdleI2C:
   385  000001                     ??_isdigit:
   386  000001                     ?_KP_scan:
   387                           	opt stack 0
   388  000001                     ?___wmul:
   389                           	opt stack 0
   390  000001                     ?___lldiv:
   391                           	opt stack 0
   392  000001                     OpenI2C@slew:
   393                           	opt stack 0
   394  000001                     ___wmul@multiplier:
   395                           	opt stack 0
   396  000001                     ___lldiv@dividend:
   397                           	opt stack 0
   398                           
   399                           ; 4 bytes @ 0x0
   400  000001                     	ds	1
   401  000002                     OpenI2C@sync_mode:
   402                           	opt stack 0
   403  000002                     WriteI2C@data_out:
   404                           	opt stack 0
   405  000002                     _isdigit$831:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x1
   409  000002                     	ds	1
   410  000003                     ??_KP_scan:
   411  000003                     I2C_PCF8574_Write@value:
   412                           	opt stack 0
   413  000003                     isdigit@c:
   414                           	opt stack 0
   415  000003                     ___wmul@multiplicand:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x2
   419  000003                     	ds	1
   420  000004                     I2C_PCF8574_Write@dummy:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x3
   424  000004                     	ds	1
   425  000005                     I2C_PCF8574_Write@S:
   426                           	opt stack 0
   427  000005                     KP_scan@press:
   428                           	opt stack 0
   429  000005                     ___wmul@product:
   430                           	opt stack 0
   431  000005                     ___lldiv@divisor:
   432                           	opt stack 0
   433                           
   434                           ; 4 bytes @ 0x4
   435  000005                     	ds	1
   436  000006                     I2C_PCF8574_Write@addr:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x5
   440  000006                     	ds	1
   441  000007                     ?_atoi:
   442                           	opt stack 0
   443  000007                     LCD_putcmd@data:
   444                           	opt stack 0
   445  000007                     LCD_putch@data:
   446                           	opt stack 0
   447  000007                     KP_scan@row:
   448                           	opt stack 0
   449  000007                     atoi@s:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x6
   453  000007                     	ds	1
   454  000008                     LCD_putcmd@cmdtype:
   455                           	opt stack 0
   456  000008                     LCD_putch@addr:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x7
   460  000008                     	ds	1
   461  000009                     ??_atoi:
   462  000009                     ??_LCD_putcmd:
   463  000009                     KP_Readbutton@key:
   464                           	opt stack 0
   465  000009                     LCD_putch@lcddata:
   466                           	opt stack 0
   467  000009                     ___lldiv@quotient:
   468                           	opt stack 0
   469                           
   470                           ; 4 bytes @ 0x8
   471  000009                     	ds	1
   472  00000A                     LCD_putcmd@addr:
   473                           	opt stack 0
   474  00000A                     LCD_puts@s:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x9
   478  00000A                     	ds	1
   479  00000B                     LCD_putcmd@lcddata:
   480                           	opt stack 0
   481  00000B                     atoi@sign:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0xA
   485  00000B                     	ds	1
   486  00000C                     ??_LCD_init:
   487  00000C                     LCD_goto@row:
   488                           	opt stack 0
   489  00000C                     LCD_puts@i:
   490                           	opt stack 0
   491  00000C                     atoi@a:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0xB
   495  00000C                     	ds	1
   496  00000D                     LCD_init@addr:
   497                           	opt stack 0
   498  00000D                     LCD_goto@column:
   499                           	opt stack 0
   500  00000D                     ___lldiv@counter:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0xC
   504  00000D                     	ds	1
   505  00000E                     ?___llmod:
   506                           	opt stack 0
   507  00000E                     LCD_goto@addr:
   508                           	opt stack 0
   509  00000E                     LCD_puts@addr:
   510                           	opt stack 0
   511  00000E                     ___llmod@dividend:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0xD
   515  00000E                     	ds	1
   516  00000F                     ?_keyNumber:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0xE
   520  00000F                     	ds	3
   521  000012                     ___llmod@divisor:
   522                           	opt stack 0
   523                           
   524                           ; 4 bytes @ 0x11
   525  000012                     	ds	1
   526  000013                     keyNumber@arreglo:
   527                           	opt stack 0
   528                           
   529                           ; 20 bytes @ 0x12
   530  000013                     	ds	3
   531  000016                     ___llmod@counter:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x15
   535  000016                     	ds	1
   536  000017                     ?_sprintf:
   537                           	opt stack 0
   538  000017                     sprintf@sp:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x16
   542  000017                     	ds	2
   543  000019                     sprintf@f:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x18
   547  000019                     	ds	14
   548  000027                     keyNumber@number:
   549                           	opt stack 0
   550                           
   551                           ; 4 bytes @ 0x26
   552  000027                     	ds	4
   553  00002B                     ??_sprintf:
   554  00002B                     keyNumber@contador:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x2A
   558  00002B                     	ds	2
   559  00002D                     keyNumber@tecla:
   560                           	opt stack 0
   561  00002D                     sprintf@flag:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x2C
   565  00002D                     	ds	1
   566  00002E                     keyNumber@i:
   567                           	opt stack 0
   568  00002E                     sprintf@prec:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x2D
   572  00002E                     	ds	2
   573  000030                     sprintf@val:
   574                           	opt stack 0
   575                           
   576                           ; 4 bytes @ 0x2F
   577  000030                     	ds	4
   578  000034                     sprintf@ap:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x33
   582  000034                     	ds	2
   583  000036                     sprintf@c:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x35
   587  000036                     	ds	1
   588  000037                     main@counter:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x36
   592  000037                     	ds	2
   593                           tblptru	equ	0xFF8
   594                           tblptrh	equ	0xFF7
   595                           tblptrl	equ	0xFF6
   596                           tablat	equ	0xFF5
   597                           postinc0	equ	0xFEE
   598                           wreg	equ	0xFE8
   599                           
   600 ;;
   601 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   602 ;;
   603 ;; *************** function _main *****************
   604 ;; Defined at:
   605 ;;		line 21 in file "main.c"
   606 ;; Parameters:    Size  Location     Type
   607 ;;		None
   608 ;; Auto vars:     Size  Location     Type
   609 ;;  counter         2   54[COMRAM] unsigned int 
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      void 
   612 ;; Registers used:
   613 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   619 ;;      Params:         0       0       0       0       0       0       0       0       0
   620 ;;      Locals:         2       0       0       0       0       0       0       0       0
   621 ;;      Temps:          0       0       0       0       0       0       0       0       0
   622 ;;      Totals:         2       0       0       0       0       0       0       0       0
   623 ;;Total ram usage:        2 bytes
   624 ;; Hardware stack levels required when called:    7
   625 ;; This function calls:
   626 ;;		_KP_init
   627 ;;		_LCD_init
   628 ;;		_LCD_putcmd
   629 ;;		_OpenI2C
   630 ;;		_riksFactors
   631 ;; This function is called by:
   632 ;;		Startup code after reset
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text0
   637  001402                     __ptext0:
   638                           	opt stack 0
   639  001402                     _main:
   640                           	opt stack 24
   641                           
   642                           ;main.c: 25: OpenI2C(0b00001000, 0b10000000);
   643                           
   644                           ;incstack = 0
   645  001402  0E80               	movlw	128
   646  001404  6E01               	movwf	OpenI2C@slew,c
   647  001406  0E08               	movlw	8
   648  001408  EC61  F00A         	call	_OpenI2C
   649                           
   650                           ;main.c: 26: LCD_init(LCD_01_ADDRESS);
   651  00140C  503B               	movf	_LCD_01_ADDRESS,w,c
   652  00140E  EC51  F008         	call	_LCD_init
   653                           
   654                           ;main.c: 27: KP_init();
   655  001412  EC79  F00A         	call	_KP_init	;wreg free
   656                           
   657                           ;main.c: 30: unsigned int counter = 0;
   658  001416  0E00               	movlw	0
   659  001418  6E38               	movwf	main@counter+1,c
   660  00141A  0E00               	movlw	0
   661  00141C  6E37               	movwf	main@counter,c
   662                           
   663                           ;main.c: 31: LCD_putcmd(LCD_01_ADDRESS, 0x01,1);
   664  00141E  0E01               	movlw	1
   665  001420  6E07               	movwf	LCD_putcmd@data,c
   666  001422  0E01               	movlw	1
   667  001424  6E08               	movwf	LCD_putcmd@cmdtype,c
   668  001426  503B               	movf	_LCD_01_ADDRESS,w,c
   669  001428  ECB0  F009         	call	_LCD_putcmd
   670  00142C                     l1992:
   671                           
   672                           ;main.c: 34: riksFactors();
   673  00142C  EC4E  F004         	call	_riksFactors	;wreg free
   674  001430  D7FD               	goto	l1992
   675  001432                     __end_of_main:
   676                           	opt stack 0
   677                           tblptru	equ	0xFF8
   678                           tblptrh	equ	0xFF7
   679                           tblptrl	equ	0xFF6
   680                           tablat	equ	0xFF5
   681                           postinc0	equ	0xFEE
   682                           wreg	equ	0xFE8
   683                           
   684 ;; *************** function _riksFactors *****************
   685 ;; Defined at:
   686 ;;		line 39 in file "funciones.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;		None
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  text           80    0[BANK0 ] unsigned char [80]
   691 ;;  gender          4  108[BANK0 ] unsigned long 
   692 ;;  peso            4  104[BANK0 ] unsigned long 
   693 ;;  estatura        4  100[BANK0 ] unsigned long 
   694 ;;  edad            4   96[BANK0 ] unsigned long 
   695 ;;  diastolic       4   92[BANK0 ] unsigned long 
   696 ;;  systolic        4   88[BANK0 ] unsigned long 
   697 ;;  parents         4   84[BANK0 ] unsigned long 
   698 ;;  smoke           4   80[BANK0 ] unsigned long 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   708 ;;      Params:         0       0       0       0       0       0       0       0       0
   709 ;;      Locals:         0     112       0       0       0       0       0       0       0
   710 ;;      Temps:          0       0       0       0       0       0       0       0       0
   711 ;;      Totals:         0     112       0       0       0       0       0       0       0
   712 ;;Total ram usage:      112 bytes
   713 ;; Hardware stack levels used:    1
   714 ;; Hardware stack levels required when called:    6
   715 ;; This function calls:
   716 ;;		_LCD_goto
   717 ;;		_LCD_puts
   718 ;;		_keyNumber
   719 ;;		_sprintf
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text1
   726  00089C                     __ptext1:
   727                           	opt stack 0
   728  00089C                     _riksFactors:
   729                           	opt stack 24
   730                           
   731                           ;funciones.c: 40: unsigned char text[80];
   732                           ;funciones.c: 41: unsigned long int edad=0,estatura=0,peso=0,gender=0,smoke=0,parents=0,
      +                          systolic=0,diastolic=0;
   733                           
   734                           ;incstack = 0
   735  00089C  0E00               	movlw	0
   736  00089E  0100               	movlb	0	; () banked
   737  0008A0  6FC0               	movwf	riksFactors@edad& (0+255),b
   738  0008A2  0E00               	movlw	0
   739  0008A4  6FC1               	movwf	(riksFactors@edad+1)& (0+255),b
   740  0008A6  0E00               	movlw	0
   741  0008A8  6FC2               	movwf	(riksFactors@edad+2)& (0+255),b
   742  0008AA  0E00               	movlw	0
   743  0008AC  6FC3               	movwf	(riksFactors@edad+3)& (0+255),b
   744  0008AE  0E00               	movlw	0
   745  0008B0  0100               	movlb	0	; () banked
   746  0008B2  6FC4               	movwf	riksFactors@estatura& (0+255),b
   747  0008B4  0E00               	movlw	0
   748  0008B6  6FC5               	movwf	(riksFactors@estatura+1)& (0+255),b
   749  0008B8  0E00               	movlw	0
   750  0008BA  6FC6               	movwf	(riksFactors@estatura+2)& (0+255),b
   751  0008BC  0E00               	movlw	0
   752  0008BE  6FC7               	movwf	(riksFactors@estatura+3)& (0+255),b
   753  0008C0  0E00               	movlw	0
   754  0008C2  0100               	movlb	0	; () banked
   755  0008C4  6FC8               	movwf	riksFactors@peso& (0+255),b
   756  0008C6  0E00               	movlw	0
   757  0008C8  6FC9               	movwf	(riksFactors@peso+1)& (0+255),b
   758  0008CA  0E00               	movlw	0
   759  0008CC  6FCA               	movwf	(riksFactors@peso+2)& (0+255),b
   760  0008CE  0E00               	movlw	0
   761  0008D0  6FCB               	movwf	(riksFactors@peso+3)& (0+255),b
   762  0008D2  0E00               	movlw	0
   763  0008D4  0100               	movlb	0	; () banked
   764  0008D6  6FCC               	movwf	riksFactors@gender& (0+255),b
   765  0008D8  0E00               	movlw	0
   766  0008DA  6FCD               	movwf	(riksFactors@gender+1)& (0+255),b
   767  0008DC  0E00               	movlw	0
   768  0008DE  6FCE               	movwf	(riksFactors@gender+2)& (0+255),b
   769  0008E0  0E00               	movlw	0
   770  0008E2  6FCF               	movwf	(riksFactors@gender+3)& (0+255),b
   771  0008E4  0E00               	movlw	0
   772  0008E6  0100               	movlb	0	; () banked
   773  0008E8  6FB0               	movwf	riksFactors@smoke& (0+255),b
   774  0008EA  0E00               	movlw	0
   775  0008EC  6FB1               	movwf	(riksFactors@smoke+1)& (0+255),b
   776  0008EE  0E00               	movlw	0
   777  0008F0  6FB2               	movwf	(riksFactors@smoke+2)& (0+255),b
   778  0008F2  0E00               	movlw	0
   779  0008F4  6FB3               	movwf	(riksFactors@smoke+3)& (0+255),b
   780  0008F6  0E00               	movlw	0
   781  0008F8  0100               	movlb	0	; () banked
   782  0008FA  6FB4               	movwf	riksFactors@parents& (0+255),b
   783  0008FC  0E00               	movlw	0
   784  0008FE  6FB5               	movwf	(riksFactors@parents+1)& (0+255),b
   785  000900  0E00               	movlw	0
   786  000902  6FB6               	movwf	(riksFactors@parents+2)& (0+255),b
   787  000904  0E00               	movlw	0
   788  000906  6FB7               	movwf	(riksFactors@parents+3)& (0+255),b
   789  000908  0E00               	movlw	0
   790  00090A  0100               	movlb	0	; () banked
   791  00090C  6FB8               	movwf	riksFactors@systolic& (0+255),b
   792  00090E  0E00               	movlw	0
   793  000910  6FB9               	movwf	(riksFactors@systolic+1)& (0+255),b
   794  000912  0E00               	movlw	0
   795  000914  6FBA               	movwf	(riksFactors@systolic+2)& (0+255),b
   796  000916  0E00               	movlw	0
   797  000918  6FBB               	movwf	(riksFactors@systolic+3)& (0+255),b
   798  00091A  0E00               	movlw	0
   799  00091C  0100               	movlb	0	; () banked
   800  00091E  6FBC               	movwf	riksFactors@diastolic& (0+255),b
   801  000920  0E00               	movlw	0
   802  000922  6FBD               	movwf	(riksFactors@diastolic+1)& (0+255),b
   803  000924  0E00               	movlw	0
   804  000926  6FBE               	movwf	(riksFactors@diastolic+2)& (0+255),b
   805  000928  0E00               	movlw	0
   806  00092A  6FBF               	movwf	(riksFactors@diastolic+3)& (0+255),b
   807                           
   808                           ; BSR set to: 0
   809                           ;funciones.c: 44: LCD_goto(LCD_01_ADDRESS,1,1);
   810  00092C  0E01               	movlw	1
   811  00092E  6E0C               	movwf	LCD_goto@row,c
   812  000930  0E01               	movlw	1
   813  000932  6E0D               	movwf	LCD_goto@column,c
   814  000934  503B               	movf	_LCD_01_ADDRESS,w,c
   815  000936  ECE1  F008         	call	_LCD_goto
   816                           
   817                           ;funciones.c: 45: LCD_puts(LCD_01_ADDRESS,"                        " );
   818  00093A  0E29               	movlw	low STR_1
   819  00093C  6E0A               	movwf	LCD_puts@s,c
   820  00093E  0E08               	movlw	high STR_1
   821  000940  6E0B               	movwf	LCD_puts@s+1,c
   822  000942  503B               	movf	_LCD_01_ADDRESS,w,c
   823  000944  EC51  F009         	call	_LCD_puts
   824                           
   825                           ;funciones.c: 47: LCD_goto(LCD_01_ADDRESS,2,1);
   826  000948  0E02               	movlw	2
   827  00094A  6E0C               	movwf	LCD_goto@row,c
   828  00094C  0E01               	movlw	1
   829  00094E  6E0D               	movwf	LCD_goto@column,c
   830  000950  503B               	movf	_LCD_01_ADDRESS,w,c
   831  000952  ECE1  F008         	call	_LCD_goto
   832                           
   833                           ;funciones.c: 48: LCD_puts(LCD_01_ADDRESS,"                        " );
   834  000956  0E29               	movlw	low STR_1
   835  000958  6E0A               	movwf	LCD_puts@s,c
   836  00095A  0E08               	movlw	high STR_1
   837  00095C  6E0B               	movwf	LCD_puts@s+1,c
   838  00095E  503B               	movf	_LCD_01_ADDRESS,w,c
   839  000960  EC51  F009         	call	_LCD_puts
   840                           
   841                           ;funciones.c: 50: LCD_goto(LCD_01_ADDRESS,1,1);
   842  000964  0E01               	movlw	1
   843  000966  6E0C               	movwf	LCD_goto@row,c
   844  000968  0E01               	movlw	1
   845  00096A  6E0D               	movwf	LCD_goto@column,c
   846  00096C  503B               	movf	_LCD_01_ADDRESS,w,c
   847  00096E  ECE1  F008         	call	_LCD_goto
   848                           
   849                           ;funciones.c: 51: LCD_puts(LCD_01_ADDRESS,"Teclee edad" );
   850  000972  0E8E               	movlw	low STR_3
   851  000974  6E0A               	movwf	LCD_puts@s,c
   852  000976  0E08               	movlw	high STR_3
   853  000978  6E0B               	movwf	LCD_puts@s+1,c
   854  00097A  503B               	movf	_LCD_01_ADDRESS,w,c
   855  00097C  EC51  F009         	call	_LCD_puts
   856                           
   857                           ;funciones.c: 52: edad = keyNumber();
   858  000980  ECF2  F007         	call	_keyNumber	;wreg free
   859  000984  C00F  F0C0         	movff	?_keyNumber,riksFactors@edad
   860  000988  C010  F0C1         	movff	?_keyNumber+1,riksFactors@edad+1
   861  00098C  C011  F0C2         	movff	?_keyNumber+2,riksFactors@edad+2
   862  000990  C012  F0C3         	movff	?_keyNumber+3,riksFactors@edad+3
   863                           
   864                           ;funciones.c: 54: LCD_goto(LCD_01_ADDRESS,2,1);
   865  000994  0E02               	movlw	2
   866  000996  6E0C               	movwf	LCD_goto@row,c
   867  000998  0E01               	movlw	1
   868  00099A  6E0D               	movwf	LCD_goto@column,c
   869  00099C  503B               	movf	_LCD_01_ADDRESS,w,c
   870  00099E  ECE1  F008         	call	_LCD_goto
   871                           
   872                           ;funciones.c: 55: LCD_puts(LCD_01_ADDRESS,"                        " );
   873  0009A2  0E29               	movlw	low STR_1
   874  0009A4  6E0A               	movwf	LCD_puts@s,c
   875  0009A6  0E08               	movlw	high STR_1
   876  0009A8  6E0B               	movwf	LCD_puts@s+1,c
   877  0009AA  503B               	movf	_LCD_01_ADDRESS,w,c
   878  0009AC  EC51  F009         	call	_LCD_puts
   879                           
   880                           ;funciones.c: 57: LCD_goto(LCD_01_ADDRESS,1,1);
   881  0009B0  0E01               	movlw	1
   882  0009B2  6E0C               	movwf	LCD_goto@row,c
   883  0009B4  0E01               	movlw	1
   884  0009B6  6E0D               	movwf	LCD_goto@column,c
   885  0009B8  503B               	movf	_LCD_01_ADDRESS,w,c
   886  0009BA  ECE1  F008         	call	_LCD_goto
   887                           
   888                           ;funciones.c: 58: LCD_puts(LCD_01_ADDRESS,"Teclee peso en kg" );
   889  0009BE  0E6C               	movlw	low STR_5
   890  0009C0  6E0A               	movwf	LCD_puts@s,c
   891  0009C2  0E08               	movlw	high STR_5
   892  0009C4  6E0B               	movwf	LCD_puts@s+1,c
   893  0009C6  503B               	movf	_LCD_01_ADDRESS,w,c
   894  0009C8  EC51  F009         	call	_LCD_puts
   895                           
   896                           ;funciones.c: 59: peso = keyNumber();
   897  0009CC  ECF2  F007         	call	_keyNumber	;wreg free
   898  0009D0  C00F  F0C8         	movff	?_keyNumber,riksFactors@peso
   899  0009D4  C010  F0C9         	movff	?_keyNumber+1,riksFactors@peso+1
   900  0009D8  C011  F0CA         	movff	?_keyNumber+2,riksFactors@peso+2
   901  0009DC  C012  F0CB         	movff	?_keyNumber+3,riksFactors@peso+3
   902                           
   903                           ;funciones.c: 61: LCD_goto(LCD_01_ADDRESS,2,1);
   904  0009E0  0E02               	movlw	2
   905  0009E2  6E0C               	movwf	LCD_goto@row,c
   906  0009E4  0E01               	movlw	1
   907  0009E6  6E0D               	movwf	LCD_goto@column,c
   908  0009E8  503B               	movf	_LCD_01_ADDRESS,w,c
   909  0009EA  ECE1  F008         	call	_LCD_goto
   910                           
   911                           ;funciones.c: 62: LCD_puts(LCD_01_ADDRESS,"                        " );
   912  0009EE  0E29               	movlw	low STR_1
   913  0009F0  6E0A               	movwf	LCD_puts@s,c
   914  0009F2  0E08               	movlw	high STR_1
   915  0009F4  6E0B               	movwf	LCD_puts@s+1,c
   916  0009F6  503B               	movf	_LCD_01_ADDRESS,w,c
   917  0009F8  EC51  F009         	call	_LCD_puts
   918                           
   919                           ;funciones.c: 64: LCD_goto(LCD_01_ADDRESS,2,1);
   920  0009FC  0E02               	movlw	2
   921  0009FE  6E0C               	movwf	LCD_goto@row,c
   922  000A00  0E01               	movlw	1
   923  000A02  6E0D               	movwf	LCD_goto@column,c
   924  000A04  503B               	movf	_LCD_01_ADDRESS,w,c
   925  000A06  ECE1  F008         	call	_LCD_goto
   926                           
   927                           ;funciones.c: 65: LCD_puts(LCD_01_ADDRESS,"                        " );
   928  000A0A  0E29               	movlw	low STR_1
   929  000A0C  6E0A               	movwf	LCD_puts@s,c
   930  000A0E  0E08               	movlw	high STR_1
   931  000A10  6E0B               	movwf	LCD_puts@s+1,c
   932  000A12  503B               	movf	_LCD_01_ADDRESS,w,c
   933  000A14  EC51  F009         	call	_LCD_puts
   934                           
   935                           ;funciones.c: 67: LCD_goto(LCD_01_ADDRESS,1,1);
   936  000A18  0E01               	movlw	1
   937  000A1A  6E0C               	movwf	LCD_goto@row,c
   938  000A1C  0E01               	movlw	1
   939  000A1E  6E0D               	movwf	LCD_goto@column,c
   940  000A20  503B               	movf	_LCD_01_ADDRESS,w,c
   941  000A22  ECE1  F008         	call	_LCD_goto
   942                           
   943                           ;funciones.c: 68: LCD_puts(LCD_01_ADDRESS,"Teclee estatura(cm)" );
   944  000A26  0E58               	movlw	low STR_8
   945  000A28  6E0A               	movwf	LCD_puts@s,c
   946  000A2A  0E08               	movlw	high STR_8
   947  000A2C  6E0B               	movwf	LCD_puts@s+1,c
   948  000A2E  503B               	movf	_LCD_01_ADDRESS,w,c
   949  000A30  EC51  F009         	call	_LCD_puts
   950                           
   951                           ;funciones.c: 69: estatura = keyNumber();
   952  000A34  ECF2  F007         	call	_keyNumber	;wreg free
   953  000A38  C00F  F0C4         	movff	?_keyNumber,riksFactors@estatura
   954  000A3C  C010  F0C5         	movff	?_keyNumber+1,riksFactors@estatura+1
   955  000A40  C011  F0C6         	movff	?_keyNumber+2,riksFactors@estatura+2
   956  000A44  C012  F0C7         	movff	?_keyNumber+3,riksFactors@estatura+3
   957                           
   958                           ;funciones.c: 71: LCD_goto(LCD_01_ADDRESS,2,1);
   959  000A48  0E02               	movlw	2
   960  000A4A  6E0C               	movwf	LCD_goto@row,c
   961  000A4C  0E01               	movlw	1
   962  000A4E  6E0D               	movwf	LCD_goto@column,c
   963  000A50  503B               	movf	_LCD_01_ADDRESS,w,c
   964  000A52  ECE1  F008         	call	_LCD_goto
   965                           
   966                           ;funciones.c: 72: LCD_puts(LCD_01_ADDRESS,"                        " );
   967  000A56  0E29               	movlw	low STR_1
   968  000A58  6E0A               	movwf	LCD_puts@s,c
   969  000A5A  0E08               	movlw	high STR_1
   970  000A5C  6E0B               	movwf	LCD_puts@s+1,c
   971  000A5E  503B               	movf	_LCD_01_ADDRESS,w,c
   972  000A60  EC51  F009         	call	_LCD_puts
   973                           
   974                           ;funciones.c: 74: LCD_goto(LCD_01_ADDRESS,2,1);
   975  000A64  0E02               	movlw	2
   976  000A66  6E0C               	movwf	LCD_goto@row,c
   977  000A68  0E01               	movlw	1
   978  000A6A  6E0D               	movwf	LCD_goto@column,c
   979  000A6C  503B               	movf	_LCD_01_ADDRESS,w,c
   980  000A6E  ECE1  F008         	call	_LCD_goto
   981                           
   982                           ;funciones.c: 75: LCD_puts(LCD_01_ADDRESS,"                        " );
   983  000A72  0E29               	movlw	low STR_1
   984  000A74  6E0A               	movwf	LCD_puts@s,c
   985  000A76  0E08               	movlw	high STR_1
   986  000A78  6E0B               	movwf	LCD_puts@s+1,c
   987  000A7A  503B               	movf	_LCD_01_ADDRESS,w,c
   988  000A7C  EC51  F009         	call	_LCD_puts
   989                           
   990                           ;funciones.c: 77: LCD_goto(LCD_01_ADDRESS,1,1);
   991  000A80  0E01               	movlw	1
   992  000A82  6E0C               	movwf	LCD_goto@row,c
   993  000A84  0E01               	movlw	1
   994  000A86  6E0D               	movwf	LCD_goto@column,c
   995  000A88  503B               	movf	_LCD_01_ADDRESS,w,c
   996  000A8A  ECE1  F008         	call	_LCD_goto
   997                           
   998                           ;funciones.c: 78: LCD_puts(LCD_01_ADDRESS,"Teclee gender 0 H 1 M" );
   999  000A8E  0E42               	movlw	low STR_11
  1000  000A90  6E0A               	movwf	LCD_puts@s,c
  1001  000A92  0E08               	movlw	high STR_11
  1002  000A94  6E0B               	movwf	LCD_puts@s+1,c
  1003  000A96  503B               	movf	_LCD_01_ADDRESS,w,c
  1004  000A98  EC51  F009         	call	_LCD_puts
  1005                           
  1006                           ;funciones.c: 79: gender = keyNumber();
  1007  000A9C  ECF2  F007         	call	_keyNumber	;wreg free
  1008  000AA0  C00F  F0CC         	movff	?_keyNumber,riksFactors@gender
  1009  000AA4  C010  F0CD         	movff	?_keyNumber+1,riksFactors@gender+1
  1010  000AA8  C011  F0CE         	movff	?_keyNumber+2,riksFactors@gender+2
  1011  000AAC  C012  F0CF         	movff	?_keyNumber+3,riksFactors@gender+3
  1012                           
  1013                           ;funciones.c: 81: LCD_goto(LCD_01_ADDRESS,2,1);
  1014  000AB0  0E02               	movlw	2
  1015  000AB2  6E0C               	movwf	LCD_goto@row,c
  1016  000AB4  0E01               	movlw	1
  1017  000AB6  6E0D               	movwf	LCD_goto@column,c
  1018  000AB8  503B               	movf	_LCD_01_ADDRESS,w,c
  1019  000ABA  ECE1  F008         	call	_LCD_goto
  1020                           
  1021                           ;funciones.c: 82: LCD_puts(LCD_01_ADDRESS,"                        " );
  1022  000ABE  0E29               	movlw	low STR_1
  1023  000AC0  6E0A               	movwf	LCD_puts@s,c
  1024  000AC2  0E08               	movlw	high STR_1
  1025  000AC4  6E0B               	movwf	LCD_puts@s+1,c
  1026  000AC6  503B               	movf	_LCD_01_ADDRESS,w,c
  1027  000AC8  EC51  F009         	call	_LCD_puts
  1028                           
  1029                           ;funciones.c: 84: sprintf(text, "%lu,%lu,%lu,%lu", edad,peso,estatura,gender);
  1030  000ACC  0E60               	movlw	low riksFactors@text
  1031  000ACE  6E17               	movwf	sprintf@sp,c
  1032  000AD0  0E00               	movlw	high riksFactors@text
  1033  000AD2  6E18               	movwf	sprintf@sp+1,c
  1034  000AD4  0E7E               	movlw	low STR_13
  1035  000AD6  6E19               	movwf	sprintf@f,c
  1036  000AD8  0E08               	movlw	high STR_13
  1037  000ADA  6E1A               	movwf	sprintf@f+1,c
  1038  000ADC  C0C0  F01B         	movff	riksFactors@edad,?_sprintf+4
  1039  000AE0  C0C1  F01C         	movff	riksFactors@edad+1,?_sprintf+5
  1040  000AE4  C0C2  F01D         	movff	riksFactors@edad+2,?_sprintf+6
  1041  000AE8  C0C3  F01E         	movff	riksFactors@edad+3,?_sprintf+7
  1042  000AEC  C0C8  F01F         	movff	riksFactors@peso,?_sprintf+8
  1043  000AF0  C0C9  F020         	movff	riksFactors@peso+1,?_sprintf+9
  1044  000AF4  C0CA  F021         	movff	riksFactors@peso+2,?_sprintf+10
  1045  000AF8  C0CB  F022         	movff	riksFactors@peso+3,?_sprintf+11
  1046  000AFC  C0C4  F023         	movff	riksFactors@estatura,?_sprintf+12
  1047  000B00  C0C5  F024         	movff	riksFactors@estatura+1,?_sprintf+13
  1048  000B04  C0C6  F025         	movff	riksFactors@estatura+2,?_sprintf+14
  1049  000B08  C0C7  F026         	movff	riksFactors@estatura+3,?_sprintf+15
  1050  000B0C  C0CC  F027         	movff	riksFactors@gender,?_sprintf+16
  1051  000B10  C0CD  F028         	movff	riksFactors@gender+1,?_sprintf+17
  1052  000B14  C0CE  F029         	movff	riksFactors@gender+2,?_sprintf+18
  1053  000B18  C0CF  F02A         	movff	riksFactors@gender+3,?_sprintf+19
  1054  000B1C  EC9F  F005         	call	_sprintf	;wreg free
  1055                           
  1056                           ;funciones.c: 85: LCD_goto(LCD_01_ADDRESS,2,1);
  1057  000B20  0E02               	movlw	2
  1058  000B22  6E0C               	movwf	LCD_goto@row,c
  1059  000B24  0E01               	movlw	1
  1060  000B26  6E0D               	movwf	LCD_goto@column,c
  1061  000B28  503B               	movf	_LCD_01_ADDRESS,w,c
  1062  000B2A  ECE1  F008         	call	_LCD_goto
  1063                           
  1064                           ;funciones.c: 86: LCD_puts(LCD_01_ADDRESS,text );
  1065  000B2E  0E60               	movlw	low riksFactors@text
  1066  000B30  6E0A               	movwf	LCD_puts@s,c
  1067  000B32  0E00               	movlw	high riksFactors@text
  1068  000B34  6E0B               	movwf	LCD_puts@s+1,c
  1069  000B36  503B               	movf	_LCD_01_ADDRESS,w,c
  1070  000B38  EC51  F009         	call	_LCD_puts
  1071  000B3C  0012               	return		;funcret
  1072  000B3E                     __end_of_riksFactors:
  1073                           	opt stack 0
  1074                           tblptru	equ	0xFF8
  1075                           tblptrh	equ	0xFF7
  1076                           tblptrl	equ	0xFF6
  1077                           tablat	equ	0xFF5
  1078                           postinc0	equ	0xFEE
  1079                           wreg	equ	0xFE8
  1080                           
  1081 ;; *************** function _sprintf *****************
  1082 ;; Defined at:
  1083 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;  sp              2   22[COMRAM] PTR unsigned char 
  1086 ;;		 -> riksFactors@text(80), 
  1087 ;;  f               2   24[COMRAM] PTR const unsigned char 
  1088 ;;		 -> STR_13(16), 
  1089 ;; Auto vars:     Size  Location     Type
  1090 ;;  val             4   47[COMRAM] unsigned long 
  1091 ;;  tmpval          4    0        struct .
  1092 ;;  cp              3    0        PTR const unsigned char 
  1093 ;;  ap              2   51[COMRAM] PTR void [1]
  1094 ;;		 -> ?_sprintf(2), 
  1095 ;;  prec            2   45[COMRAM] int 
  1096 ;;  len             2    0        unsigned int 
  1097 ;;  c               1   53[COMRAM] char 
  1098 ;;  flag            1   44[COMRAM] unsigned char 
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  2   22[COMRAM] int 
  1101 ;; Registers used:
  1102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1108 ;;      Params:        20       0       0       0       0       0       0       0       0
  1109 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1110 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1111 ;;      Totals:        32       0       0       0       0       0       0       0       0
  1112 ;;Total ram usage:       32 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; Hardware stack levels required when called:    1
  1115 ;; This function calls:
  1116 ;;		___lldiv
  1117 ;;		___llmod
  1118 ;; This function is called by:
  1119 ;;		_riksFactors
  1120 ;; This function uses a non-reentrant model
  1121 ;;
  1122                           
  1123                           	psect	text2
  1124  000B3E                     __ptext2:
  1125                           	opt stack 0
  1126  000B3E                     _sprintf:
  1127                           	opt stack 28
  1128                           
  1129                           ;doprnt.c: 494: va_list ap;
  1130                           ;doprnt.c: 499: signed char c;
  1131                           ;doprnt.c: 504: int prec;
  1132                           ;doprnt.c: 508: unsigned char flag;
  1133                           ;doprnt.c: 523: union {
  1134                           ;doprnt.c: 524: unsigned long vd;
  1135                           ;doprnt.c: 525: double integ;
  1136                           ;doprnt.c: 526: } tmpval;
  1137                           ;doprnt.c: 528: unsigned long val;
  1138                           ;doprnt.c: 529: unsigned len;
  1139                           ;doprnt.c: 530: const char * cp;
  1140                           ;doprnt.c: 533: *ap = __va_start();
  1141                           
  1142                           ;incstack = 0
  1143  000B3E  0E1B               	movlw	low (?_sprintf+4)
  1144  000B40  6E34               	movwf	sprintf@ap,c
  1145  000B42  0E00               	movlw	high (?_sprintf+4)
  1146  000B44  6E35               	movwf	sprintf@ap+1,c
  1147                           
  1148                           ;doprnt.c: 536: while(c = *f++) {
  1149  000B46  D0BA               	goto	l1880
  1150  000B48                     l1832:
  1151                           
  1152                           ;doprnt.c: 538: if(c != '%')
  1153  000B48  0E25               	movlw	37
  1154  000B4A  1836               	xorwf	sprintf@c,w,c
  1155  000B4C  B4D8               	btfsc	status,2,c
  1156  000B4E  D009               	goto	l1838
  1157                           
  1158                           ;doprnt.c: 540: {
  1159                           ;doprnt.c: 541: ((*sp++ = (c)));
  1160  000B50  C017  FFD9         	movff	sprintf@sp,fsr2l
  1161  000B54  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1162  000B58  C036  FFDF         	movff	sprintf@c,indf2
  1163  000B5C  4A17               	infsnz	sprintf@sp,f,c
  1164  000B5E  2A18               	incf	sprintf@sp+1,f,c
  1165                           
  1166                           ;doprnt.c: 542: continue;
  1167  000B60  D0AD               	goto	l1880
  1168  000B62                     l1838:
  1169                           
  1170                           ;doprnt.c: 543: }
  1171                           ;doprnt.c: 548: flag = 0;
  1172  000B62  0E00               	movlw	0
  1173  000B64  6E2D               	movwf	sprintf@flag,c
  1174                           
  1175                           ;doprnt.c: 635: switch(c = *f++) {
  1176                           
  1177                           ;doprnt.c: 633: loop:
  1178  000B66  D005               	goto	l1846
  1179  000B68                     l1840:
  1180                           
  1181                           ;doprnt.c: 643: flag |= 0x10;
  1182  000B68  882D               	bsf	sprintf@flag,4,c
  1183                           
  1184                           ;doprnt.c: 644: goto loop;
  1185  000B6A  D003               	goto	l1846
  1186  000B6C                     l1842:
  1187                           
  1188                           ;doprnt.c: 818: flag |= 0xC0;
  1189  000B6C  0EC0               	movlw	192
  1190  000B6E  122D               	iorwf	sprintf@flag,f,c
  1191                           
  1192                           ;doprnt.c: 822: }
  1193                           
  1194                           ;doprnt.c: 819: break;
  1195  000B70  D014               	goto	l175
  1196  000B72                     l1846:
  1197  000B72  C019  FFF6         	movff	sprintf@f,tblptrl
  1198  000B76  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1199  000B7A  4A19               	infsnz	sprintf@f,f,c
  1200  000B7C  2A1A               	incf	sprintf@f+1,f,c
  1201  000B7E                     	if	0	;tblptru may be non-zero
  1202  000B7E                     	endif
  1203  000B7E                     	if	0	;tblptru may be non-zero
  1204  000B7E                     	endif
  1205  000B7E  0008               	tblrd		*
  1206  000B80  CFF5 F036          	movff	tablat,sprintf@c
  1207  000B84  5036               	movf	sprintf@c,w,c
  1208                           
  1209                           ; Switch size 1, requested type "space"
  1210                           ; Number of cases is 3, Range of values is 0 to 117
  1211                           ; switch strategies available:
  1212                           ; Name         Instructions Cycles
  1213                           ; simple_byte           10     6 (average)
  1214                           ;	Chosen strategy is simple_byte
  1215  000B86  0A00               	xorlw	0	; case 0
  1216  000B88  B4D8               	btfsc	status,2,c
  1217  000B8A  D0A4               	goto	l1882
  1218  000B8C  0A6C               	xorlw	108	; case 108
  1219  000B8E  B4D8               	btfsc	status,2,c
  1220  000B90  D7EB               	goto	l1840
  1221  000B92  0A19               	xorlw	25	; case 117
  1222  000B94  B4D8               	btfsc	status,2,c
  1223  000B96  D7EA               	goto	l1842
  1224  000B98  D091               	goto	l1880
  1225  000B9A                     l175:
  1226                           
  1227                           ;doprnt.c: 1273: {
  1228                           ;doprnt.c: 1281: if(flag & 0x10)
  1229  000B9A  A82D               	btfss	sprintf@flag,4,c
  1230  000B9C  D00E               	goto	l1852
  1231                           
  1232                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  1233  000B9E  C034  FFD9         	movff	sprintf@ap,fsr2l
  1234  000BA2  C035  FFDA         	movff	sprintf@ap+1,fsr2h
  1235  000BA6  CFDE F030          	movff	postinc2,sprintf@val
  1236  000BAA  CFDE F031          	movff	postinc2,sprintf@val+1
  1237  000BAE  CFDE F032          	movff	postinc2,sprintf@val+2
  1238  000BB2  CFDE F033          	movff	postinc2,sprintf@val+3
  1239  000BB6  0E04               	movlw	4
  1240  000BB8  D00F               	goto	L1
  1241  000BBA                     l1852:
  1242                           
  1243                           ;doprnt.c: 1283: else
  1244                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1245  000BBA  C034  FFD9         	movff	sprintf@ap,fsr2l
  1246  000BBE  C035  FFDA         	movff	sprintf@ap+1,fsr2h
  1247  000BC2  CFDE F02B          	movff	postinc2,??_sprintf
  1248  000BC6  CFDD F02C          	movff	postdec2,??_sprintf+1
  1249  000BCA  C02B  F030         	movff	??_sprintf,sprintf@val
  1250  000BCE  C02C  F031         	movff	??_sprintf+1,sprintf@val+1
  1251  000BD2  6A32               	clrf	sprintf@val+2,c
  1252  000BD4  6A33               	clrf	sprintf@val+3,c
  1253  000BD6  0E02               	movlw	2
  1254  000BD8                     L1:
  1255  000BD8  2634               	addwf	sprintf@ap,f,c
  1256  000BDA  0E00               	movlw	0
  1257  000BDC  2235               	addwfc	sprintf@ap+1,f,c
  1258                           
  1259                           ;doprnt.c: 1287: }
  1260                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1261  000BDE  0E01               	movlw	1
  1262  000BE0  6E36               	movwf	sprintf@c,c
  1263  000BE2                     l1858:
  1264  000BE2  0E0A               	movlw	10
  1265  000BE4  1836               	xorwf	sprintf@c,w,c
  1266  000BE6  B4D8               	btfsc	status,2,c
  1267  000BE8  D018               	goto	l1870
  1268                           
  1269                           ;doprnt.c: 1306: if(val < dpowers[c])
  1270  000BEA  5036               	movf	sprintf@c,w,c
  1271  000BEC  0D04               	mullw	4
  1272  000BEE  0E01               	movlw	low _dpowers
  1273  000BF0  24F3               	addwf	prodl,w,c
  1274  000BF2  6EF6               	movwf	tblptrl,c
  1275  000BF4  0E08               	movlw	high _dpowers
  1276  000BF6  20F4               	addwfc	prodh,w,c
  1277  000BF8  6EF7               	movwf	tblptrh,c
  1278  000BFA                     	if	0	;There are less than 3 active tblptr bytes
  1279  000BFA                     	endif
  1280  000BFA  0009               	tblrd		*+
  1281  000BFC  50F5               	movf	tablat,w,c
  1282  000BFE  5C30               	subwf	sprintf@val,w,c
  1283  000C00  0009               	tblrd		*+
  1284  000C02  50F5               	movf	tablat,w,c
  1285  000C04  5831               	subwfb	sprintf@val+1,w,c
  1286  000C06  0009               	tblrd		*+
  1287  000C08  50F5               	movf	tablat,w,c
  1288  000C0A  5832               	subwfb	sprintf@val+2,w,c
  1289  000C0C  0009               	tblrd		*+
  1290  000C0E  50F5               	movf	tablat,w,c
  1291  000C10  5833               	subwfb	sprintf@val+3,w,c
  1292  000C12  A0D8               	btfss	status,0,c
  1293  000C14  D002               	goto	l1870
  1294                           
  1295                           ;doprnt.c: 1307: break;
  1296  000C16  2A36               	incf	sprintf@c,f,c
  1297  000C18  D7E4               	goto	l1858
  1298  000C1A                     l1870:
  1299                           
  1300                           ;doprnt.c: 1422: {
  1301                           ;doprnt.c: 1469: }
  1302                           ;doprnt.c: 1472: prec = c;
  1303  000C1A  5036               	movf	sprintf@c,w,c
  1304  000C1C  6E2E               	movwf	sprintf@prec,c
  1305  000C1E  6A2F               	clrf	sprintf@prec+1,c
  1306  000C20  BE2E               	btfsc	sprintf@prec,7,c
  1307  000C22  062F               	decf	sprintf@prec+1,f,c
  1308                           
  1309                           ;doprnt.c: 1474: while(prec--) {
  1310  000C24  D043               	goto	l1878
  1311  000C26                     l1872:
  1312                           
  1313                           ;doprnt.c: 1478: {
  1314                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1315  000C26  C02E  F02B         	movff	sprintf@prec,??_sprintf
  1316  000C2A  C02F  F02C         	movff	sprintf@prec+1,??_sprintf+1
  1317  000C2E  90D8               	bcf	status,0,c
  1318  000C30  362B               	rlcf	??_sprintf,f,c
  1319  000C32  362C               	rlcf	??_sprintf+1,f,c
  1320  000C34  90D8               	bcf	status,0,c
  1321  000C36  362B               	rlcf	??_sprintf,f,c
  1322  000C38  362C               	rlcf	??_sprintf+1,f,c
  1323  000C3A  0E01               	movlw	low _dpowers
  1324  000C3C  242B               	addwf	??_sprintf,w,c
  1325  000C3E  6EF6               	movwf	tblptrl,c
  1326  000C40  0E08               	movlw	high _dpowers
  1327  000C42  202C               	addwfc	??_sprintf+1,w,c
  1328  000C44  6EF7               	movwf	tblptrh,c
  1329  000C46                     	if	0	;There are less than 3 active tblptr bytes
  1330  000C46                     	endif
  1331  000C46  0009               	tblrd		*+
  1332  000C48  CFF5 F005          	movff	tablat,___lldiv@divisor
  1333  000C4C  0009               	tblrd		*+
  1334  000C4E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1335  000C52  0009               	tblrd		*+
  1336  000C54  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1337  000C58  000A               	tblrd		*-
  1338  000C5A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1339  000C5E  C030  F001         	movff	sprintf@val,___lldiv@dividend
  1340  000C62  C031  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1341  000C66  C032  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1342  000C6A  C033  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1343  000C6E  ECA0  F008         	call	___lldiv	;wreg free
  1344  000C72  C001  F00E         	movff	?___lldiv,___llmod@dividend
  1345  000C76  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  1346  000C7A  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  1347  000C7E  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  1348  000C82  0E0A               	movlw	10
  1349  000C84  6E12               	movwf	___llmod@divisor,c
  1350  000C86  0E00               	movlw	0
  1351  000C88  6E13               	movwf	___llmod@divisor+1,c
  1352  000C8A  0E00               	movlw	0
  1353  000C8C  6E14               	movwf	___llmod@divisor+2,c
  1354  000C8E  0E00               	movlw	0
  1355  000C90  6E15               	movwf	___llmod@divisor+3,c
  1356  000C92  EC1E  F009         	call	___llmod	;wreg free
  1357  000C96  500E               	movf	?___llmod,w,c
  1358  000C98  0F30               	addlw	48
  1359  000C9A  6E36               	movwf	sprintf@c,c
  1360                           
  1361                           ;doprnt.c: 1523: }
  1362                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1363  000C9C  C017  FFD9         	movff	sprintf@sp,fsr2l
  1364  000CA0  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1365  000CA4  C036  FFDF         	movff	sprintf@c,indf2
  1366  000CA8  4A17               	infsnz	sprintf@sp,f,c
  1367  000CAA  2A18               	incf	sprintf@sp+1,f,c
  1368  000CAC                     l1878:
  1369  000CAC  062E               	decf	sprintf@prec,f,c
  1370  000CAE  A0D8               	btfss	status,0,c
  1371  000CB0  062F               	decf	sprintf@prec+1,f,c
  1372  000CB2  282E               	incf	sprintf@prec,w,c
  1373  000CB4  E1B8               	bnz	l1872
  1374  000CB6  282F               	incf	sprintf@prec+1,w,c
  1375  000CB8  A4D8               	btfss	status,2,c
  1376  000CBA  D7B5               	goto	l1872
  1377  000CBC                     l1880:
  1378  000CBC  C019  FFF6         	movff	sprintf@f,tblptrl
  1379  000CC0  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1380  000CC4  4A19               	infsnz	sprintf@f,f,c
  1381  000CC6  2A1A               	incf	sprintf@f+1,f,c
  1382  000CC8                     	if	0	;tblptru may be non-zero
  1383  000CC8                     	endif
  1384  000CC8                     	if	0	;tblptru may be non-zero
  1385  000CC8                     	endif
  1386  000CC8  0008               	tblrd		*
  1387  000CCA  CFF5 F036          	movff	tablat,sprintf@c
  1388  000CCE  5036               	movf	sprintf@c,w,c
  1389  000CD0  A4D8               	btfss	status,2,c
  1390  000CD2  D73A               	goto	l1832
  1391  000CD4                     l1882:
  1392                           
  1393                           ;doprnt.c: 1538: *sp = 0;
  1394  000CD4  C017  FFD9         	movff	sprintf@sp,fsr2l
  1395  000CD8  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1396  000CDC  0E00               	movlw	0
  1397  000CDE  6EDF               	movwf	indf2,c
  1398  000CE0  0012               	return	
  1399  000CE2                     __end_of_sprintf:
  1400                           	opt stack 0
  1401                           tblptru	equ	0xFF8
  1402                           tblptrh	equ	0xFF7
  1403                           tblptrl	equ	0xFF6
  1404                           tablat	equ	0xFF5
  1405                           prodh	equ	0xFF4
  1406                           prodl	equ	0xFF3
  1407                           postinc0	equ	0xFEE
  1408                           wreg	equ	0xFE8
  1409                           indf2	equ	0xFDF
  1410                           postinc2	equ	0xFDE
  1411                           postdec2	equ	0xFDD
  1412                           fsr2h	equ	0xFDA
  1413                           fsr2l	equ	0xFD9
  1414                           status	equ	0xFD8
  1415                           
  1416 ;; *************** function ___llmod *****************
  1417 ;; Defined at:
  1418 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;  dividend        4   13[COMRAM] unsigned long 
  1421 ;;  divisor         4   17[COMRAM] unsigned long 
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;  counter         1   21[COMRAM] unsigned char 
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  4   13[COMRAM] unsigned long 
  1426 ;; Registers used:
  1427 ;;		wreg, status,2, status,0
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1433 ;;      Params:         8       0       0       0       0       0       0       0       0
  1434 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1435 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1436 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1437 ;;Total ram usage:        9 bytes
  1438 ;; Hardware stack levels used:    1
  1439 ;; This function calls:
  1440 ;;		Nothing
  1441 ;; This function is called by:
  1442 ;;		_sprintf
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           	psect	text3
  1447  00123C                     __ptext3:
  1448                           	opt stack 0
  1449  00123C                     ___llmod:
  1450                           	opt stack 28
  1451                           
  1452                           ;incstack = 0
  1453  00123C  5012               	movf	___llmod@divisor,w,c
  1454  00123E  1013               	iorwf	___llmod@divisor+1,w,c
  1455  001240  1014               	iorwf	___llmod@divisor+2,w,c
  1456  001242  1015               	iorwf	___llmod@divisor+3,w,c
  1457  001244  B4D8               	btfsc	status,2,c
  1458  001246  D024               	goto	l610
  1459  001248  0E01               	movlw	1
  1460  00124A  6E16               	movwf	___llmod@counter,c
  1461  00124C  D006               	goto	l1786
  1462  00124E                     l1784:
  1463  00124E  90D8               	bcf	status,0,c
  1464  001250  3612               	rlcf	___llmod@divisor,f,c
  1465  001252  3613               	rlcf	___llmod@divisor+1,f,c
  1466  001254  3614               	rlcf	___llmod@divisor+2,f,c
  1467  001256  3615               	rlcf	___llmod@divisor+3,f,c
  1468  001258  2A16               	incf	___llmod@counter,f,c
  1469  00125A                     l1786:
  1470  00125A  AE15               	btfss	___llmod@divisor+3,7,c
  1471  00125C  D7F8               	goto	l1784
  1472  00125E                     l1788:
  1473  00125E  5012               	movf	___llmod@divisor,w,c
  1474  001260  5C0E               	subwf	___llmod@dividend,w,c
  1475  001262  5013               	movf	___llmod@divisor+1,w,c
  1476  001264  580F               	subwfb	___llmod@dividend+1,w,c
  1477  001266  5014               	movf	___llmod@divisor+2,w,c
  1478  001268  5810               	subwfb	___llmod@dividend+2,w,c
  1479  00126A  5015               	movf	___llmod@divisor+3,w,c
  1480  00126C  5811               	subwfb	___llmod@dividend+3,w,c
  1481  00126E  A0D8               	btfss	status,0,c
  1482  001270  D008               	goto	l1792
  1483  001272  5012               	movf	___llmod@divisor,w,c
  1484  001274  5E0E               	subwf	___llmod@dividend,f,c
  1485  001276  5013               	movf	___llmod@divisor+1,w,c
  1486  001278  5A0F               	subwfb	___llmod@dividend+1,f,c
  1487  00127A  5014               	movf	___llmod@divisor+2,w,c
  1488  00127C  5A10               	subwfb	___llmod@dividend+2,f,c
  1489  00127E  5015               	movf	___llmod@divisor+3,w,c
  1490  001280  5A11               	subwfb	___llmod@dividend+3,f,c
  1491  001282                     l1792:
  1492  001282  90D8               	bcf	status,0,c
  1493  001284  3215               	rrcf	___llmod@divisor+3,f,c
  1494  001286  3214               	rrcf	___llmod@divisor+2,f,c
  1495  001288  3213               	rrcf	___llmod@divisor+1,f,c
  1496  00128A  3212               	rrcf	___llmod@divisor,f,c
  1497  00128C  2E16               	decfsz	___llmod@counter,f,c
  1498  00128E  D7E7               	goto	l1788
  1499  001290                     l610:
  1500  001290  C00E  F00E         	movff	___llmod@dividend,?___llmod
  1501  001294  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  1502  001298  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  1503  00129C  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  1504  0012A0  0012               	return		;funcret
  1505  0012A2                     __end_of___llmod:
  1506                           	opt stack 0
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           prodh	equ	0xFF4
  1512                           prodl	equ	0xFF3
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           indf2	equ	0xFDF
  1516                           postinc2	equ	0xFDE
  1517                           postdec2	equ	0xFDD
  1518                           fsr2h	equ	0xFDA
  1519                           fsr2l	equ	0xFD9
  1520                           status	equ	0xFD8
  1521                           
  1522 ;; *************** function ___lldiv *****************
  1523 ;; Defined at:
  1524 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;  dividend        4    0[COMRAM] unsigned long 
  1527 ;;  divisor         4    4[COMRAM] unsigned long 
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;  quotient        4    8[COMRAM] unsigned long 
  1530 ;;  counter         1   12[COMRAM] unsigned char 
  1531 ;; Return value:  Size  Location     Type
  1532 ;;                  4    0[COMRAM] unsigned long 
  1533 ;; Registers used:
  1534 ;;		wreg, status,2, status,0
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1540 ;;      Params:         8       0       0       0       0       0       0       0       0
  1541 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1543 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1544 ;;Total ram usage:       13 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; This function calls:
  1547 ;;		Nothing
  1548 ;; This function is called by:
  1549 ;;		_sprintf
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           	psect	text4
  1554  001140                     __ptext4:
  1555                           	opt stack 0
  1556  001140                     ___lldiv:
  1557                           	opt stack 28
  1558                           
  1559                           ;incstack = 0
  1560  001140  0E00               	movlw	0
  1561  001142  6E09               	movwf	___lldiv@quotient,c
  1562  001144  0E00               	movlw	0
  1563  001146  6E0A               	movwf	___lldiv@quotient+1,c
  1564  001148  0E00               	movlw	0
  1565  00114A  6E0B               	movwf	___lldiv@quotient+2,c
  1566  00114C  0E00               	movlw	0
  1567  00114E  6E0C               	movwf	___lldiv@quotient+3,c
  1568  001150  5005               	movf	___lldiv@divisor,w,c
  1569  001152  1006               	iorwf	___lldiv@divisor+1,w,c
  1570  001154  1007               	iorwf	___lldiv@divisor+2,w,c
  1571  001156  1008               	iorwf	___lldiv@divisor+3,w,c
  1572  001158  B4D8               	btfsc	status,2,c
  1573  00115A  D02A               	goto	l600
  1574  00115C  0E01               	movlw	1
  1575  00115E  6E0D               	movwf	___lldiv@counter,c
  1576  001160  D006               	goto	l1766
  1577  001162                     l1764:
  1578  001162  90D8               	bcf	status,0,c
  1579  001164  3605               	rlcf	___lldiv@divisor,f,c
  1580  001166  3606               	rlcf	___lldiv@divisor+1,f,c
  1581  001168  3607               	rlcf	___lldiv@divisor+2,f,c
  1582  00116A  3608               	rlcf	___lldiv@divisor+3,f,c
  1583  00116C  2A0D               	incf	___lldiv@counter,f,c
  1584  00116E                     l1766:
  1585  00116E  AE08               	btfss	___lldiv@divisor+3,7,c
  1586  001170  D7F8               	goto	l1764
  1587  001172                     l1768:
  1588  001172  90D8               	bcf	status,0,c
  1589  001174  3609               	rlcf	___lldiv@quotient,f,c
  1590  001176  360A               	rlcf	___lldiv@quotient+1,f,c
  1591  001178  360B               	rlcf	___lldiv@quotient+2,f,c
  1592  00117A  360C               	rlcf	___lldiv@quotient+3,f,c
  1593  00117C  5005               	movf	___lldiv@divisor,w,c
  1594  00117E  5C01               	subwf	___lldiv@dividend,w,c
  1595  001180  5006               	movf	___lldiv@divisor+1,w,c
  1596  001182  5802               	subwfb	___lldiv@dividend+1,w,c
  1597  001184  5007               	movf	___lldiv@divisor+2,w,c
  1598  001186  5803               	subwfb	___lldiv@dividend+2,w,c
  1599  001188  5008               	movf	___lldiv@divisor+3,w,c
  1600  00118A  5804               	subwfb	___lldiv@dividend+3,w,c
  1601  00118C  A0D8               	btfss	status,0,c
  1602  00118E  D009               	goto	l1776
  1603  001190  5005               	movf	___lldiv@divisor,w,c
  1604  001192  5E01               	subwf	___lldiv@dividend,f,c
  1605  001194  5006               	movf	___lldiv@divisor+1,w,c
  1606  001196  5A02               	subwfb	___lldiv@dividend+1,f,c
  1607  001198  5007               	movf	___lldiv@divisor+2,w,c
  1608  00119A  5A03               	subwfb	___lldiv@dividend+2,f,c
  1609  00119C  5008               	movf	___lldiv@divisor+3,w,c
  1610  00119E  5A04               	subwfb	___lldiv@dividend+3,f,c
  1611  0011A0  8009               	bsf	___lldiv@quotient,0,c
  1612  0011A2                     l1776:
  1613  0011A2  90D8               	bcf	status,0,c
  1614  0011A4  3208               	rrcf	___lldiv@divisor+3,f,c
  1615  0011A6  3207               	rrcf	___lldiv@divisor+2,f,c
  1616  0011A8  3206               	rrcf	___lldiv@divisor+1,f,c
  1617  0011AA  3205               	rrcf	___lldiv@divisor,f,c
  1618  0011AC  2E0D               	decfsz	___lldiv@counter,f,c
  1619  0011AE  D7E1               	goto	l1768
  1620  0011B0                     l600:
  1621  0011B0  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1622  0011B4  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1623  0011B8  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1624  0011BC  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1625  0011C0  0012               	return		;funcret
  1626  0011C2                     __end_of___lldiv:
  1627                           	opt stack 0
  1628                           tblptru	equ	0xFF8
  1629                           tblptrh	equ	0xFF7
  1630                           tblptrl	equ	0xFF6
  1631                           tablat	equ	0xFF5
  1632                           prodh	equ	0xFF4
  1633                           prodl	equ	0xFF3
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           indf2	equ	0xFDF
  1637                           postinc2	equ	0xFDE
  1638                           postdec2	equ	0xFDD
  1639                           fsr2h	equ	0xFDA
  1640                           fsr2l	equ	0xFD9
  1641                           status	equ	0xFD8
  1642                           
  1643 ;; *************** function _keyNumber *****************
  1644 ;; Defined at:
  1645 ;;		line 6 in file "funciones.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;		None
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;  arreglo        20   18[COMRAM] unsigned char [20]
  1650 ;;  number          4   38[COMRAM] unsigned long 
  1651 ;;  i               2   45[COMRAM] unsigned int 
  1652 ;;  contador        2   42[COMRAM] unsigned int 
  1653 ;;  tecla           1   44[COMRAM] unsigned char 
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  4   14[COMRAM] unsigned long 
  1656 ;; Registers used:
  1657 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1663 ;;      Params:         4       0       0       0       0       0       0       0       0
  1664 ;;      Locals:        29       0       0       0       0       0       0       0       0
  1665 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1666 ;;      Totals:        33       0       0       0       0       0       0       0       0
  1667 ;;Total ram usage:       33 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    5
  1670 ;; This function calls:
  1671 ;;		_KP_Readbutton
  1672 ;;		_LCD_goto
  1673 ;;		_LCD_puts
  1674 ;;		_atoi
  1675 ;; This function is called by:
  1676 ;;		_riksFactors
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text5
  1681  000FE4                     __ptext5:
  1682                           	opt stack 0
  1683  000FE4                     _keyNumber:
  1684                           	opt stack 24
  1685                           
  1686                           ;funciones.c: 7: unsigned char arreglo[20];
  1687                           ;funciones.c: 8: unsigned int contador =0,i=0;
  1688                           
  1689                           ;incstack = 0
  1690  000FE4  0E00               	movlw	0
  1691  000FE6  6E2C               	movwf	keyNumber@contador+1,c
  1692  000FE8  0E00               	movlw	0
  1693  000FEA  6E2B               	movwf	keyNumber@contador,c
  1694  000FEC  0E00               	movlw	0
  1695  000FEE  6E2F               	movwf	keyNumber@i+1,c
  1696  000FF0  0E00               	movlw	0
  1697  000FF2  6E2E               	movwf	keyNumber@i,c
  1698  000FF4                     l1798:
  1699  000FF4  502F               	movf	keyNumber@i+1,w,c
  1700  000FF6  E10F               	bnz	l1808
  1701  000FF8  0E0A               	movlw	10
  1702  000FFA  5C2E               	subwf	keyNumber@i,w,c
  1703  000FFC  B0D8               	btfsc	status,0,c
  1704  000FFE  D00B               	goto	l1808
  1705                           
  1706                           ;funciones.c: 11: arreglo[i]=0;
  1707  001000  0E13               	movlw	low keyNumber@arreglo
  1708  001002  242E               	addwf	keyNumber@i,w,c
  1709  001004  6ED9               	movwf	fsr2l,c
  1710  001006  0E00               	movlw	high keyNumber@arreglo
  1711  001008  202F               	addwfc	keyNumber@i+1,w,c
  1712  00100A  6EDA               	movwf	fsr2h,c
  1713  00100C  0E00               	movlw	0
  1714  00100E  6EDF               	movwf	indf2,c
  1715  001010  4A2E               	infsnz	keyNumber@i,f,c
  1716  001012  2A2F               	incf	keyNumber@i+1,f,c
  1717  001014  D7EF               	goto	l1798
  1718  001016                     l1808:
  1719                           
  1720                           ;funciones.c: 15: tecla = KP_Readbutton();
  1721  001016  EC71  F006         	call	_KP_Readbutton	;wreg free
  1722  00101A  6E2D               	movwf	keyNumber@tecla,c
  1723                           
  1724                           ;funciones.c: 17: if (tecla != '+'){
  1725  00101C  0E2B               	movlw	43
  1726  00101E  182D               	xorwf	keyNumber@tecla,w,c
  1727  001020  B4D8               	btfsc	status,2,c
  1728  001022  D019               	goto	l1820
  1729                           
  1730                           ;funciones.c: 18: arreglo[contador]= tecla;
  1731  001024  0E13               	movlw	low keyNumber@arreglo
  1732  001026  242B               	addwf	keyNumber@contador,w,c
  1733  001028  6ED9               	movwf	fsr2l,c
  1734  00102A  0E00               	movlw	high keyNumber@arreglo
  1735  00102C  202C               	addwfc	keyNumber@contador+1,w,c
  1736  00102E  6EDA               	movwf	fsr2h,c
  1737  001030  C02D  FFDF         	movff	keyNumber@tecla,indf2
  1738                           
  1739                           ;funciones.c: 19: LCD_goto(LCD_01_ADDRESS,2,1);
  1740  001034  0E02               	movlw	2
  1741  001036  6E0C               	movwf	LCD_goto@row,c
  1742  001038  0E01               	movlw	1
  1743  00103A  6E0D               	movwf	LCD_goto@column,c
  1744  00103C  503B               	movf	_LCD_01_ADDRESS,w,c
  1745  00103E  ECE1  F008         	call	_LCD_goto
  1746                           
  1747                           ;funciones.c: 20: LCD_puts(LCD_01_ADDRESS, arreglo);
  1748  001042  0E13               	movlw	low keyNumber@arreglo
  1749  001044  6E0A               	movwf	LCD_puts@s,c
  1750  001046  0E00               	movlw	high keyNumber@arreglo
  1751  001048  6E0B               	movwf	LCD_puts@s+1,c
  1752  00104A  503B               	movf	_LCD_01_ADDRESS,w,c
  1753  00104C  EC51  F009         	call	_LCD_puts
  1754                           
  1755                           ;funciones.c: 21: contador++;
  1756  001050  4A2B               	infsnz	keyNumber@contador,f,c
  1757  001052  2A2C               	incf	keyNumber@contador+1,f,c
  1758                           
  1759                           ;funciones.c: 23: }
  1760  001054  D7E0               	goto	l1808
  1761  001056                     l1820:
  1762                           
  1763                           ;funciones.c: 24: else
  1764                           ;funciones.c: 25: {
  1765                           ;funciones.c: 26: LCD_goto(LCD_01_ADDRESS,2,1);
  1766  001056  0E02               	movlw	2
  1767  001058  6E0C               	movwf	LCD_goto@row,c
  1768  00105A  0E01               	movlw	1
  1769  00105C  6E0D               	movwf	LCD_goto@column,c
  1770  00105E  503B               	movf	_LCD_01_ADDRESS,w,c
  1771  001060  ECE1  F008         	call	_LCD_goto
  1772                           
  1773                           ;funciones.c: 27: LCD_puts(LCD_01_ADDRESS, arreglo);
  1774  001064  0E13               	movlw	low keyNumber@arreglo
  1775  001066  6E0A               	movwf	LCD_puts@s,c
  1776  001068  0E00               	movlw	high keyNumber@arreglo
  1777  00106A  6E0B               	movwf	LCD_puts@s+1,c
  1778  00106C  503B               	movf	_LCD_01_ADDRESS,w,c
  1779  00106E  EC51  F009         	call	_LCD_puts
  1780                           
  1781                           ;funciones.c: 29: }
  1782                           ;funciones.c: 33: }
  1783                           ;funciones.c: 35: number = (unsigned long int)atoi(arreglo);
  1784                           
  1785                           ;funciones.c: 28: break;
  1786  001072  0E13               	movlw	low keyNumber@arreglo
  1787  001074  6E07               	movwf	atoi@s,c
  1788  001076  0E00               	movlw	high keyNumber@arreglo
  1789  001078  6E08               	movwf	atoi@s+1,c
  1790  00107A  EC8B  F007         	call	_atoi	;wreg free
  1791  00107E  C007  F027         	movff	?_atoi,keyNumber@number
  1792  001082  C008  F028         	movff	?_atoi+1,keyNumber@number+1
  1793  001086  0E00               	movlw	0
  1794  001088  BE28               	btfsc	keyNumber@number+1,7,c
  1795  00108A  0EFF               	movlw	-1
  1796  00108C  6E29               	movwf	keyNumber@number+2,c
  1797  00108E  6E2A               	movwf	keyNumber@number+3,c
  1798                           
  1799                           ;funciones.c: 36: return number;
  1800  001090  C027  F00F         	movff	keyNumber@number,?_keyNumber
  1801  001094  C028  F010         	movff	keyNumber@number+1,?_keyNumber+1
  1802  001098  C029  F011         	movff	keyNumber@number+2,?_keyNumber+2
  1803  00109C  C02A  F012         	movff	keyNumber@number+3,?_keyNumber+3
  1804  0010A0  0012               	return	
  1805  0010A2                     __end_of_keyNumber:
  1806                           	opt stack 0
  1807                           tblptru	equ	0xFF8
  1808                           tblptrh	equ	0xFF7
  1809                           tblptrl	equ	0xFF6
  1810                           tablat	equ	0xFF5
  1811                           prodh	equ	0xFF4
  1812                           prodl	equ	0xFF3
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           indf2	equ	0xFDF
  1816                           postinc2	equ	0xFDE
  1817                           postdec2	equ	0xFDD
  1818                           fsr2h	equ	0xFDA
  1819                           fsr2l	equ	0xFD9
  1820                           status	equ	0xFD8
  1821                           
  1822 ;; *************** function _atoi *****************
  1823 ;; Defined at:
  1824 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  s               2    6[COMRAM] PTR const unsigned char 
  1827 ;;		 -> keyNumber@arreglo(20), 
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;  a               2   11[COMRAM] int 
  1830 ;;  sign            1   10[COMRAM] unsigned char 
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  2    6[COMRAM] int 
  1833 ;; Registers used:
  1834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1840 ;;      Params:         2       0       0       0       0       0       0       0       0
  1841 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1842 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1843 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1844 ;;Total ram usage:        7 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    1
  1847 ;; This function calls:
  1848 ;;		___wmul
  1849 ;;		_isdigit
  1850 ;; This function is called by:
  1851 ;;		_keyNumber
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text6
  1856  000F16                     __ptext6:
  1857                           	opt stack 0
  1858  000F16                     _atoi:
  1859                           	opt stack 27
  1860                           
  1861                           ;incstack = 0
  1862  000F16  D002               	goto	l1734
  1863  000F18                     l1732:
  1864  000F18  4A07               	infsnz	atoi@s,f,c
  1865  000F1A  2A08               	incf	atoi@s+1,f,c
  1866  000F1C                     l1734:
  1867  000F1C  C007  FFD9         	movff	atoi@s,fsr2l
  1868  000F20  C008  FFDA         	movff	atoi@s+1,fsr2h
  1869  000F24  0E20               	movlw	32
  1870  000F26  18DE               	xorwf	postinc2,w,c
  1871  000F28  B4D8               	btfsc	status,2,c
  1872  000F2A  D7F6               	goto	l1732
  1873  000F2C  C007  FFD9         	movff	atoi@s,fsr2l
  1874  000F30  C008  FFDA         	movff	atoi@s+1,fsr2h
  1875  000F34  0E09               	movlw	9
  1876  000F36  18DE               	xorwf	postinc2,w,c
  1877  000F38  B4D8               	btfsc	status,2,c
  1878  000F3A  D7EE               	goto	l1732
  1879  000F3C  0E00               	movlw	0
  1880  000F3E  6E0D               	movwf	atoi@a+1,c
  1881  000F40  0E00               	movlw	0
  1882  000F42  6E0C               	movwf	atoi@a,c
  1883  000F44  0E00               	movlw	0
  1884  000F46  6E0B               	movwf	atoi@sign,c
  1885  000F48  C007  FFD9         	movff	atoi@s,fsr2l
  1886  000F4C  C008  FFDA         	movff	atoi@s+1,fsr2h
  1887  000F50  0E2D               	movlw	45
  1888  000F52  18DE               	xorwf	postinc2,w,c
  1889  000F54  A4D8               	btfss	status,2,c
  1890  000F56  D002               	goto	l1744
  1891  000F58  2A0B               	incf	atoi@sign,f,c
  1892  000F5A  D024               	goto	l1750
  1893  000F5C                     l1744:
  1894  000F5C  C007  FFD9         	movff	atoi@s,fsr2l
  1895  000F60  C008  FFDA         	movff	atoi@s+1,fsr2h
  1896  000F64  0E2B               	movlw	43
  1897  000F66  18DE               	xorwf	postinc2,w,c
  1898  000F68  A4D8               	btfss	status,2,c
  1899  000F6A  D01E               	goto	l1752
  1900  000F6C  D01B               	goto	l1750
  1901  000F6E                     l1748:
  1902  000F6E  C00C  F001         	movff	atoi@a,___wmul@multiplier
  1903  000F72  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  1904  000F76  0E00               	movlw	0
  1905  000F78  6E04               	movwf	___wmul@multiplicand+1,c
  1906  000F7A  0E0A               	movlw	10
  1907  000F7C  6E03               	movwf	___wmul@multiplicand,c
  1908  000F7E  EC2F  F00A         	call	___wmul	;wreg free
  1909  000F82  C007  FFD9         	movff	atoi@s,fsr2l
  1910  000F86  C008  FFDA         	movff	atoi@s+1,fsr2h
  1911  000F8A  50DF               	movf	indf2,w,c
  1912  000F8C  6E09               	movwf	??_atoi& (0+255),c
  1913  000F8E  6A0A               	clrf	(??_atoi+1)& (0+255),c
  1914  000F90  5001               	movf	?___wmul,w,c
  1915  000F92  2609               	addwf	??_atoi,f,c
  1916  000F94  5002               	movf	?___wmul+1,w,c
  1917  000F96  220A               	addwfc	??_atoi+1,f,c
  1918  000F98  0ED0               	movlw	208
  1919  000F9A  2409               	addwf	??_atoi,w,c
  1920  000F9C  6E0C               	movwf	atoi@a,c
  1921  000F9E  0EFF               	movlw	255
  1922  000FA0  200A               	addwfc	??_atoi+1,w,c
  1923  000FA2  6E0D               	movwf	atoi@a+1,c
  1924  000FA4                     l1750:
  1925  000FA4  4A07               	infsnz	atoi@s,f,c
  1926  000FA6  2A08               	incf	atoi@s+1,f,c
  1927  000FA8                     l1752:
  1928  000FA8  C007  FFD9         	movff	atoi@s,fsr2l
  1929  000FAC  C008  FFDA         	movff	atoi@s+1,fsr2h
  1930  000FB0  50DF               	movf	indf2,w,c
  1931  000FB2  EC52  F00A         	call	_isdigit
  1932  000FB6  B0D8               	btfsc	status,0,c
  1933  000FB8  D7DA               	goto	l1748
  1934  000FBA  500B               	movf	atoi@sign,w,c
  1935  000FBC  B4D8               	btfsc	status,2,c
  1936  000FBE  D00D               	goto	l403
  1937  000FC0  C00C  F009         	movff	atoi@a,??_atoi
  1938  000FC4  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  1939  000FC8  1E09               	comf	??_atoi,f,c
  1940  000FCA  1E0A               	comf	??_atoi+1,f,c
  1941  000FCC  4A09               	infsnz	??_atoi,f,c
  1942  000FCE  2A0A               	incf	??_atoi+1,f,c
  1943  000FD0  C009  F007         	movff	??_atoi,?_atoi
  1944  000FD4  C00A  F008         	movff	??_atoi+1,?_atoi+1
  1945  000FD8  0012               	return	
  1946  000FDA                     l403:
  1947  000FDA  C00C  F007         	movff	atoi@a,?_atoi
  1948  000FDE  C00D  F008         	movff	atoi@a+1,?_atoi+1
  1949  000FE2  0012               	return		;funcret
  1950  000FE4                     __end_of_atoi:
  1951                           	opt stack 0
  1952                           tblptru	equ	0xFF8
  1953                           tblptrh	equ	0xFF7
  1954                           tblptrl	equ	0xFF6
  1955                           tablat	equ	0xFF5
  1956                           prodh	equ	0xFF4
  1957                           prodl	equ	0xFF3
  1958                           postinc0	equ	0xFEE
  1959                           wreg	equ	0xFE8
  1960                           indf2	equ	0xFDF
  1961                           postinc2	equ	0xFDE
  1962                           postdec2	equ	0xFDD
  1963                           fsr2h	equ	0xFDA
  1964                           fsr2l	equ	0xFD9
  1965                           status	equ	0xFD8
  1966                           
  1967 ;; *************** function _isdigit *****************
  1968 ;; Defined at:
  1969 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  c               1    wreg     unsigned char 
  1972 ;; Auto vars:     Size  Location     Type
  1973 ;;  c               1    2[COMRAM] unsigned char 
  1974 ;; Return value:  Size  Location     Type
  1975 ;;		None               void
  1976 ;; Registers used:
  1977 ;;		wreg, status,2, status,0
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1983 ;;      Params:         0       0       0       0       0       0       0       0       0
  1984 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1985 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1986 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1987 ;;Total ram usage:        3 bytes
  1988 ;; Hardware stack levels used:    1
  1989 ;; This function calls:
  1990 ;;		Nothing
  1991 ;; This function is called by:
  1992 ;;		_atoi
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text7
  1997  0014A4                     __ptext7:
  1998                           	opt stack 0
  1999  0014A4                     _isdigit:
  2000                           	opt stack 27
  2001                           
  2002                           ;incstack = 0
  2003                           ;isdigit@c stored from wreg
  2004  0014A4  6E03               	movwf	isdigit@c,c
  2005  0014A6  0E00               	movlw	0
  2006  0014A8  6E02               	movwf	_isdigit$831,c
  2007  0014AA  0E3A               	movlw	58
  2008  0014AC  6003               	cpfslt	isdigit@c,c
  2009  0014AE  D005               	goto	l1598
  2010  0014B0  0E2F               	movlw	47
  2011  0014B2  6403               	cpfsgt	isdigit@c,c
  2012  0014B4  D002               	goto	l1598
  2013  0014B6  0E01               	movlw	1
  2014  0014B8  6E02               	movwf	_isdigit$831,c
  2015  0014BA                     l1598:
  2016  0014BA  C002  F001         	movff	_isdigit$831,??_isdigit
  2017  0014BE  3001               	rrcf	??_isdigit,w,c
  2018  0014C0  0012               	return	
  2019  0014C2                     __end_of_isdigit:
  2020                           	opt stack 0
  2021                           tblptru	equ	0xFF8
  2022                           tblptrh	equ	0xFF7
  2023                           tblptrl	equ	0xFF6
  2024                           tablat	equ	0xFF5
  2025                           prodh	equ	0xFF4
  2026                           prodl	equ	0xFF3
  2027                           postinc0	equ	0xFEE
  2028                           wreg	equ	0xFE8
  2029                           indf2	equ	0xFDF
  2030                           postinc2	equ	0xFDE
  2031                           postdec2	equ	0xFDD
  2032                           fsr2h	equ	0xFDA
  2033                           fsr2l	equ	0xFD9
  2034                           status	equ	0xFD8
  2035                           
  2036 ;; *************** function ___wmul *****************
  2037 ;; Defined at:
  2038 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;  multiplier      2    0[COMRAM] unsigned int 
  2041 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;  product         2    4[COMRAM] unsigned int 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  2    0[COMRAM] unsigned int 
  2046 ;; Registers used:
  2047 ;;		wreg, status,2, status,0, prodl, prodh
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2053 ;;      Params:         4       0       0       0       0       0       0       0       0
  2054 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2055 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2056 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2057 ;;Total ram usage:        6 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; This function calls:
  2060 ;;		Nothing
  2061 ;; This function is called by:
  2062 ;;		_atoi
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           	psect	text8
  2067  00145E                     __ptext8:
  2068                           	opt stack 0
  2069  00145E                     ___wmul:
  2070                           	opt stack 27
  2071                           
  2072                           ;incstack = 0
  2073  00145E  5001               	movf	___wmul@multiplier,w,c
  2074  001460  0203               	mulwf	___wmul@multiplicand,c
  2075  001462  CFF3 F005          	movff	prodl,___wmul@product
  2076  001466  CFF4 F006          	movff	prodh,___wmul@product+1
  2077  00146A  5001               	movf	___wmul@multiplier,w,c
  2078  00146C  0204               	mulwf	___wmul@multiplicand+1,c
  2079  00146E  50F3               	movf	prodl,w,c
  2080  001470  2606               	addwf	___wmul@product+1,f,c
  2081  001472  5002               	movf	___wmul@multiplier+1,w,c
  2082  001474  0203               	mulwf	___wmul@multiplicand,c
  2083  001476  50F3               	movf	prodl,w,c
  2084  001478  2606               	addwf	___wmul@product+1,f,c
  2085  00147A  C005  F001         	movff	___wmul@product,?___wmul
  2086  00147E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2087  001482  0012               	return	
  2088  001484                     __end_of___wmul:
  2089                           	opt stack 0
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           prodh	equ	0xFF4
  2095                           prodl	equ	0xFF3
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           indf2	equ	0xFDF
  2099                           postinc2	equ	0xFDE
  2100                           postdec2	equ	0xFDD
  2101                           fsr2h	equ	0xFDA
  2102                           fsr2l	equ	0xFD9
  2103                           status	equ	0xFD8
  2104                           
  2105 ;; *************** function _LCD_puts *****************
  2106 ;; Defined at:
  2107 ;;		line 93 in file "i2c_lcd.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;  addr            1    wreg     unsigned char 
  2110 ;;  s               2    9[COMRAM] PTR unsigned char 
  2111 ;;		 -> riksFactors@text(80), STR_12(25), STR_11(22), STR_10(25), 
  2112 ;;		 -> STR_9(25), STR_8(20), STR_7(25), STR_6(25), 
  2113 ;;		 -> STR_5(18), STR_4(25), STR_3(12), STR_2(25), 
  2114 ;;		 -> STR_1(25), keyNumber@arreglo(20), 
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  addr            1   13[COMRAM] unsigned char 
  2117 ;;  i               2   11[COMRAM] int 
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2127 ;;      Params:         2       0       0       0       0       0       0       0       0
  2128 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2130 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2131 ;;Total ram usage:        5 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; Hardware stack levels required when called:    4
  2134 ;; This function calls:
  2135 ;;		_LCD_putch
  2136 ;; This function is called by:
  2137 ;;		_keyNumber
  2138 ;;		_riksFactors
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           	psect	text9
  2143  0012A2                     __ptext9:
  2144                           	opt stack 0
  2145  0012A2                     _LCD_puts:
  2146                           	opt stack 24
  2147                           
  2148                           ;incstack = 0
  2149                           ;LCD_puts@addr stored from wreg
  2150  0012A2  6E0E               	movwf	LCD_puts@addr,c
  2151                           
  2152                           ;i2c_lcd.c: 95: int i=0;
  2153  0012A4  0E00               	movlw	0
  2154  0012A6  6E0D               	movwf	LCD_puts@i+1,c
  2155  0012A8  0E00               	movlw	0
  2156  0012AA  6E0C               	movwf	LCD_puts@i,c
  2157                           
  2158                           ;i2c_lcd.c: 96: while(*s != 0) LCD_putch(addr, *s++);
  2159  0012AC  D016               	goto	l1728
  2160  0012AE                     l1724:
  2161  0012AE  C00A  FFF6         	movff	LCD_puts@s,tblptrl
  2162  0012B2  C00B  FFF7         	movff	LCD_puts@s+1,tblptrh
  2163  0012B6  6AF8               	clrf	tblptru,c
  2164  0012B8  0E07               	movlw	(high __ramtop+-1)
  2165  0012BA  64F7               	cpfsgt	tblptrh,c
  2166  0012BC  D003               	bra	u1197
  2167  0012BE  0008               	tblrd		*
  2168  0012C0  50F5               	movf	tablat,w,c
  2169  0012C2  D005               	bra	u1190
  2170  0012C4                     u1197:
  2171  0012C4  CFF6 FFE9          	movff	tblptrl,fsr0l
  2172  0012C8  CFF7 FFEA          	movff	tblptrh,fsr0h
  2173  0012CC  50EF               	movf	indf0,w,c
  2174  0012CE                     u1190:
  2175  0012CE  6E07               	movwf	LCD_putch@data,c
  2176  0012D0  500E               	movf	LCD_puts@addr,w,c
  2177  0012D2  ECDE  F009         	call	_LCD_putch
  2178  0012D6  4A0A               	infsnz	LCD_puts@s,f,c
  2179  0012D8  2A0B               	incf	LCD_puts@s+1,f,c
  2180  0012DA                     l1728:
  2181  0012DA  C00A  FFF6         	movff	LCD_puts@s,tblptrl
  2182  0012DE  C00B  FFF7         	movff	LCD_puts@s+1,tblptrh
  2183  0012E2  6AF8               	clrf	tblptru,c
  2184  0012E4  0E07               	movlw	(high __ramtop+-1)
  2185  0012E6  64F7               	cpfsgt	tblptrh,c
  2186  0012E8  D003               	bra	u1207
  2187  0012EA  0008               	tblrd		*
  2188  0012EC  50F5               	movf	tablat,w,c
  2189  0012EE  D005               	bra	u1200
  2190  0012F0                     u1207:
  2191  0012F0  CFF6 FFE9          	movff	tblptrl,fsr0l
  2192  0012F4  CFF7 FFEA          	movff	tblptrh,fsr0h
  2193  0012F8  50EF               	movf	indf0,w,c
  2194  0012FA                     u1200:
  2195  0012FA  0900               	iorlw	0
  2196  0012FC  B4D8               	btfsc	status,2,c
  2197  0012FE  0012               	return	
  2198  001300  D7D6               	goto	l1724
  2199  001302                     __end_of_LCD_puts:
  2200                           	opt stack 0
  2201                           tblptru	equ	0xFF8
  2202                           tblptrh	equ	0xFF7
  2203                           tblptrl	equ	0xFF6
  2204                           tablat	equ	0xFF5
  2205                           prodh	equ	0xFF4
  2206                           prodl	equ	0xFF3
  2207                           indf0	equ	0xFEF
  2208                           postinc0	equ	0xFEE
  2209                           fsr0h	equ	0xFEA
  2210                           fsr0l	equ	0xFE9
  2211                           wreg	equ	0xFE8
  2212                           indf2	equ	0xFDF
  2213                           postinc2	equ	0xFDE
  2214                           postdec2	equ	0xFDD
  2215                           fsr2h	equ	0xFDA
  2216                           fsr2l	equ	0xFD9
  2217                           status	equ	0xFD8
  2218                           
  2219 ;; *************** function _LCD_putch *****************
  2220 ;; Defined at:
  2221 ;;		line 50 in file "i2c_lcd.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  addr            1    wreg     unsigned char 
  2224 ;;  data            1    6[COMRAM] unsigned char 
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;  addr            1    7[COMRAM] unsigned char 
  2227 ;;  lcddata         1    8[COMRAM] unsigned char 
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  1    wreg      void 
  2230 ;; Registers used:
  2231 ;;		wreg, status,2, status,0, cstack
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2237 ;;      Params:         1       0       0       0       0       0       0       0       0
  2238 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2239 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2240 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2241 ;;Total ram usage:        3 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    3
  2244 ;; This function calls:
  2245 ;;		_I2C_PCF8574_Write
  2246 ;; This function is called by:
  2247 ;;		_LCD_puts
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text10
  2252  0013BC                     __ptext10:
  2253                           	opt stack 0
  2254  0013BC                     _LCD_putch:
  2255                           	opt stack 24
  2256                           
  2257                           ;incstack = 0
  2258                           ;LCD_putch@addr stored from wreg
  2259  0013BC  6E08               	movwf	LCD_putch@addr,c
  2260                           
  2261                           ;i2c_lcd.c: 52: unsigned char lcddata;
  2262                           ;i2c_lcd.c: 53: lcddata = (data & 0xF0)|0x08|0x01;
  2263  0013BE  5007               	movf	LCD_putch@data,w,c
  2264  0013C0  0BF0               	andlw	240
  2265  0013C2  0909               	iorlw	9
  2266  0013C4  6E09               	movwf	LCD_putch@lcddata,c
  2267                           
  2268                           ;i2c_lcd.c: 54: I2C_PCF8574_Write(addr,lcddata | 0x04);
  2269  0013C6  5009               	movf	LCD_putch@lcddata,w,c
  2270  0013C8  0904               	iorlw	4
  2271  0013CA  6E03               	movwf	I2C_PCF8574_Write@value,c
  2272  0013CC  5008               	movf	LCD_putch@addr,w,c
  2273  0013CE  EC42  F00A         	call	_I2C_PCF8574_Write
  2274                           
  2275                           ;i2c_lcd.c: 55: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  2276  0013D2  5009               	movf	LCD_putch@lcddata,w,c
  2277  0013D4  0BFB               	andlw	251
  2278  0013D6  6E03               	movwf	I2C_PCF8574_Write@value,c
  2279  0013D8  5008               	movf	LCD_putch@addr,w,c
  2280  0013DA  EC42  F00A         	call	_I2C_PCF8574_Write
  2281                           
  2282                           ;i2c_lcd.c: 56: lcddata = ((data << 4) & 0xF0)|0x08|0x01;
  2283  0013DE  3807               	swapf	LCD_putch@data,w,c
  2284  0013E0  0BF0               	andlw	240
  2285  0013E2  0BF0               	andlw	240
  2286  0013E4  0909               	iorlw	9
  2287  0013E6  6E09               	movwf	LCD_putch@lcddata,c
  2288                           
  2289                           ;i2c_lcd.c: 57: I2C_PCF8574_Write(addr,lcddata | 0x04);
  2290  0013E8  5009               	movf	LCD_putch@lcddata,w,c
  2291  0013EA  0904               	iorlw	4
  2292  0013EC  6E03               	movwf	I2C_PCF8574_Write@value,c
  2293  0013EE  5008               	movf	LCD_putch@addr,w,c
  2294  0013F0  EC42  F00A         	call	_I2C_PCF8574_Write
  2295                           
  2296                           ;i2c_lcd.c: 58: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  2297  0013F4  5009               	movf	LCD_putch@lcddata,w,c
  2298  0013F6  0BFB               	andlw	251
  2299  0013F8  6E03               	movwf	I2C_PCF8574_Write@value,c
  2300  0013FA  5008               	movf	LCD_putch@addr,w,c
  2301  0013FC  EC42  F00A         	call	_I2C_PCF8574_Write
  2302  001400  0012               	return		;funcret
  2303  001402                     __end_of_LCD_putch:
  2304                           	opt stack 0
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           prodh	equ	0xFF4
  2310                           prodl	equ	0xFF3
  2311                           indf0	equ	0xFEF
  2312                           postinc0	equ	0xFEE
  2313                           fsr0h	equ	0xFEA
  2314                           fsr0l	equ	0xFE9
  2315                           wreg	equ	0xFE8
  2316                           indf2	equ	0xFDF
  2317                           postinc2	equ	0xFDE
  2318                           postdec2	equ	0xFDD
  2319                           fsr2h	equ	0xFDA
  2320                           fsr2l	equ	0xFD9
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function _LCD_goto *****************
  2324 ;; Defined at:
  2325 ;;		line 80 in file "i2c_lcd.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;  addr            1    wreg     unsigned char 
  2328 ;;  row             1   11[COMRAM] unsigned char 
  2329 ;;  column          1   12[COMRAM] unsigned char 
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;  addr            1   13[COMRAM] unsigned char 
  2332 ;; Return value:  Size  Location     Type
  2333 ;;                  1    wreg      void 
  2334 ;; Registers used:
  2335 ;;		wreg, status,2, status,0, cstack
  2336 ;; Tracked objects:
  2337 ;;		On entry : 0/0
  2338 ;;		On exit  : 0/0
  2339 ;;		Unchanged: 0/0
  2340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2341 ;;      Params:         2       0       0       0       0       0       0       0       0
  2342 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2343 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2344 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2345 ;;Total ram usage:        3 bytes
  2346 ;; Hardware stack levels used:    1
  2347 ;; Hardware stack levels required when called:    4
  2348 ;; This function calls:
  2349 ;;		_LCD_putcmd
  2350 ;; This function is called by:
  2351 ;;		_keyNumber
  2352 ;;		_riksFactors
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	text11
  2357  0011C2                     __ptext11:
  2358                           	opt stack 0
  2359  0011C2                     _LCD_goto:
  2360                           	opt stack 24
  2361                           
  2362                           ;incstack = 0
  2363                           ;LCD_goto@addr stored from wreg
  2364  0011C2  6E0E               	movwf	LCD_goto@addr,c
  2365                           
  2366                           ;i2c_lcd.c: 81: switch(row){
  2367  0011C4  D02D               	goto	l1720
  2368  0011C6                     l1708:
  2369  0011C6  500D               	movf	LCD_goto@column,w,c
  2370  0011C8  0F7F               	addlw	127
  2371  0011CA  6E07               	movwf	LCD_putcmd@data,c
  2372  0011CC  0E01               	movlw	1
  2373  0011CE  6E08               	movwf	LCD_putcmd@cmdtype,c
  2374  0011D0  500E               	movf	LCD_goto@addr,w,c
  2375  0011D2  ECB0  F009         	call	_LCD_putcmd
  2376  0011D6  0012               	return	
  2377  0011D8                     l1710:
  2378  0011D8  500D               	movf	LCD_goto@column,w,c
  2379  0011DA  0FBF               	addlw	191
  2380  0011DC  6E07               	movwf	LCD_putcmd@data,c
  2381  0011DE  0E01               	movlw	1
  2382  0011E0  6E08               	movwf	LCD_putcmd@cmdtype,c
  2383  0011E2  500E               	movf	LCD_goto@addr,w,c
  2384  0011E4  ECB0  F009         	call	_LCD_putcmd
  2385  0011E8  0012               	return	
  2386  0011EA                     l1712:
  2387  0011EA  500D               	movf	LCD_goto@column,w,c
  2388  0011EC  0F93               	addlw	147
  2389  0011EE  6E07               	movwf	LCD_putcmd@data,c
  2390  0011F0  0E01               	movlw	1
  2391  0011F2  6E08               	movwf	LCD_putcmd@cmdtype,c
  2392  0011F4  500E               	movf	LCD_goto@addr,w,c
  2393  0011F6  ECB0  F009         	call	_LCD_putcmd
  2394  0011FA  0012               	return	
  2395  0011FC                     l1714:
  2396  0011FC  500D               	movf	LCD_goto@column,w,c
  2397  0011FE  0FD3               	addlw	211
  2398  001200  6E07               	movwf	LCD_putcmd@data,c
  2399  001202  0E01               	movlw	1
  2400  001204  6E08               	movwf	LCD_putcmd@cmdtype,c
  2401  001206  500E               	movf	LCD_goto@addr,w,c
  2402  001208  ECB0  F009         	call	_LCD_putcmd
  2403  00120C  0012               	return	
  2404  00120E                     l1716:
  2405  00120E  500D               	movf	LCD_goto@column,w,c
  2406  001210  0F7F               	addlw	127
  2407  001212  6E07               	movwf	LCD_putcmd@data,c
  2408  001214  0E01               	movlw	1
  2409  001216  6E08               	movwf	LCD_putcmd@cmdtype,c
  2410  001218  500E               	movf	LCD_goto@addr,w,c
  2411  00121A  ECB0  F009         	call	_LCD_putcmd
  2412                           
  2413                           ;i2c_lcd.c: 87: }
  2414  00121E  0012               	return	
  2415  001220                     l1720:
  2416  001220  500C               	movf	LCD_goto@row,w,c
  2417                           
  2418                           ; Switch size 1, requested type "space"
  2419                           ; Number of cases is 4, Range of values is 1 to 4
  2420                           ; switch strategies available:
  2421                           ; Name         Instructions Cycles
  2422                           ; simple_byte           13     7 (average)
  2423                           ;	Chosen strategy is simple_byte
  2424  001222  0A01               	xorlw	1	; case 1
  2425  001224  B4D8               	btfsc	status,2,c
  2426  001226  D7CF               	goto	l1708
  2427  001228  0A03               	xorlw	3	; case 2
  2428  00122A  B4D8               	btfsc	status,2,c
  2429  00122C  D7D5               	goto	l1710
  2430  00122E  0A01               	xorlw	1	; case 3
  2431  001230  B4D8               	btfsc	status,2,c
  2432  001232  D7DB               	goto	l1712
  2433  001234  0A07               	xorlw	7	; case 4
  2434  001236  B4D8               	btfsc	status,2,c
  2435  001238  D7E1               	goto	l1714
  2436  00123A  D7E9               	goto	l1716
  2437  00123C                     __end_of_LCD_goto:
  2438                           	opt stack 0
  2439                           tblptru	equ	0xFF8
  2440                           tblptrh	equ	0xFF7
  2441                           tblptrl	equ	0xFF6
  2442                           tablat	equ	0xFF5
  2443                           prodh	equ	0xFF4
  2444                           prodl	equ	0xFF3
  2445                           indf0	equ	0xFEF
  2446                           postinc0	equ	0xFEE
  2447                           fsr0h	equ	0xFEA
  2448                           fsr0l	equ	0xFE9
  2449                           wreg	equ	0xFE8
  2450                           indf2	equ	0xFDF
  2451                           postinc2	equ	0xFDE
  2452                           postdec2	equ	0xFDD
  2453                           fsr2h	equ	0xFDA
  2454                           fsr2l	equ	0xFD9
  2455                           status	equ	0xFD8
  2456                           
  2457 ;; *************** function _KP_Readbutton *****************
  2458 ;; Defined at:
  2459 ;;		line 30 in file "KeyPad Library.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;		None
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;  key             1    8[COMRAM] unsigned char 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  1    wreg      unsigned char 
  2466 ;; Registers used:
  2467 ;;		wreg, status,2, status,0, cstack
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2473 ;;      Params:         0       0       0       0       0       0       0       0       0
  2474 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2475 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2476 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2477 ;;Total ram usage:        1 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:    1
  2480 ;; This function calls:
  2481 ;;		_KP_scan
  2482 ;; This function is called by:
  2483 ;;		_keyNumber
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text12
  2488  000CE2                     __ptext12:
  2489                           	opt stack 0
  2490  000CE2                     _KP_Readbutton:
  2491                           	opt stack 27
  2492                           
  2493                           ;KeyPad Library.c: 32: char key = ',';
  2494                           
  2495                           ;incstack = 0
  2496  000CE2  0E2C               	movlw	44
  2497  000CE4  6E09               	movwf	KP_Readbutton@key,c
  2498                           
  2499                           ;KeyPad Library.c: 33: while(!((key = KP_scan()) == ','))
  2500  000CE6  D08F               	goto	l1700
  2501  000CE8                     l1604:
  2502                           
  2503                           ;KeyPad Library.c: 34: {
  2504                           ;KeyPad Library.c: 35: if(keynum == 1) { return key = '7'; }
  2505  000CE8  0439               	decf	_keynum,w,c
  2506  000CEA  103A               	iorwf	_keynum+1,w,c
  2507  000CEC  A4D8               	btfss	status,2,c
  2508  000CEE  D004               	goto	l1610
  2509  000CF0  0E37               	movlw	55
  2510  000CF2  6E09               	movwf	KP_Readbutton@key,c
  2511  000CF4  5009               	movf	KP_Readbutton@key,w,c
  2512  000CF6  0012               	return	
  2513  000CF8                     l1610:
  2514                           
  2515                           ;KeyPad Library.c: 36: if(keynum == 2) { return key = '8'; }
  2516  000CF8  0E02               	movlw	2
  2517  000CFA  1839               	xorwf	_keynum,w,c
  2518  000CFC  103A               	iorwf	_keynum+1,w,c
  2519  000CFE  A4D8               	btfss	status,2,c
  2520  000D00  D004               	goto	l1616
  2521  000D02  0E38               	movlw	56
  2522  000D04  6E09               	movwf	KP_Readbutton@key,c
  2523  000D06  5009               	movf	KP_Readbutton@key,w,c
  2524  000D08  0012               	return	
  2525  000D0A                     l1616:
  2526                           
  2527                           ;KeyPad Library.c: 37: if(keynum == 3) { return key = '9'; }
  2528  000D0A  0E03               	movlw	3
  2529  000D0C  1839               	xorwf	_keynum,w,c
  2530  000D0E  103A               	iorwf	_keynum+1,w,c
  2531  000D10  A4D8               	btfss	status,2,c
  2532  000D12  D004               	goto	l1622
  2533  000D14  0E39               	movlw	57
  2534  000D16  6E09               	movwf	KP_Readbutton@key,c
  2535  000D18  5009               	movf	KP_Readbutton@key,w,c
  2536  000D1A  0012               	return	
  2537  000D1C                     l1622:
  2538                           
  2539                           ;KeyPad Library.c: 38: if(keynum == 4) { return key = '/'; }
  2540  000D1C  0E04               	movlw	4
  2541  000D1E  1839               	xorwf	_keynum,w,c
  2542  000D20  103A               	iorwf	_keynum+1,w,c
  2543  000D22  A4D8               	btfss	status,2,c
  2544  000D24  D004               	goto	l1628
  2545  000D26  0E2F               	movlw	47
  2546  000D28  6E09               	movwf	KP_Readbutton@key,c
  2547  000D2A  5009               	movf	KP_Readbutton@key,w,c
  2548  000D2C  0012               	return	
  2549  000D2E                     l1628:
  2550                           
  2551                           ;KeyPad Library.c: 39: if(keynum == 5) { return key = '4'; }
  2552  000D2E  0E05               	movlw	5
  2553  000D30  1839               	xorwf	_keynum,w,c
  2554  000D32  103A               	iorwf	_keynum+1,w,c
  2555  000D34  A4D8               	btfss	status,2,c
  2556  000D36  D004               	goto	l1634
  2557  000D38  0E34               	movlw	52
  2558  000D3A  6E09               	movwf	KP_Readbutton@key,c
  2559  000D3C  5009               	movf	KP_Readbutton@key,w,c
  2560  000D3E  0012               	return	
  2561  000D40                     l1634:
  2562                           
  2563                           ;KeyPad Library.c: 40: if(keynum == 6) { return key = '5'; }
  2564  000D40  0E06               	movlw	6
  2565  000D42  1839               	xorwf	_keynum,w,c
  2566  000D44  103A               	iorwf	_keynum+1,w,c
  2567  000D46  A4D8               	btfss	status,2,c
  2568  000D48  D004               	goto	l1640
  2569  000D4A  0E35               	movlw	53
  2570  000D4C  6E09               	movwf	KP_Readbutton@key,c
  2571  000D4E  5009               	movf	KP_Readbutton@key,w,c
  2572  000D50  0012               	return	
  2573  000D52                     l1640:
  2574                           
  2575                           ;KeyPad Library.c: 41: if(keynum == 7) { return key = '6'; }
  2576  000D52  0E07               	movlw	7
  2577  000D54  1839               	xorwf	_keynum,w,c
  2578  000D56  103A               	iorwf	_keynum+1,w,c
  2579  000D58  A4D8               	btfss	status,2,c
  2580  000D5A  D004               	goto	l1646
  2581  000D5C  0E36               	movlw	54
  2582  000D5E  6E09               	movwf	KP_Readbutton@key,c
  2583  000D60  5009               	movf	KP_Readbutton@key,w,c
  2584  000D62  0012               	return	
  2585  000D64                     l1646:
  2586                           
  2587                           ;KeyPad Library.c: 42: if(keynum == 8) { return key = '*'; }
  2588  000D64  0E08               	movlw	8
  2589  000D66  1839               	xorwf	_keynum,w,c
  2590  000D68  103A               	iorwf	_keynum+1,w,c
  2591  000D6A  A4D8               	btfss	status,2,c
  2592  000D6C  D004               	goto	l1652
  2593  000D6E  0E2A               	movlw	42
  2594  000D70  6E09               	movwf	KP_Readbutton@key,c
  2595  000D72  5009               	movf	KP_Readbutton@key,w,c
  2596  000D74  0012               	return	
  2597  000D76                     l1652:
  2598                           
  2599                           ;KeyPad Library.c: 43: if(keynum == 9) { return key = '1'; }
  2600  000D76  0E09               	movlw	9
  2601  000D78  1839               	xorwf	_keynum,w,c
  2602  000D7A  103A               	iorwf	_keynum+1,w,c
  2603  000D7C  A4D8               	btfss	status,2,c
  2604  000D7E  D004               	goto	l1658
  2605  000D80  0E31               	movlw	49
  2606  000D82  6E09               	movwf	KP_Readbutton@key,c
  2607  000D84  5009               	movf	KP_Readbutton@key,w,c
  2608  000D86  0012               	return	
  2609  000D88                     l1658:
  2610                           
  2611                           ;KeyPad Library.c: 44: if(keynum == 10){ return key = '2';}
  2612  000D88  0E0A               	movlw	10
  2613  000D8A  1839               	xorwf	_keynum,w,c
  2614  000D8C  103A               	iorwf	_keynum+1,w,c
  2615  000D8E  A4D8               	btfss	status,2,c
  2616  000D90  D004               	goto	l1664
  2617  000D92  0E32               	movlw	50
  2618  000D94  6E09               	movwf	KP_Readbutton@key,c
  2619  000D96  5009               	movf	KP_Readbutton@key,w,c
  2620  000D98  0012               	return	
  2621  000D9A                     l1664:
  2622                           
  2623                           ;KeyPad Library.c: 45: if(keynum == 11){ return key = '3';}
  2624  000D9A  0E0B               	movlw	11
  2625  000D9C  1839               	xorwf	_keynum,w,c
  2626  000D9E  103A               	iorwf	_keynum+1,w,c
  2627  000DA0  A4D8               	btfss	status,2,c
  2628  000DA2  D004               	goto	l1670
  2629  000DA4  0E33               	movlw	51
  2630  000DA6  6E09               	movwf	KP_Readbutton@key,c
  2631  000DA8  5009               	movf	KP_Readbutton@key,w,c
  2632  000DAA  0012               	return	
  2633  000DAC                     l1670:
  2634                           
  2635                           ;KeyPad Library.c: 46: if(keynum == 12){ return key = '-';}
  2636  000DAC  0E0C               	movlw	12
  2637  000DAE  1839               	xorwf	_keynum,w,c
  2638  000DB0  103A               	iorwf	_keynum+1,w,c
  2639  000DB2  A4D8               	btfss	status,2,c
  2640  000DB4  D004               	goto	l1676
  2641  000DB6  0E2D               	movlw	45
  2642  000DB8  6E09               	movwf	KP_Readbutton@key,c
  2643  000DBA  5009               	movf	KP_Readbutton@key,w,c
  2644  000DBC  0012               	return	
  2645  000DBE                     l1676:
  2646                           
  2647                           ;KeyPad Library.c: 47: if(keynum == 13){ return key = 'd';}
  2648  000DBE  0E0D               	movlw	13
  2649  000DC0  1839               	xorwf	_keynum,w,c
  2650  000DC2  103A               	iorwf	_keynum+1,w,c
  2651  000DC4  A4D8               	btfss	status,2,c
  2652  000DC6  D004               	goto	l1682
  2653  000DC8  0E64               	movlw	100
  2654  000DCA  6E09               	movwf	KP_Readbutton@key,c
  2655  000DCC  5009               	movf	KP_Readbutton@key,w,c
  2656  000DCE  0012               	return	
  2657  000DD0                     l1682:
  2658                           
  2659                           ;KeyPad Library.c: 48: if(keynum == 14){ return key = '0';}
  2660  000DD0  0E0E               	movlw	14
  2661  000DD2  1839               	xorwf	_keynum,w,c
  2662  000DD4  103A               	iorwf	_keynum+1,w,c
  2663  000DD6  A4D8               	btfss	status,2,c
  2664  000DD8  D004               	goto	l1688
  2665  000DDA  0E30               	movlw	48
  2666  000DDC  6E09               	movwf	KP_Readbutton@key,c
  2667  000DDE  5009               	movf	KP_Readbutton@key,w,c
  2668  000DE0  0012               	return	
  2669  000DE2                     l1688:
  2670                           
  2671                           ;KeyPad Library.c: 49: if(keynum == 15){ return key = '=';}
  2672  000DE2  0E0F               	movlw	15
  2673  000DE4  1839               	xorwf	_keynum,w,c
  2674  000DE6  103A               	iorwf	_keynum+1,w,c
  2675  000DE8  A4D8               	btfss	status,2,c
  2676  000DEA  D004               	goto	l1694
  2677  000DEC  0E3D               	movlw	61
  2678  000DEE  6E09               	movwf	KP_Readbutton@key,c
  2679  000DF0  5009               	movf	KP_Readbutton@key,w,c
  2680  000DF2  0012               	return	
  2681  000DF4                     l1694:
  2682                           
  2683                           ;KeyPad Library.c: 50: if(keynum == 16){ return key = '+';}
  2684  000DF4  0E10               	movlw	16
  2685  000DF6  1839               	xorwf	_keynum,w,c
  2686  000DF8  103A               	iorwf	_keynum+1,w,c
  2687  000DFA  A4D8               	btfss	status,2,c
  2688  000DFC  D004               	goto	l1700
  2689  000DFE  0E2B               	movlw	43
  2690  000E00  6E09               	movwf	KP_Readbutton@key,c
  2691  000E02  5009               	movf	KP_Readbutton@key,w,c
  2692  000E04  0012               	return	
  2693  000E06                     l1700:
  2694  000E06  EC0D  F007         	call	_KP_scan	;wreg free
  2695  000E0A  5001               	movf	?_KP_scan,w,c
  2696  000E0C  6E09               	movwf	KP_Readbutton@key,c
  2697  000E0E  0E2C               	movlw	44
  2698  000E10  1809               	xorwf	KP_Readbutton@key,w,c
  2699  000E12  A4D8               	btfss	status,2,c
  2700  000E14  D769               	goto	l1604
  2701                           
  2702                           ;KeyPad Library.c: 51: }
  2703                           ;KeyPad Library.c: 52: return key;
  2704  000E16  5009               	movf	KP_Readbutton@key,w,c
  2705  000E18  0012               	return	
  2706  000E1A                     __end_of_KP_Readbutton:
  2707                           	opt stack 0
  2708                           tblptru	equ	0xFF8
  2709                           tblptrh	equ	0xFF7
  2710                           tblptrl	equ	0xFF6
  2711                           tablat	equ	0xFF5
  2712                           prodh	equ	0xFF4
  2713                           prodl	equ	0xFF3
  2714                           indf0	equ	0xFEF
  2715                           postinc0	equ	0xFEE
  2716                           fsr0h	equ	0xFEA
  2717                           fsr0l	equ	0xFE9
  2718                           wreg	equ	0xFE8
  2719                           indf2	equ	0xFDF
  2720                           postinc2	equ	0xFDE
  2721                           postdec2	equ	0xFDD
  2722                           fsr2h	equ	0xFDA
  2723                           fsr2l	equ	0xFD9
  2724                           status	equ	0xFD8
  2725                           
  2726 ;; *************** function _KP_scan *****************
  2727 ;; Defined at:
  2728 ;;		line 12 in file "KeyPad Library.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;		None
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  row             2    6[COMRAM] short 
  2733 ;;  press           2    4[COMRAM] short 
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  2    0[COMRAM] int 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, status,0
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2743 ;;      Params:         2       0       0       0       0       0       0       0       0
  2744 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2745 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2746 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2747 ;;Total ram usage:        8 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; This function calls:
  2750 ;;		Nothing
  2751 ;; This function is called by:
  2752 ;;		_KP_Readbutton
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           	psect	text13
  2757  000E1A                     __ptext13:
  2758                           	opt stack 0
  2759  000E1A                     _KP_scan:
  2760                           	opt stack 27
  2761                           
  2762                           ;KeyPad Library.c: 14: short row,press = 0;
  2763                           
  2764                           ;incstack = 0
  2765  000E1A  0E00               	movlw	0
  2766  000E1C  6E06               	movwf	KP_scan@press+1,c
  2767  000E1E  0E00               	movlw	0
  2768  000E20  6E05               	movwf	KP_scan@press,c
  2769                           
  2770                           ;KeyPad Library.c: 15: keynum = 0;
  2771  000E22  0E00               	movlw	0
  2772  000E24  6E3A               	movwf	_keynum+1,c
  2773  000E26  0E00               	movlw	0
  2774  000E28  6E39               	movwf	_keynum,c
  2775                           
  2776                           ;KeyPad Library.c: 16: for(row = 0; row < 4; row++)
  2777  000E2A  0E00               	movlw	0
  2778  000E2C  6E08               	movwf	KP_scan@row+1,c
  2779  000E2E  0E00               	movlw	0
  2780  000E30  6E07               	movwf	KP_scan@row,c
  2781  000E32  BE08               	btfsc	KP_scan@row+1,7,c
  2782  000E34  D006               	goto	l1506
  2783  000E36  5008               	movf	KP_scan@row+1,w,c
  2784  000E38  E165               	bnz	l1554
  2785  000E3A  0E04               	movlw	4
  2786  000E3C  5C07               	subwf	KP_scan@row,w,c
  2787  000E3E  B0D8               	btfsc	status,0,c
  2788  000E40  D061               	goto	l1554
  2789  000E42                     l1506:
  2790                           
  2791                           ;KeyPad Library.c: 17: {
  2792                           ;KeyPad Library.c: 18: LATD = (0x10<<row);
  2793  000E42  C007  F003         	movff	KP_scan@row,??_KP_scan
  2794  000E46  0E10               	movlw	16
  2795  000E48  6E04               	movwf	(??_KP_scan+1)& (0+255),c
  2796  000E4A  2A03               	incf	??_KP_scan,f,c
  2797  000E4C  D002               	goto	u884
  2798  000E4E                     u885:
  2799  000E4E  90D8               	bcf	status,0,c
  2800  000E50  3604               	rlcf	??_KP_scan+1,f,c
  2801  000E52                     u884:
  2802  000E52  2E03               	decfsz	??_KP_scan,f,c
  2803  000E54  D7FC               	goto	u885
  2804  000E56  5004               	movf	??_KP_scan+1,w,c
  2805  000E58  6E8C               	movwf	3980,c	;volatile
  2806                           
  2807                           ;KeyPad Library.c: 20: if(PORTDbits.RD0 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD0 == 1); return keynum+=1; press = 1;}
  2808  000E5A  A083               	btfss	3971,0,c	;volatile
  2809  000E5C  D010               	goto	l1518
  2810  000E5E  0EE4               	movlw	228
  2811  000E60                     u1447:
  2812  000E60  D000               	nop2	
  2813  000E62  D000               	nop2	
  2814  000E64  2EE8               	decfsz	wreg,f,c
  2815  000E66  D7FC               	bra	u1447
  2816  000E68  D000               	nop2	
  2817  000E6A  D000               	nop2	
  2818  000E6C                     l19:
  2819  000E6C  B083               	btfsc	3971,0,c	;volatile
  2820  000E6E  D7FE               	goto	l19
  2821  000E70  4A39               	infsnz	_keynum,f,c
  2822  000E72  2A3A               	incf	_keynum+1,f,c
  2823  000E74  C039  F001         	movff	_keynum,?_KP_scan
  2824  000E78  C03A  F002         	movff	_keynum+1,?_KP_scan+1
  2825  000E7C  0012               	return	
  2826  000E7E                     l1518:
  2827                           
  2828                           ;KeyPad Library.c: 21: if(PORTDbits.RD1 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD1 == 1); return keynum+=2; press = 1;}
  2829  000E7E  A283               	btfss	3971,1,c	;volatile
  2830  000E80  D012               	goto	l1528
  2831  000E82  0EE4               	movlw	228
  2832  000E84                     u1457:
  2833  000E84  D000               	nop2	
  2834  000E86  D000               	nop2	
  2835  000E88  2EE8               	decfsz	wreg,f,c
  2836  000E8A  D7FC               	bra	u1457
  2837  000E8C  D000               	nop2	
  2838  000E8E  D000               	nop2	
  2839  000E90                     l24:
  2840  000E90  B283               	btfsc	3971,1,c	;volatile
  2841  000E92  D7FE               	goto	l24
  2842  000E94  0E02               	movlw	2
  2843  000E96  2639               	addwf	_keynum,f,c
  2844  000E98  0E00               	movlw	0
  2845  000E9A  223A               	addwfc	_keynum+1,f,c
  2846  000E9C  C039  F001         	movff	_keynum,?_KP_scan
  2847  000EA0  C03A  F002         	movff	_keynum+1,?_KP_scan+1
  2848  000EA4  0012               	return	
  2849  000EA6                     l1528:
  2850                           
  2851                           ;KeyPad Library.c: 22: if(PORTDbits.RD2 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD2 == 1); return keynum+=3; press = 1;}
  2852  000EA6  A483               	btfss	3971,2,c	;volatile
  2853  000EA8  D012               	goto	l1538
  2854  000EAA  0EE4               	movlw	228
  2855  000EAC                     u1467:
  2856  000EAC  D000               	nop2	
  2857  000EAE  D000               	nop2	
  2858  000EB0  2EE8               	decfsz	wreg,f,c
  2859  000EB2  D7FC               	bra	u1467
  2860  000EB4  D000               	nop2	
  2861  000EB6  D000               	nop2	
  2862  000EB8                     l28:
  2863  000EB8  B483               	btfsc	3971,2,c	;volatile
  2864  000EBA  D7FE               	goto	l28
  2865  000EBC  0E03               	movlw	3
  2866  000EBE  2639               	addwf	_keynum,f,c
  2867  000EC0  0E00               	movlw	0
  2868  000EC2  223A               	addwfc	_keynum+1,f,c
  2869  000EC4  C039  F001         	movff	_keynum,?_KP_scan
  2870  000EC8  C03A  F002         	movff	_keynum+1,?_KP_scan+1
  2871  000ECC  0012               	return	
  2872  000ECE                     l1538:
  2873                           
  2874                           ;KeyPad Library.c: 23: if(PORTDbits.RD3 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD3 == 1); return keynum+=4; press = 1;}
  2875  000ECE  A683               	btfss	3971,3,c	;volatile
  2876  000ED0  D012               	goto	l1548
  2877  000ED2  0EE4               	movlw	228
  2878  000ED4                     u1477:
  2879  000ED4  D000               	nop2	
  2880  000ED6  D000               	nop2	
  2881  000ED8  2EE8               	decfsz	wreg,f,c
  2882  000EDA  D7FC               	bra	u1477
  2883  000EDC  D000               	nop2	
  2884  000EDE  D000               	nop2	
  2885  000EE0                     l32:
  2886  000EE0  B683               	btfsc	3971,3,c	;volatile
  2887  000EE2  D7FE               	goto	l32
  2888  000EE4  0E04               	movlw	4
  2889  000EE6  2639               	addwf	_keynum,f,c
  2890  000EE8  0E00               	movlw	0
  2891  000EEA  223A               	addwfc	_keynum+1,f,c
  2892  000EEC  C039  F001         	movff	_keynum,?_KP_scan
  2893  000EF0  C03A  F002         	movff	_keynum+1,?_KP_scan+1
  2894  000EF4  0012               	return	
  2895  000EF6                     l1548:
  2896                           
  2897                           ;KeyPad Library.c: 25: keynum +=4;
  2898  000EF6  0E04               	movlw	4
  2899  000EF8  2639               	addwf	_keynum,f,c
  2900  000EFA  0E00               	movlw	0
  2901  000EFC  223A               	addwfc	_keynum+1,f,c
  2902  000EFE  4A07               	infsnz	KP_scan@row,f,c
  2903  000F00  2A08               	incf	KP_scan@row+1,f,c
  2904  000F02  D797               	goto	L3
  2905  000F04                     l1554:
  2906                           
  2907                           ;KeyPad Library.c: 26: }
  2908                           ;KeyPad Library.c: 27: if(press == 0) keynum = 0;
  2909  000F04  5005               	movf	KP_scan@press,w,c
  2910  000F06  1006               	iorwf	KP_scan@press+1,w,c
  2911  000F08  A4D8               	btfss	status,2,c
  2912  000F0A  0012               	return	
  2913  000F0C  0E00               	movlw	0
  2914  000F0E  6E3A               	movwf	_keynum+1,c
  2915  000F10  0E00               	movlw	0
  2916  000F12  6E39               	movwf	_keynum,c
  2917  000F14  0012               	return	
  2918  000F16                     __end_of_KP_scan:
  2919                           	opt stack 0
  2920                           tblptru	equ	0xFF8
  2921                           tblptrh	equ	0xFF7
  2922                           tblptrl	equ	0xFF6
  2923                           tablat	equ	0xFF5
  2924                           prodh	equ	0xFF4
  2925                           prodl	equ	0xFF3
  2926                           indf0	equ	0xFEF
  2927                           postinc0	equ	0xFEE
  2928                           fsr0h	equ	0xFEA
  2929                           fsr0l	equ	0xFE9
  2930                           wreg	equ	0xFE8
  2931                           indf2	equ	0xFDF
  2932                           postinc2	equ	0xFDE
  2933                           postdec2	equ	0xFDD
  2934                           fsr2h	equ	0xFDA
  2935                           fsr2l	equ	0xFD9
  2936                           status	equ	0xFD8
  2937                           
  2938 ;; *************** function _OpenI2C *****************
  2939 ;; Defined at:
  2940 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_open.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;  sync_mode       1    wreg     unsigned char 
  2943 ;;  slew            1    0[COMRAM] unsigned char 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;  sync_mode       1    1[COMRAM] unsigned char 
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      void 
  2948 ;; Registers used:
  2949 ;;		wreg, status,2, status,0
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2955 ;;      Params:         1       0       0       0       0       0       0       0       0
  2956 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2957 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2958 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2959 ;;Total ram usage:        2 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_main
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text14
  2969  0014C2                     __ptext14:
  2970                           	opt stack 0
  2971  0014C2                     _OpenI2C:
  2972                           	opt stack 30
  2973                           
  2974                           ;incstack = 0
  2975                           ;OpenI2C@sync_mode stored from wreg
  2976  0014C2  6E02               	movwf	OpenI2C@sync_mode,c
  2977  0014C4  0E3F               	movlw	63
  2978  0014C6  16C7               	andwf	4039,f,c	;volatile
  2979  0014C8  0E00               	movlw	0
  2980  0014CA  6EC6               	movwf	4038,c	;volatile
  2981  0014CC  0E00               	movlw	0
  2982  0014CE  6EC5               	movwf	4037,c	;volatile
  2983  0014D0  5002               	movf	OpenI2C@sync_mode,w,c
  2984  0014D2  12C6               	iorwf	4038,f,c	;volatile
  2985  0014D4  5001               	movf	OpenI2C@slew,w,c
  2986  0014D6  12C7               	iorwf	4039,f,c	;volatile
  2987  0014D8  8293               	bsf	3987,1,c	;volatile
  2988  0014DA  8093               	bsf	3987,0,c	;volatile
  2989  0014DC  8AC6               	bsf	4038,5,c	;volatile
  2990  0014DE  0012               	return		;funcret
  2991  0014E0                     __end_of_OpenI2C:
  2992                           	opt stack 0
  2993                           tblptru	equ	0xFF8
  2994                           tblptrh	equ	0xFF7
  2995                           tblptrl	equ	0xFF6
  2996                           tablat	equ	0xFF5
  2997                           prodh	equ	0xFF4
  2998                           prodl	equ	0xFF3
  2999                           indf0	equ	0xFEF
  3000                           postinc0	equ	0xFEE
  3001                           fsr0h	equ	0xFEA
  3002                           fsr0l	equ	0xFE9
  3003                           wreg	equ	0xFE8
  3004                           indf2	equ	0xFDF
  3005                           postinc2	equ	0xFDE
  3006                           postdec2	equ	0xFDD
  3007                           fsr2h	equ	0xFDA
  3008                           fsr2l	equ	0xFD9
  3009                           status	equ	0xFD8
  3010                           
  3011 ;; *************** function _LCD_init *****************
  3012 ;; Defined at:
  3013 ;;		line 63 in file "i2c_lcd.c"
  3014 ;; Parameters:    Size  Location     Type
  3015 ;;  addr            1    wreg     unsigned char 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  addr            1   12[COMRAM] unsigned char 
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  1    wreg      void 
  3020 ;; Registers used:
  3021 ;;		wreg, status,2, status,0, cstack
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3027 ;;      Params:         0       0       0       0       0       0       0       0       0
  3028 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3029 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3030 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3031 ;;Total ram usage:        2 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; Hardware stack levels required when called:    4
  3034 ;; This function calls:
  3035 ;;		_LCD_putcmd
  3036 ;; This function is called by:
  3037 ;;		_main
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text15
  3042  0010A2                     __ptext15:
  3043                           	opt stack 0
  3044  0010A2                     _LCD_init:
  3045                           	opt stack 26
  3046                           
  3047                           ;incstack = 0
  3048                           ;LCD_init@addr stored from wreg
  3049  0010A2  6E0D               	movwf	LCD_init@addr,c
  3050                           
  3051                           ;i2c_lcd.c: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
  3052  0010A4  0E34               	movlw	52
  3053  0010A6  6E0C               	movwf	??_LCD_init& (0+255),c
  3054  0010A8  0EF2               	movlw	242
  3055  0010AA                     u1487:
  3056  0010AA  2EE8               	decfsz	wreg,f,c
  3057  0010AC  D7FE               	bra	u1487
  3058  0010AE  2E0C               	decfsz	??_LCD_init& (0+255),f,c
  3059  0010B0  D7FC               	bra	u1487
  3060                           
  3061                           ;i2c_lcd.c: 67: LCD_putcmd(addr, 0x30,0);_delay((unsigned long)((5)*(8000000/4000.0)));
  3062  0010B2  0E30               	movlw	48
  3063  0010B4  6E07               	movwf	LCD_putcmd@data,c
  3064  0010B6  0E00               	movlw	0
  3065  0010B8  6E08               	movwf	LCD_putcmd@cmdtype,c
  3066  0010BA  500D               	movf	LCD_init@addr,w,c
  3067  0010BC  ECB0  F009         	call	_LCD_putcmd
  3068  0010C0  0E0D               	movlw	13
  3069  0010C2  6E0C               	movwf	??_LCD_init& (0+255),c
  3070  0010C4  0EFC               	movlw	252
  3071  0010C6                     u1497:
  3072  0010C6  2EE8               	decfsz	wreg,f,c
  3073  0010C8  D7FE               	bra	u1497
  3074  0010CA  2E0C               	decfsz	??_LCD_init& (0+255),f,c
  3075  0010CC  D7FC               	bra	u1497
  3076                           
  3077                           ;i2c_lcd.c: 68: LCD_putcmd(addr, 0x30,0);
  3078  0010CE  0E30               	movlw	48
  3079  0010D0  6E07               	movwf	LCD_putcmd@data,c
  3080  0010D2  0E00               	movlw	0
  3081  0010D4  6E08               	movwf	LCD_putcmd@cmdtype,c
  3082  0010D6  500D               	movf	LCD_init@addr,w,c
  3083  0010D8  ECB0  F009         	call	_LCD_putcmd
  3084                           
  3085                           ;i2c_lcd.c: 69: LCD_putcmd(addr, 0x30,0);
  3086  0010DC  0E30               	movlw	48
  3087  0010DE  6E07               	movwf	LCD_putcmd@data,c
  3088  0010E0  0E00               	movlw	0
  3089  0010E2  6E08               	movwf	LCD_putcmd@cmdtype,c
  3090  0010E4  500D               	movf	LCD_init@addr,w,c
  3091  0010E6  ECB0  F009         	call	_LCD_putcmd
  3092                           
  3093                           ;i2c_lcd.c: 70: LCD_putcmd(addr, 0x20,0);
  3094  0010EA  0E20               	movlw	32
  3095  0010EC  6E07               	movwf	LCD_putcmd@data,c
  3096  0010EE  0E00               	movlw	0
  3097  0010F0  6E08               	movwf	LCD_putcmd@cmdtype,c
  3098  0010F2  500D               	movf	LCD_init@addr,w,c
  3099  0010F4  ECB0  F009         	call	_LCD_putcmd
  3100                           
  3101                           ;i2c_lcd.c: 71: LCD_putcmd(addr, 0x28,1);
  3102  0010F8  0E28               	movlw	40
  3103  0010FA  6E07               	movwf	LCD_putcmd@data,c
  3104  0010FC  0E01               	movlw	1
  3105  0010FE  6E08               	movwf	LCD_putcmd@cmdtype,c
  3106  001100  500D               	movf	LCD_init@addr,w,c
  3107  001102  ECB0  F009         	call	_LCD_putcmd
  3108                           
  3109                           ;i2c_lcd.c: 72: LCD_putcmd(addr, 0x08,1);
  3110  001106  0E08               	movlw	8
  3111  001108  6E07               	movwf	LCD_putcmd@data,c
  3112  00110A  0E01               	movlw	1
  3113  00110C  6E08               	movwf	LCD_putcmd@cmdtype,c
  3114  00110E  500D               	movf	LCD_init@addr,w,c
  3115  001110  ECB0  F009         	call	_LCD_putcmd
  3116                           
  3117                           ;i2c_lcd.c: 73: LCD_putcmd(addr, 0x01,1);
  3118  001114  0E01               	movlw	1
  3119  001116  6E07               	movwf	LCD_putcmd@data,c
  3120  001118  0E01               	movlw	1
  3121  00111A  6E08               	movwf	LCD_putcmd@cmdtype,c
  3122  00111C  500D               	movf	LCD_init@addr,w,c
  3123  00111E  ECB0  F009         	call	_LCD_putcmd
  3124                           
  3125                           ;i2c_lcd.c: 74: LCD_putcmd(addr, 0x06,1);
  3126  001122  0E06               	movlw	6
  3127  001124  6E07               	movwf	LCD_putcmd@data,c
  3128  001126  0E01               	movlw	1
  3129  001128  6E08               	movwf	LCD_putcmd@cmdtype,c
  3130  00112A  500D               	movf	LCD_init@addr,w,c
  3131  00112C  ECB0  F009         	call	_LCD_putcmd
  3132                           
  3133                           ;i2c_lcd.c: 75: LCD_putcmd(addr, 0x0c,1);
  3134  001130  0E0C               	movlw	12
  3135  001132  6E07               	movwf	LCD_putcmd@data,c
  3136  001134  0E01               	movlw	1
  3137  001136  6E08               	movwf	LCD_putcmd@cmdtype,c
  3138  001138  500D               	movf	LCD_init@addr,w,c
  3139  00113A  ECB0  F009         	call	_LCD_putcmd
  3140  00113E  0012               	return		;funcret
  3141  001140                     __end_of_LCD_init:
  3142                           	opt stack 0
  3143                           tblptru	equ	0xFF8
  3144                           tblptrh	equ	0xFF7
  3145                           tblptrl	equ	0xFF6
  3146                           tablat	equ	0xFF5
  3147                           prodh	equ	0xFF4
  3148                           prodl	equ	0xFF3
  3149                           indf0	equ	0xFEF
  3150                           postinc0	equ	0xFEE
  3151                           fsr0h	equ	0xFEA
  3152                           fsr0l	equ	0xFE9
  3153                           wreg	equ	0xFE8
  3154                           indf2	equ	0xFDF
  3155                           postinc2	equ	0xFDE
  3156                           postdec2	equ	0xFDD
  3157                           fsr2h	equ	0xFDA
  3158                           fsr2l	equ	0xFD9
  3159                           status	equ	0xFD8
  3160                           
  3161 ;; *************** function _LCD_putcmd *****************
  3162 ;; Defined at:
  3163 ;;		line 29 in file "i2c_lcd.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  addr            1    wreg     unsigned char 
  3166 ;;  data            1    6[COMRAM] unsigned char 
  3167 ;;  cmdtype         1    7[COMRAM] unsigned char 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  addr            1    9[COMRAM] unsigned char 
  3170 ;;  lcddata         1   10[COMRAM] unsigned char 
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  1    wreg      void 
  3173 ;; Registers used:
  3174 ;;		wreg, status,2, status,0, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3180 ;;      Params:         2       0       0       0       0       0       0       0       0
  3181 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3182 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3183 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3184 ;;Total ram usage:        5 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    3
  3187 ;; This function calls:
  3188 ;;		_I2C_PCF8574_Write
  3189 ;; This function is called by:
  3190 ;;		_LCD_init
  3191 ;;		_LCD_goto
  3192 ;;		_main
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text16
  3197  001360                     __ptext16:
  3198                           	opt stack 0
  3199  001360                     _LCD_putcmd:
  3200                           	opt stack 24
  3201                           
  3202                           ;incstack = 0
  3203                           ;LCD_putcmd@addr stored from wreg
  3204  001360  6E0A               	movwf	LCD_putcmd@addr,c
  3205                           
  3206                           ;i2c_lcd.c: 31: unsigned char lcddata;
  3207                           ;i2c_lcd.c: 34: lcddata = (data & 0xF0)|0x08;
  3208  001362  5007               	movf	LCD_putcmd@data,w,c
  3209  001364  0BF0               	andlw	240
  3210  001366  0908               	iorlw	8
  3211  001368  6E0B               	movwf	LCD_putcmd@lcddata,c
  3212                           
  3213                           ;i2c_lcd.c: 35: I2C_PCF8574_Write(addr,lcddata | 0x04);
  3214  00136A  500B               	movf	LCD_putcmd@lcddata,w,c
  3215  00136C  0904               	iorlw	4
  3216  00136E  6E03               	movwf	I2C_PCF8574_Write@value,c
  3217  001370  500A               	movf	LCD_putcmd@addr,w,c
  3218  001372  EC42  F00A         	call	_I2C_PCF8574_Write
  3219                           
  3220                           ;i2c_lcd.c: 36: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  3221  001376  500B               	movf	LCD_putcmd@lcddata,w,c
  3222  001378  0BFB               	andlw	251
  3223  00137A  6E03               	movwf	I2C_PCF8574_Write@value,c
  3224  00137C  500A               	movf	LCD_putcmd@addr,w,c
  3225  00137E  EC42  F00A         	call	_I2C_PCF8574_Write
  3226                           
  3227                           ;i2c_lcd.c: 39: if (cmdtype) {
  3228  001382  5008               	movf	LCD_putcmd@cmdtype,w,c
  3229  001384  B4D8               	btfsc	status,2,c
  3230  001386  D011               	goto	l1572
  3231                           
  3232                           ;i2c_lcd.c: 41: lcddata = ((data << 4) & 0xF0)|0x08;
  3233  001388  3807               	swapf	LCD_putcmd@data,w,c
  3234  00138A  0BF0               	andlw	240
  3235  00138C  0BF0               	andlw	240
  3236  00138E  0908               	iorlw	8
  3237  001390  6E0B               	movwf	LCD_putcmd@lcddata,c
  3238                           
  3239                           ;i2c_lcd.c: 42: I2C_PCF8574_Write(addr,lcddata | 0x04);
  3240  001392  500B               	movf	LCD_putcmd@lcddata,w,c
  3241  001394  0904               	iorlw	4
  3242  001396  6E03               	movwf	I2C_PCF8574_Write@value,c
  3243  001398  500A               	movf	LCD_putcmd@addr,w,c
  3244  00139A  EC42  F00A         	call	_I2C_PCF8574_Write
  3245                           
  3246                           ;i2c_lcd.c: 43: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  3247  00139E  500B               	movf	LCD_putcmd@lcddata,w,c
  3248  0013A0  0BFB               	andlw	251
  3249  0013A2  6E03               	movwf	I2C_PCF8574_Write@value,c
  3250  0013A4  500A               	movf	LCD_putcmd@addr,w,c
  3251  0013A6  EC42  F00A         	call	_I2C_PCF8574_Write
  3252  0013AA                     l1572:
  3253                           
  3254                           ;i2c_lcd.c: 44: }
  3255                           ;i2c_lcd.c: 45: _delay((unsigned long)((2)*(8000000/4000.0)));
  3256  0013AA  0E06               	movlw	6
  3257  0013AC  6E09               	movwf	??_LCD_putcmd& (0+255),c
  3258  0013AE  0E30               	movlw	48
  3259  0013B0                     u1507:
  3260  0013B0  2EE8               	decfsz	wreg,f,c
  3261  0013B2  D7FE               	bra	u1507
  3262  0013B4  2E09               	decfsz	??_LCD_putcmd& (0+255),f,c
  3263  0013B6  D7FC               	bra	u1507
  3264  0013B8  D000               	nop2	
  3265  0013BA  0012               	return		;funcret
  3266  0013BC                     __end_of_LCD_putcmd:
  3267                           	opt stack 0
  3268                           tblptru	equ	0xFF8
  3269                           tblptrh	equ	0xFF7
  3270                           tblptrl	equ	0xFF6
  3271                           tablat	equ	0xFF5
  3272                           prodh	equ	0xFF4
  3273                           prodl	equ	0xFF3
  3274                           indf0	equ	0xFEF
  3275                           postinc0	equ	0xFEE
  3276                           fsr0h	equ	0xFEA
  3277                           fsr0l	equ	0xFE9
  3278                           wreg	equ	0xFE8
  3279                           indf2	equ	0xFDF
  3280                           postinc2	equ	0xFDE
  3281                           postdec2	equ	0xFDD
  3282                           fsr2h	equ	0xFDA
  3283                           fsr2l	equ	0xFD9
  3284                           status	equ	0xFD8
  3285                           
  3286 ;; *************** function _I2C_PCF8574_Write *****************
  3287 ;; Defined at:
  3288 ;;		line 12 in file "i2c_lcd.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  addr            1    wreg     unsigned char 
  3291 ;;  value           1    2[COMRAM] unsigned char 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  addr            1    5[COMRAM] unsigned char 
  3294 ;;  S               1    4[COMRAM] unsigned char 
  3295 ;;  dummy           1    3[COMRAM] unsigned char 
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  1    wreg      unsigned char 
  3298 ;; Registers used:
  3299 ;;		wreg, status,2, status,0, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3305 ;;      Params:         1       0       0       0       0       0       0       0       0
  3306 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3307 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3308 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3309 ;;Total ram usage:        4 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; Hardware stack levels required when called:    2
  3312 ;; This function calls:
  3313 ;;		_WriteI2C
  3314 ;; This function is called by:
  3315 ;;		_LCD_putcmd
  3316 ;;		_LCD_putch
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text17
  3321  001484                     __ptext17:
  3322                           	opt stack 0
  3323  001484                     _I2C_PCF8574_Write:
  3324                           	opt stack 24
  3325                           
  3326                           ;incstack = 0
  3327                           ;I2C_PCF8574_Write@addr stored from wreg
  3328  001484  6E06               	movwf	I2C_PCF8574_Write@addr,c
  3329                           
  3330                           ;i2c_lcd.c: 14: unsigned char S,dummy;
  3331                           ;i2c_lcd.c: 15: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3332  001486  80C5               	bsf	4037,0,c	;volatile
  3333  001488                     l70:
  3334  001488  B0C5               	btfsc	4037,0,c	;volatile
  3335  00148A  D7FE               	goto	l70
  3336                           
  3337                           ;i2c_lcd.c: 16: S = WriteI2C( addr );
  3338  00148C  5006               	movf	I2C_PCF8574_Write@addr,w,c
  3339  00148E  EC81  F009         	call	_WriteI2C
  3340  001492  6E05               	movwf	I2C_PCF8574_Write@S,c
  3341                           
  3342                           ;i2c_lcd.c: 21: }
  3343                           ;i2c_lcd.c: 22: S = WriteI2C(value);
  3344                           
  3345                           ;i2c_lcd.c: 20: SSPCON1bits.WCOL=0;
  3346                           
  3347                           ;i2c_lcd.c: 18: {
  3348                           ;i2c_lcd.c: 19: dummy = SSPBUF;
  3349                           
  3350                           ;i2c_lcd.c: 17: if(S == -1)
  3351  001494  5003               	movf	I2C_PCF8574_Write@value,w,c
  3352  001496  EC81  F009         	call	_WriteI2C
  3353  00149A  6E05               	movwf	I2C_PCF8574_Write@S,c
  3354                           
  3355                           ;i2c_lcd.c: 23: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3356  00149C  84C5               	bsf	4037,2,c	;volatile
  3357  00149E                     l74:
  3358  00149E  A4C5               	btfss	4037,2,c	;volatile
  3359  0014A0  0012               	return	
  3360  0014A2  D7FD               	goto	l74
  3361  0014A4                     __end_of_I2C_PCF8574_Write:
  3362                           	opt stack 0
  3363                           tblptru	equ	0xFF8
  3364                           tblptrh	equ	0xFF7
  3365                           tblptrl	equ	0xFF6
  3366                           tablat	equ	0xFF5
  3367                           prodh	equ	0xFF4
  3368                           prodl	equ	0xFF3
  3369                           indf0	equ	0xFEF
  3370                           postinc0	equ	0xFEE
  3371                           fsr0h	equ	0xFEA
  3372                           fsr0l	equ	0xFE9
  3373                           wreg	equ	0xFE8
  3374                           indf2	equ	0xFDF
  3375                           postinc2	equ	0xFDE
  3376                           postdec2	equ	0xFDD
  3377                           fsr2h	equ	0xFDA
  3378                           fsr2l	equ	0xFD9
  3379                           status	equ	0xFD8
  3380                           
  3381 ;; *************** function _WriteI2C *****************
  3382 ;; Defined at:
  3383 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_writ.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;  data_out        1    wreg     unsigned char 
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;  data_out        1    1[COMRAM] unsigned char 
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  1    wreg      char 
  3390 ;; Registers used:
  3391 ;;		wreg, status,2, status,0, cstack
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3397 ;;      Params:         0       0       0       0       0       0       0       0       0
  3398 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3399 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3400 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3401 ;;Total ram usage:        1 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; Hardware stack levels required when called:    1
  3404 ;; This function calls:
  3405 ;;		_IdleI2C
  3406 ;; This function is called by:
  3407 ;;		_I2C_PCF8574_Write
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text18
  3412  001302                     __ptext18:
  3413                           	opt stack 0
  3414  001302                     _WriteI2C:
  3415                           	opt stack 24
  3416                           
  3417                           ;incstack = 0
  3418                           ;WriteI2C@data_out stored from wreg
  3419  001302  6E02               	movwf	WriteI2C@data_out,c
  3420  001304  C002  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  3421  001308  AEC6               	btfss	4038,7,c	;volatile
  3422  00130A  D002               	goto	l1454
  3423  00130C  0EFF               	movlw	255
  3424  00130E  0012               	return	
  3425  001310                     l1454:
  3426  001310  50C6               	movf	4038,w,c	;volatile
  3427  001312  0B0F               	andlw	15
  3428  001314  0A08               	xorlw	8
  3429  001316  B4D8               	btfsc	status,2,c
  3430  001318  D00F               	goto	l1472
  3431  00131A  50C6               	movf	4038,w,c	;volatile
  3432  00131C  0B0F               	andlw	15
  3433  00131E  0A0B               	xorlw	11
  3434  001320  B4D8               	btfsc	status,2,c
  3435  001322  D00A               	goto	l1472
  3436  001324  88C6               	bsf	4038,4,c	;volatile
  3437  001326                     l217:
  3438  001326  A69E               	btfss	3998,3,c	;volatile
  3439  001328  D7FE               	goto	l217
  3440  00132A  A4C7               	btfss	4039,2,c	;volatile
  3441  00132C  B0C7               	btfsc	4039,0,c	;volatile
  3442  00132E  D002               	goto	l1468
  3443  001330  0EFE               	movlw	254
  3444  001332  0012               	return	
  3445  001334                     l1468:
  3446  001334  0E00               	movlw	0
  3447  001336  0012               	return	
  3448  001338                     l1472:
  3449  001338  50C6               	movf	4038,w,c	;volatile
  3450  00133A  0B0F               	andlw	15
  3451  00133C  0A08               	xorlw	8
  3452  00133E  B4D8               	btfsc	status,2,c
  3453  001340  D005               	goto	l226
  3454  001342  50C6               	movf	4038,w,c	;volatile
  3455  001344  0B0F               	andlw	15
  3456  001346  0A0B               	xorlw	11
  3457  001348  A4D8               	btfss	status,2,c
  3458  00134A  0012               	return	
  3459  00134C                     l226:
  3460  00134C  B0C7               	btfsc	4039,0,c	;volatile
  3461  00134E  D7FE               	goto	l226
  3462  001350  EC70  F00A         	call	_IdleI2C	;wreg free
  3463  001354  ACC5               	btfss	4037,6,c	;volatile
  3464  001356  D002               	goto	l1486
  3465  001358  0EFE               	movlw	254
  3466  00135A  0012               	return	
  3467  00135C                     l1486:
  3468  00135C  0E00               	movlw	0
  3469  00135E  0012               	return	
  3470  001360                     __end_of_WriteI2C:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           indf0	equ	0xFEF
  3479                           postinc0	equ	0xFEE
  3480                           fsr0h	equ	0xFEA
  3481                           fsr0l	equ	0xFE9
  3482                           wreg	equ	0xFE8
  3483                           indf2	equ	0xFDF
  3484                           postinc2	equ	0xFDE
  3485                           postdec2	equ	0xFDD
  3486                           fsr2h	equ	0xFDA
  3487                           fsr2l	equ	0xFD9
  3488                           status	equ	0xFD8
  3489                           
  3490 ;; *************** function _IdleI2C *****************
  3491 ;; Defined at:
  3492 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_idle.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;		None
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;		None
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  1    wreg      void 
  3499 ;; Registers used:
  3500 ;;		wreg, status,2, status,0
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3506 ;;      Params:         0       0       0       0       0       0       0       0       0
  3507 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3508 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3509 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3510 ;;Total ram usage:        1 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; This function calls:
  3513 ;;		Nothing
  3514 ;; This function is called by:
  3515 ;;		_WriteI2C
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           	psect	text19
  3520  0014E0                     __ptext19:
  3521                           	opt stack 0
  3522  0014E0                     _IdleI2C:
  3523                           	opt stack 24
  3524  0014E0                     l1440:
  3525  0014E0  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
  3526  0014E4  0E1F               	movlw	31
  3527  0014E6  1601               	andwf	??_IdleI2C,f,c
  3528  0014E8  A4D8               	btfss	status,2,c
  3529  0014EA  D7FA               	goto	l1440
  3530  0014EC  A4C7               	btfss	4039,2,c	;volatile
  3531  0014EE  0012               	return	
  3532  0014F0  D7F7               	goto	l1440
  3533  0014F2                     __end_of_IdleI2C:
  3534                           	opt stack 0
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           prodh	equ	0xFF4
  3540                           prodl	equ	0xFF3
  3541                           indf0	equ	0xFEF
  3542                           postinc0	equ	0xFEE
  3543                           fsr0h	equ	0xFEA
  3544                           fsr0l	equ	0xFE9
  3545                           wreg	equ	0xFE8
  3546                           indf2	equ	0xFDF
  3547                           postinc2	equ	0xFDE
  3548                           postdec2	equ	0xFDD
  3549                           fsr2h	equ	0xFDA
  3550                           fsr2l	equ	0xFD9
  3551                           status	equ	0xFD8
  3552                           
  3553 ;; *************** function _KP_init *****************
  3554 ;; Defined at:
  3555 ;;		line 6 in file "KeyPad Library.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;		None
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3569 ;;      Params:         0       0       0       0       0       0       0       0       0
  3570 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3571 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3572 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3573 ;;Total ram usage:        0 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; This function calls:
  3576 ;;		Nothing
  3577 ;; This function is called by:
  3578 ;;		_main
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text20
  3583  0014F2                     __ptext20:
  3584                           	opt stack 0
  3585  0014F2                     _KP_init:
  3586                           	opt stack 30
  3587                           
  3588                           ;KeyPad Library.c: 8: TRISD = 0x0F;
  3589                           
  3590                           ;incstack = 0
  3591  0014F2  0E0F               	movlw	15
  3592  0014F4  6E95               	movwf	3989,c	;volatile
  3593                           
  3594                           ;KeyPad Library.c: 9: LATD = 0x00;
  3595  0014F6  0E00               	movlw	0
  3596  0014F8  6E8C               	movwf	3980,c	;volatile
  3597  0014FA  0012               	return		;funcret
  3598  0014FC                     __end_of_KP_init:
  3599                           	opt stack 0
  3600                           tblptru	equ	0xFF8
  3601                           tblptrh	equ	0xFF7
  3602                           tblptrl	equ	0xFF6
  3603                           tablat	equ	0xFF5
  3604                           prodh	equ	0xFF4
  3605                           prodl	equ	0xFF3
  3606                           indf0	equ	0xFEF
  3607                           postinc0	equ	0xFEE
  3608                           fsr0h	equ	0xFEA
  3609                           fsr0l	equ	0xFE9
  3610                           wreg	equ	0xFE8
  3611                           indf2	equ	0xFDF
  3612                           postinc2	equ	0xFDE
  3613                           postdec2	equ	0xFDD
  3614                           fsr2h	equ	0xFDA
  3615                           fsr2l	equ	0xFD9
  3616                           status	equ	0xFD8
  3617                           tblptru	equ	0xFF8
  3618                           tblptrh	equ	0xFF7
  3619                           tblptrl	equ	0xFF6
  3620                           tablat	equ	0xFF5
  3621                           prodh	equ	0xFF4
  3622                           prodl	equ	0xFF3
  3623                           indf0	equ	0xFEF
  3624                           postinc0	equ	0xFEE
  3625                           fsr0h	equ	0xFEA
  3626                           fsr0l	equ	0xFE9
  3627                           wreg	equ	0xFE8
  3628                           indf2	equ	0xFDF
  3629                           postinc2	equ	0xFDE
  3630                           postdec2	equ	0xFDD
  3631                           fsr2h	equ	0xFDA
  3632                           fsr2l	equ	0xFD9
  3633                           status	equ	0xFD8
  3634                           
  3635                           	psect	rparam
  3636  0000                     tblptru	equ	0xFF8
  3637                           tblptrh	equ	0xFF7
  3638                           tblptrl	equ	0xFF6
  3639                           tablat	equ	0xFF5
  3640                           prodh	equ	0xFF4
  3641                           prodl	equ	0xFF3
  3642                           indf0	equ	0xFEF
  3643                           postinc0	equ	0xFEE
  3644                           fsr0h	equ	0xFEA
  3645                           fsr0l	equ	0xFE9
  3646                           wreg	equ	0xFE8
  3647                           indf2	equ	0xFDF
  3648                           postinc2	equ	0xFDE
  3649                           postdec2	equ	0xFDD
  3650                           fsr2h	equ	0xFDA
  3651                           fsr2l	equ	0xFD9
  3652                           status	equ	0xFD8


Data Sizes:
    Strings     113
    Constant    40
    Data        1
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     56      59
    BANK0           160    112     112
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> keyNumber@arreglo(COMRAM[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_13(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> riksFactors@text(BANK0[80]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    LCD_puts@s	PTR unsigned char  size(2) Largest target is 80
		 -> riksFactors@text(BANK0[80]), STR_12(CODE[25]), STR_11(CODE[22]), STR_10(CODE[25]), 
		 -> STR_9(CODE[25]), STR_8(CODE[20]), STR_7(CODE[25]), STR_6(CODE[25]), 
		 -> STR_5(CODE[18]), STR_4(CODE[25]), STR_3(CODE[12]), STR_2(CODE[25]), 
		 -> STR_1(CODE[25]), keyNumber@arreglo(COMRAM[20]), 


Critical Paths under _main in COMRAM

    _riksFactors->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    _keyNumber->_LCD_goto
    _keyNumber->_LCD_puts
    _atoi->___wmul
    _LCD_puts->_LCD_putch
    _LCD_putch->_I2C_PCF8574_Write
    _LCD_goto->_LCD_putcmd
    _KP_Readbutton->_KP_scan
    _LCD_init->_LCD_putcmd
    _LCD_putcmd->_I2C_PCF8574_Write
    _I2C_PCF8574_Write->_WriteI2C
    _WriteI2C->_IdleI2C

Critical Paths under _main in BANK0

    _main->_riksFactors

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   21792
                                             54 COMRAM     2     2      0
                            _KP_init
                           _LCD_init
                         _LCD_putcmd
                            _OpenI2C
                        _riksFactors
 ---------------------------------------------------------------------------------
 (1) _riksFactors                                        112   112      0   15983
                                              0 BANK0    112   112      0
                           _LCD_goto
                           _LCD_puts
                          _keyNumber
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             41    21     20    1139
                                             22 COMRAM    32    12     20
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     287
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _keyNumber                                           33    29      4    7878
                                             14 COMRAM    33    29      4
                      _KP_Readbutton
                           _LCD_goto
                           _LCD_puts
                               _atoi
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2     647
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _LCD_puts                                             5     3      2    1901
                                              9 COMRAM     5     3      2
                          _LCD_putch
 ---------------------------------------------------------------------------------
 (4) _LCD_putch                                            3     2      1     873
                                              6 COMRAM     3     2      1
                  _I2C_PCF8574_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_goto                                             3     1      2    4913
                                             11 COMRAM     3     1      2
                         _LCD_putcmd
 ---------------------------------------------------------------------------------
 (3) _KP_Readbutton                                        1     1      0     135
                                              8 COMRAM     1     1      0
                            _KP_scan
 ---------------------------------------------------------------------------------
 (4) _KP_scan                                              8     6      2      95
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _OpenI2C                                              2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0    2949
                                             11 COMRAM     2     2      0
                         _LCD_putcmd
 ---------------------------------------------------------------------------------
 (4) _LCD_putcmd                                           5     3      2    2751
                                              6 COMRAM     5     3      2
                  _I2C_PCF8574_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_PCF8574_Write                                    4     3      1     587
                                              2 COMRAM     4     3      1
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (6) _WriteI2C                                             1     1      0      22
                                              1 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (7) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _KP_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KP_init
   _LCD_init
     _LCD_putcmd
       _I2C_PCF8574_Write
         _WriteI2C
           _IdleI2C
   _LCD_putcmd
     _I2C_PCF8574_Write
       _WriteI2C
         _IdleI2C
   _OpenI2C
   _riksFactors
     _LCD_goto
       _LCD_putcmd
         _I2C_PCF8574_Write
           _WriteI2C
             _IdleI2C
     _LCD_puts
       _LCD_putch
         _I2C_PCF8574_Write
           _WriteI2C
             _IdleI2C
     _keyNumber
       _KP_Readbutton
         _KP_scan
       _LCD_goto
         _LCD_putcmd
           _I2C_PCF8574_Write
             _WriteI2C
               _IdleI2C
       _LCD_puts
         _LCD_putch
           _I2C_PCF8574_Write
             _WriteI2C
               _IdleI2C
       _atoi
         ___wmul
         _isdigit
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      50       7       31.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      70       5       70.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     38      3B       1       62.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FB      20        0.0%
DATA                 0      0      FB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun May 19 17:44:42 2019

               _SSPSTATbits 000FC7                          l32 0EE0                          l24 0E90  
                        l19 0E6C                          l28 0EB8                          l70 1488  
                        l74 149E         ___wmul@multiplicand 0003                         l217 1326  
                       l226 134C                         l403 0FDA                         l175 0B9A  
                       l600 11B0                         l610 1290                         u884 0E52  
                       u885 0E4E                         wreg 000FE8                 ?_LCD_putcmd 0007  
          KP_Readbutton@key 0009                        l1440 14E0                        l1506 0E42  
                      l1610 0CF8                        l1604 0CE8                        l1700 0E06  
                      l1454 1310                        l1518 0E7E                        l1622 0D1C  
                      l1710 11D8                        l1472 1338                        l1528 0EA6  
                      l1640 0D52                        l1616 0D0A                        l1712 11EA  
                      l1720 1220                        l1538 0ECE                        l1554 0F04  
                      l1634 0D40                        l1714 11FC                        l1468 1334  
                      l1572 13AA                        l1548 0EF6                        l1652 0D76  
                      l1628 0D2E                        l1716 120E                        l1708 11C6  
                      l1724 12AE                        l1732 0F18                        l1820 1056  
                      l1486 135C                        l1670 0DAC                        l1646 0D64  
                      l1750 0FA4                        l1734 0F1C                        l1664 0D9A  
                      l1728 12DA                        l1752 0FA8                        l1744 0F5C  
                      l1808 1016                        l1840 0B68                        l1832 0B48  
                      l1682 0DD0                        l1658 0D88                        l1842 0B6C  
                      l1676 0DBE                        l1748 0F6E                        l1764 1162  
                      l1852 0BBA                        l1694 0DF4                        l1598 14BA  
                      l1766 116E                        l1870 0C1A                        l1846 0B72  
                      l1838 0B62                        l1688 0DE2                        l1776 11A2  
                      l1768 1172                        l1792 1282                        l1784 124E  
                      l1872 0C26                        l1880 0CBC                        l1786 125A  
                      l1858 0BE2                        l1882 0CD4                        l1788 125E  
                      l1798 0FF4                        l1878 0CAC                        l1992 142C  
                      STR_1 0829                        STR_2 0829                        STR_3 088E  
                      STR_4 0829                        STR_5 086C                        STR_6 0829  
                      STR_7 0829                        STR_8 0858                        STR_9 0829  
                      u1200 12FA                        u1207 12F0                        u1190 12CE  
                      _LATD 000F8C                        u1507 13B0                        u1197 12C4  
                      u1447 0E60                        u1457 0E84                        u1467 0EAC  
                      u1477 0ED4                        u1487 10AA                        u1497 10C6  
               main@counter 0037            LCD_putch@lcddata 0009                        _atoi 0F16  
                      _main 1402  __size_of_I2C_PCF8574_Write 0020                        _text 0100  
                      fsr0h 000FEA                        indf0 000FEF                        fsr2h 000FDA  
                      fsr0l 000FE9                        indf2 000FDF                        fsr2l 000FD9  
           __end_of_KP_init 14FC             __end_of_KP_scan 0F16                        prodh 000FF4  
                      prodl 000FF3                        start 0000             __end_of_IdleI2C 14F2  
            LCD_goto@column 000D          __size_of_LCD_putch 0046                ___param_bank 000000  
         riksFactors@gender 00CC             __end_of_OpenI2C 14E0            __end_of_LCD_init 1140  
          __end_of_LCD_goto 123C            __end_of_LCD_puts 1302                       ?_atoi 0007  
                     ?_main 0001                       STR_10 0829                       STR_11 0842  
                     STR_12 0829                       STR_13 087E             __end_of___lldiv 11C2  
           __end_of___llmod 12A2          I2C_PCF8574_Write@S 0005                       _TRISD 000F95  
           __end_of_dpowers 0829             __end_of_isdigit 14C2                       atoi@a 000C  
                     atoi@s 0007                       tablat 000FF5                       status 000FD8  
           __end_of_sprintf 0CE2             __initialization 1432                 LCD_goto@row 000C  
       __size_of_LCD_putcmd 005C                __end_of_atoi 0FE4                __end_of_main 1432  
                    ??_atoi 0009                      ??_main 0037          riksFactors@parents 00B4  
             __activetblptr 000002           __end_of_LCD_putch 1402            ___llmod@dividend 000E  
          __end_of_WriteI2C 1360                   ??_KP_init 0001                   ??_KP_scan 0003  
              ?_riksFactors 0001                 OpenI2C@slew 0001                   ??_IdleI2C 0001  
                    _SSPBUF 000FC9                   ??_OpenI2C 0002                KP_scan@press 0005  
                    ___wmul 145E                   ??___lldiv 0009                   ??___llmod 0016  
         LCD_putcmd@cmdtype 0008                      _keynum 0039           LCD_putcmd@lcddata 000B  
                    clear_0 144A                __pdataCOMRAM 003B                   ??_isdigit 0001  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8              keyNumber@tecla 002D                   ??_sprintf 002B  
                __accesstop 0060     __end_of__initialization 1454                   ?_LCD_init 0001  
                 ?_LCD_goto 000C                   ?_LCD_puts 000A               ___rparam_used 000001  
              LCD_init@addr 000D                LCD_goto@addr 000E             riksFactors@edad 00C0  
            __pcstackCOMRAM 0001             riksFactors@peso 00C8             riksFactors@text 0060  
            LCD_putcmd@addr 000A              LCD_putcmd@data 0007                   LCD_puts@i 000C  
                 LCD_puts@s 000A                ??_LCD_putcmd 0009         riksFactors@estatura 00C4  
                __pbssBANK1 0100          __size_of_keyNumber 00BE                LCD_puts@addr 000E  
                ??_LCD_init 000C                  ??_LCD_goto 000E                  ??_LCD_puts 000C  
     __end_of_KP_Readbutton 0E1A          __end_of_LCD_putcmd 13BC                     ?___wmul 0001  
       riksFactors@systolic 00B8                   ?_WriteI2C 0001                     _SSPCON1 000FC6  
                   _SSPCON2 000FC5                     _SSPSTAT 000FC7                     _KP_init 14F2  
                   _KP_scan 0E1A                     _IdleI2C 14E0        __size_of_riksFactors 02A2  
                   _OpenI2C 14C2                     __Hparam 0000                     __Lparam 0000  
                   ___lldiv 1140             __size_of___wmul 0026                     ___llmod 123C  
              __psmallconst 0800                     __pcinit 1432                  ??_WriteI2C 0002  
                   __ramtop 0800                     __ptext0 1402                     __ptext1 089C  
                   __ptext2 0B3E                     __ptext3 123C                     __ptext4 1140  
                   __ptext5 0FE4                     __ptext6 0F16                     __ptext7 14A4  
                   __ptext8 145E           __end_of_keyNumber 10A2                     __ptext9 12A2  
                   _dpowers 0801                     _isdigit 14A4              _LCD_01_ADDRESS 003B  
                   _sprintf 0B3E        end_of_initialization 1454                   _LCD_putch 13BC  
             __Lmediumconst 0000             ___lldiv@divisor 0005             ___lldiv@counter 000D  
           keyNumber@number 0027                     postdec2 000FDD      I2C_PCF8574_Write@dummy 0004  
                   postinc0 000FEE                     postinc2 000FDE      I2C_PCF8574_Write@value 0003  
                 _PORTDbits 000F83                   _TRISBbits 000F93                  ?_LCD_putch 0007  
         __size_of_LCD_init 009E           __size_of_LCD_goto 007A           __size_of_LCD_puts 0060  
          riksFactors@smoke 00B0              __end_of___wmul 1484               __pidataCOMRAM 14FC  
       start_initialization 1432        riksFactors@diastolic 00BC            WriteI2C@data_out 0002  
                keyNumber@i 002E             ___llmod@divisor 0012             ___llmod@counter 0016  
                  ??___wmul 0005           __size_of_WriteI2C 005E                 __pbssCOMRAM 0039  
             LCD_putch@addr 0008               LCD_putch@data 0007               __pcstackBANK0 0060  
                  ?_KP_init 0001                    ?_KP_scan 0001                 ??_LCD_putch 0008  
                  ?_IdleI2C 0001                 sprintf@flag 002D                 sprintf@prec 002E  
                  ?_OpenI2C 0001                    ?___lldiv 0001                    ?___llmod 000E  
               __smallconst 0800                    ?_isdigit 0001                   _keyNumber 0FE4  
    __size_of_KP_Readbutton 0138                    ?_sprintf 0017               ??_riksFactors 0037  
            ___wmul@product 0005                    _LCD_init 10A2                    _LCD_goto 11C2  
                  _LCD_puts 12A2                    _PIR1bits 000F9E       I2C_PCF8574_Write@addr 0006  
         ___wmul@multiplier 0001                  ?_keyNumber 000F            __size_of_KP_init 000A  
          __size_of_KP_scan 00FC            OpenI2C@sync_mode 0002            __size_of_IdleI2C 0012  
       __end_of_riksFactors 0B3E                    __Hrparam 0000            __size_of_OpenI2C 001E  
                  __Lrparam 0000                  KP_scan@row 0007               _KP_Readbutton 0CE2  
          __size_of___lldiv 0082            __size_of___llmod 0066                    _WriteI2C 1302  
               _isdigit$831 0002                  sprintf@val 0030            __size_of_isdigit 001E  
                  __ptext10 13BC                    __ptext11 11C2                    __ptext20 14F2  
                  __ptext12 0CE2                    __ptext13 0E1A                    __ptext14 14C2  
                  __ptext15 10A2                    __ptext16 1360                    __ptext17 1484  
                  __ptext18 1302                    __ptext19 14E0            __size_of_sprintf 01A4  
             __size_of_atoi 00CE               __size_of_main 0030           keyNumber@contador 002B  
         _I2C_PCF8574_Write 1484              ?_KP_Readbutton 0001          ?_I2C_PCF8574_Write 0003  
                  atoi@sign 000B         ??_I2C_PCF8574_Write 0004                 ??_keyNumber 0013  
                _LCD_putcmd 1360                    isdigit@c 0003                 _riksFactors 089C  
                 sprintf@ap 0034                   sprintf@sp 0017            ___lldiv@dividend 0001  
 __end_of_I2C_PCF8574_Write 14A4            keyNumber@arreglo 0013                    sprintf@c 0036  
                  sprintf@f 0019            ___lldiv@quotient 0009                 _SSPCON1bits 000FC6  
               _SSPCON2bits 000FC5             ??_KP_Readbutton 0009  
