

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun May 19 20:51:53 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38  0000                     
    39                           ; Version 1.41
    40                           ; Generated 25/01/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4550 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataCOMRAM
    75  001518                     __pidataCOMRAM:
    76                           	opt stack 0
    77                           
    78                           ;initializer for _LCD_01_ADDRESS
    79  001518  40                 	db	64
    80                           
    81                           	psect	smallconst
    82  000800                     __psmallconst:
    83                           	opt stack 0
    84  000800  00                 	db	0
    85  000801                     _dpowers:
    86                           	opt stack 0
    87  000801  0001               	dw	1
    88  000803  0000               	dw	0
    89  000805  000A               	dw	10
    90  000807  0000               	dw	0
    91  000809  0064               	dw	100
    92  00080B  0000               	dw	0
    93  00080D  03E8               	dw	1000
    94  00080F  0000               	dw	0
    95  000811  2710               	dw	10000
    96  000813  0000               	dw	0
    97  000815  86A0               	dw	34464
    98  000817  0001               	dw	1
    99  000819  4240               	dw	16960
   100  00081B  000F               	dw	15
   101  00081D  9680               	dw	38528
   102  00081F  0098               	dw	152
   103  000821  E100               	dw	57600
   104  000823  05F5               	dw	1525
   105  000825  CA00               	dw	51712
   106  000827  3B9A               	dw	15258
   107  000829                     __end_of_dpowers:
   108                           	opt stack 0
   109  0000                     _SSPSTATbits	set	4039
   110  0000                     _PIR1bits	set	3998
   111  0000                     _TRISBbits	set	3987
   112  0000                     _SSPCON2	set	4037
   113  0000                     _SSPCON1	set	4038
   114  0000                     _SSPSTAT	set	4039
   115  0000                     _SSPCON1bits	set	4038
   116  0000                     _SSPBUF	set	4041
   117  0000                     _SSPCON2bits	set	4037
   118  0000                     _PORTDbits	set	3971
   119  0000                     _LATD	set	3980
   120  0000                     _TRISD	set	3989
   121  000829                     STR_6:
   122  000829  70                 	db	112	;'p'
   123  00082A  61                 	db	97	;'a'
   124  00082B  64                 	db	100	;'d'
   125  00082C  72                 	db	114	;'r'
   126  00082D  65                 	db	101	;'e'
   127  00082E  73                 	db	115	;'s'
   128  00082F  20                 	db	32
   129  000830  68                 	db	104	;'h'
   130  000831  69                 	db	105	;'i'
   131  000832  70                 	db	112	;'p'
   132  000833  65                 	db	101	;'e'
   133  000834  72                 	db	114	;'r'
   134  000835  3F                 	db	63	;'?'
   135  000836  20                 	db	32
   136  000837  6E                 	db	110	;'n'
   137  000838  6F                 	db	111	;'o'
   138  000839  20                 	db	32
   139  00083A  30                 	db	48	;'0'
   140  00083B  20                 	db	32
   141  00083C  20                 	db	32
   142  00083D  73                 	db	115	;'s'
   143  00083E  69                 	db	105	;'i'
   144  00083F  20                 	db	32
   145  000840  20                 	db	32
   146  000841  31                 	db	49	;'1'
   147  000842  20                 	db	32
   148  000843  00                 	db	0
   149  000844                     STR_7:
   150  000844  25                 	db	37
   151  000845  6C                 	db	108	;'l'
   152  000846  75                 	db	117	;'u'
   153  000847  2C                 	db	44
   154  000848  25                 	db	37
   155  000849  6C                 	db	108	;'l'
   156  00084A  75                 	db	117	;'u'
   157  00084B  2C                 	db	44
   158  00084C  25                 	db	37
   159  00084D  6C                 	db	108	;'l'
   160  00084E  75                 	db	117	;'u'
   161  00084F  2C                 	db	44
   162  000850  25                 	db	37
   163  000851  6C                 	db	108	;'l'
   164  000852  75                 	db	117	;'u'
   165  000853  2C                 	db	44
   166  000854  25                 	db	37
   167  000855  6C                 	db	108	;'l'
   168  000856  75                 	db	117	;'u'
   169  000857  2C                 	db	44
   170  000858  25                 	db	37
   171  000859  6C                 	db	108	;'l'
   172  00085A  75                 	db	117	;'u'
   173  00085B  00                 	db	0
   174  00085C                     STR_3:
   175  00085C  54                 	db	84	;'T'
   176  00085D  65                 	db	101	;'e'
   177  00085E  63                 	db	99	;'c'
   178  00085F  6C                 	db	108	;'l'
   179  000860  65                 	db	101	;'e'
   180  000861  65                 	db	101	;'e'
   181  000862  20                 	db	32
   182  000863  65                 	db	101	;'e'
   183  000864  73                 	db	115	;'s'
   184  000865  74                 	db	116	;'t'
   185  000866  61                 	db	97	;'a'
   186  000867  74                 	db	116	;'t'
   187  000868  75                 	db	117	;'u'
   188  000869  72                 	db	114	;'r'
   189  00086A  61                 	db	97	;'a'
   190  00086B  28                 	db	40
   191  00086C  63                 	db	99	;'c'
   192  00086D  6D                 	db	109	;'m'
   193  00086E  29                 	db	41
   194  00086F  00                 	db	0
   195  000870                     STR_2:
   196  000870  54                 	db	84	;'T'
   197  000871  65                 	db	101	;'e'
   198  000872  63                 	db	99	;'c'
   199  000873  6C                 	db	108	;'l'
   200  000874  65                 	db	101	;'e'
   201  000875  65                 	db	101	;'e'
   202  000876  20                 	db	32
   203  000877  70                 	db	112	;'p'
   204  000878  65                 	db	101	;'e'
   205  000879  73                 	db	115	;'s'
   206  00087A  6F                 	db	111	;'o'
   207  00087B  20                 	db	32
   208  00087C  65                 	db	101	;'e'
   209  00087D  6E                 	db	110	;'n'
   210  00087E  20                 	db	32
   211  00087F  6B                 	db	107	;'k'
   212  000880  67                 	db	103	;'g'
   213  000881  00                 	db	0
   214  000882                     STR_5:
   215  000882  46                 	db	70	;'F'
   216  000883  75                 	db	117	;'u'
   217  000884  6D                 	db	109	;'m'
   218  000885  61                 	db	97	;'a'
   219  000886  3F                 	db	63	;'?'
   220  000887  20                 	db	32
   221  000888  6E                 	db	110	;'n'
   222  000889  6F                 	db	111	;'o'
   223  00088A  20                 	db	32
   224  00088B  30                 	db	48	;'0'
   225  00088C  20                 	db	32
   226  00088D  73                 	db	115	;'s'
   227  00088E  69                 	db	105	;'i'
   228  00088F  20                 	db	32
   229  000890  31                 	db	49	;'1'
   230  000891  00                 	db	0
   231  000892                     STR_4:
   232  000892  67                 	db	103	;'g'
   233  000893  65                 	db	101	;'e'
   234  000894  6E                 	db	110	;'n'
   235  000895  65                 	db	101	;'e'
   236  000896  72                 	db	114	;'r'
   237  000897  6F                 	db	111	;'o'
   238  000898  20                 	db	32
   239  000899  30                 	db	48	;'0'
   240  00089A  20                 	db	32
   241  00089B  48                 	db	72	;'H'
   242  00089C  20                 	db	32
   243  00089D  31                 	db	49	;'1'
   244  00089E  20                 	db	32
   245  00089F  4D                 	db	77	;'M'
   246  0008A0  00                 	db	0
   247  0008A1                     STR_1:
   248  0008A1  54                 	db	84	;'T'
   249  0008A2  65                 	db	101	;'e'
   250  0008A3  63                 	db	99	;'c'
   251  0008A4  6C                 	db	108	;'l'
   252  0008A5  65                 	db	101	;'e'
   253  0008A6  65                 	db	101	;'e'
   254  0008A7  20                 	db	32
   255  0008A8  65                 	db	101	;'e'
   256  0008A9  64                 	db	100	;'d'
   257  0008AA  61                 	db	97	;'a'
   258  0008AB  64                 	db	100	;'d'
   259  0008AC  00                 	db	0
   260  0008AD  00                 	db	0	; dummy byte at the end
   261  0000                     
   262                           ; #config settings
   263                           
   264                           	psect	cinit
   265  00143E                     __pcinit:
   266                           	opt stack 0
   267  00143E                     start_initialization:
   268                           	opt stack 0
   269  00143E                     __initialization:
   270                           	opt stack 0
   271                           
   272                           ; Initialize objects allocated to COMRAM (1 bytes)
   273                           ; load TBLPTR registers with __pidataCOMRAM
   274  00143E  0E18               	movlw	low __pidataCOMRAM
   275  001440  6EF6               	movwf	tblptrl,c
   276  001442  0E15               	movlw	high __pidataCOMRAM
   277  001444  6EF7               	movwf	tblptrh,c
   278  001446  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   279  001448  6EF8               	movwf	tblptru,c
   280  00144A  0009               	tblrd		*+	;fetch initializer
   281  00144C  CFF5 F043          	movff	tablat,__pdataCOMRAM
   282                           
   283                           ; Clear objects allocated to BANK1 (80 bytes)
   284  001450  EE01  F000         	lfsr	0,__pbssBANK1
   285  001454  0E50               	movlw	80
   286  001456                     clear_0:
   287  001456  6AEE               	clrf	postinc0,c
   288  001458  06E8               	decf	wreg,f,c
   289  00145A  E1FD               	bnz	clear_0
   290                           
   291                           ; Clear objects allocated to COMRAM (2 bytes)
   292  00145C  6A42               	clrf	(__pbssCOMRAM+1)& (0+255),c
   293  00145E  6A41               	clrf	__pbssCOMRAM& (0+255),c
   294  001460                     end_of_initialization:
   295                           	opt stack 0
   296  001460                     __end_of__initialization:
   297                           	opt stack 0
   298  001460  0E00               	movlw	low (__Lmediumconst shr (0+16))
   299  001462  6EF8               	movwf	tblptru,c
   300  001464  0100               	movlb	0
   301  001466  EFE8  F009         	goto	_main	;jump to C main() function
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           
   309                           	psect	bssCOMRAM
   310  000041                     __pbssCOMRAM:
   311                           	opt stack 0
   312  000041                     _keynum:
   313                           	opt stack 0
   314  000041                     	ds	2
   315                           tblptru	equ	0xFF8
   316                           tblptrh	equ	0xFF7
   317                           tblptrl	equ	0xFF6
   318                           tablat	equ	0xFF5
   319                           postinc0	equ	0xFEE
   320                           wreg	equ	0xFE8
   321                           
   322                           	psect	dataCOMRAM
   323  000043                     __pdataCOMRAM:
   324                           	opt stack 0
   325  000043                     _LCD_01_ADDRESS:
   326                           	opt stack 0
   327  000043                     	ds	1
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           
   335                           	psect	bssBANK1
   336  000100                     __pbssBANK1:
   337                           	opt stack 0
   338  000100                     _text:
   339                           	opt stack 0
   340  000100                     	ds	80
   341                           tblptru	equ	0xFF8
   342                           tblptrh	equ	0xFF7
   343                           tblptrl	equ	0xFF6
   344                           tablat	equ	0xFF5
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           
   348                           	psect	cstackBANK0
   349  000060                     __pcstackBANK0:
   350                           	opt stack 0
   351  000060                     riksFactors@text:
   352                           	opt stack 0
   353                           
   354                           ; 80 bytes @ 0x0
   355  000060                     	ds	80
   356  0000B0                     riksFactors@systolic:
   357                           	opt stack 0
   358                           
   359                           ; 4 bytes @ 0x50
   360  0000B0                     	ds	4
   361  0000B4                     riksFactors@diastolic:
   362                           	opt stack 0
   363                           
   364                           ; 4 bytes @ 0x54
   365  0000B4                     	ds	4
   366  0000B8                     riksFactors@edad:
   367                           	opt stack 0
   368                           
   369                           ; 4 bytes @ 0x58
   370  0000B8                     	ds	4
   371  0000BC                     riksFactors@estatura:
   372                           	opt stack 0
   373                           
   374                           ; 4 bytes @ 0x5C
   375  0000BC                     	ds	4
   376  0000C0                     riksFactors@peso:
   377                           	opt stack 0
   378                           
   379                           ; 4 bytes @ 0x60
   380  0000C0                     	ds	4
   381  0000C4                     riksFactors@gender:
   382                           	opt stack 0
   383                           
   384                           ; 4 bytes @ 0x64
   385  0000C4                     	ds	4
   386  0000C8                     riksFactors@smoke:
   387                           	opt stack 0
   388                           
   389                           ; 4 bytes @ 0x68
   390  0000C8                     	ds	4
   391  0000CC                     riksFactors@parents:
   392                           	opt stack 0
   393                           
   394                           ; 4 bytes @ 0x6C
   395  0000CC                     	ds	4
   396                           tblptru	equ	0xFF8
   397                           tblptrh	equ	0xFF7
   398                           tblptrl	equ	0xFF6
   399                           tablat	equ	0xFF5
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           
   403                           	psect	cstackCOMRAM
   404  000001                     __pcstackCOMRAM:
   405                           	opt stack 0
   406  000001                     ??_IdleI2C:
   407  000001                     ??_isdigit:
   408  000001                     ?_KP_scan:
   409                           	opt stack 0
   410  000001                     ?___wmul:
   411                           	opt stack 0
   412  000001                     ?___lldiv:
   413                           	opt stack 0
   414  000001                     OpenI2C@slew:
   415                           	opt stack 0
   416  000001                     longDelay@time:
   417                           	opt stack 0
   418  000001                     ___wmul@multiplier:
   419                           	opt stack 0
   420  000001                     ___lldiv@dividend:
   421                           	opt stack 0
   422                           
   423                           ; 4 bytes @ 0x0
   424  000001                     	ds	1
   425  000002                     OpenI2C@sync_mode:
   426                           	opt stack 0
   427  000002                     WriteI2C@data_out:
   428                           	opt stack 0
   429  000002                     _isdigit$832:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x1
   433  000002                     	ds	1
   434  000003                     ??_KP_scan:
   435  000003                     ??_longDelay:
   436  000003                     I2C_PCF8574_Write@value:
   437                           	opt stack 0
   438  000003                     isdigit@c:
   439                           	opt stack 0
   440  000003                     ___wmul@multiplicand:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x2
   444  000003                     	ds	1
   445  000004                     I2C_PCF8574_Write@dummy:
   446                           	opt stack 0
   447  000004                     longDelay@i:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x3
   451  000004                     	ds	1
   452  000005                     I2C_PCF8574_Write@S:
   453                           	opt stack 0
   454  000005                     KP_scan@press:
   455                           	opt stack 0
   456  000005                     ___wmul@product:
   457                           	opt stack 0
   458  000005                     ___lldiv@divisor:
   459                           	opt stack 0
   460                           
   461                           ; 4 bytes @ 0x4
   462  000005                     	ds	1
   463  000006                     I2C_PCF8574_Write@addr:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x5
   467  000006                     	ds	1
   468  000007                     ?_atoi:
   469                           	opt stack 0
   470  000007                     LCD_putcmd@data:
   471                           	opt stack 0
   472  000007                     LCD_putch@data:
   473                           	opt stack 0
   474  000007                     KP_scan@row:
   475                           	opt stack 0
   476  000007                     atoi@s:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x6
   480  000007                     	ds	1
   481  000008                     LCD_putcmd@cmdtype:
   482                           	opt stack 0
   483  000008                     LCD_putch@addr:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x7
   487  000008                     	ds	1
   488  000009                     ??_atoi:
   489  000009                     ??_LCD_putcmd:
   490  000009                     KP_Readbutton@key:
   491                           	opt stack 0
   492  000009                     LCD_putch@lcddata:
   493                           	opt stack 0
   494  000009                     ___lldiv@quotient:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0x8
   498  000009                     	ds	1
   499  00000A                     LCD_putcmd@addr:
   500                           	opt stack 0
   501  00000A                     LCD_puts@s:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x9
   505  00000A                     	ds	1
   506  00000B                     LCD_putcmd@lcddata:
   507                           	opt stack 0
   508  00000B                     atoi@sign:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0xA
   512  00000B                     	ds	1
   513  00000C                     ??_LCD_init:
   514  00000C                     LCD_goto@row:
   515                           	opt stack 0
   516  00000C                     LCD_puts@i:
   517                           	opt stack 0
   518  00000C                     atoi@a:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0xB
   522  00000C                     	ds	1
   523  00000D                     LCD_init@addr:
   524                           	opt stack 0
   525  00000D                     LCD_goto@column:
   526                           	opt stack 0
   527  00000D                     ___lldiv@counter:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0xC
   531  00000D                     	ds	1
   532  00000E                     ?___llmod:
   533                           	opt stack 0
   534  00000E                     LCD_goto@addr:
   535                           	opt stack 0
   536  00000E                     LCD_puts@addr:
   537                           	opt stack 0
   538  00000E                     ___llmod@dividend:
   539                           	opt stack 0
   540                           
   541                           ; 4 bytes @ 0xD
   542  00000E                     	ds	1
   543  00000F                     ?_keyNumber:
   544                           	opt stack 0
   545                           
   546                           ; 4 bytes @ 0xE
   547  00000F                     	ds	3
   548  000012                     ___llmod@divisor:
   549                           	opt stack 0
   550                           
   551                           ; 4 bytes @ 0x11
   552  000012                     	ds	1
   553  000013                     keyNumber@arreglo:
   554                           	opt stack 0
   555                           
   556                           ; 20 bytes @ 0x12
   557  000013                     	ds	3
   558  000016                     ___llmod@counter:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x15
   562  000016                     	ds	1
   563  000017                     ?_sprintf:
   564                           	opt stack 0
   565  000017                     sprintf@sp:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x16
   569  000017                     	ds	2
   570  000019                     sprintf@f:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x18
   574  000019                     	ds	14
   575  000027                     keyNumber@number:
   576                           	opt stack 0
   577                           
   578                           ; 4 bytes @ 0x26
   579  000027                     	ds	4
   580  00002B                     keyNumber@contador:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x2A
   584  00002B                     	ds	2
   585  00002D                     keyNumber@tecla:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x2C
   589  00002D                     	ds	1
   590  00002E                     keyNumber@i:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x2D
   594  00002E                     	ds	5
   595  000033                     ??_sprintf:
   596                           
   597                           ; 1 bytes @ 0x32
   598  000033                     	ds	2
   599  000035                     sprintf@flag:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x34
   603  000035                     	ds	1
   604  000036                     sprintf@prec:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x35
   608  000036                     	ds	2
   609  000038                     sprintf@val:
   610                           	opt stack 0
   611                           
   612                           ; 4 bytes @ 0x37
   613  000038                     	ds	4
   614  00003C                     sprintf@ap:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x3B
   618  00003C                     	ds	2
   619  00003E                     sprintf@c:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x3D
   623  00003E                     	ds	1
   624  00003F                     main@counter:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x3E
   628  00003F                     	ds	2
   629                           tblptru	equ	0xFF8
   630                           tblptrh	equ	0xFF7
   631                           tblptrl	equ	0xFF6
   632                           tablat	equ	0xFF5
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           
   636 ;;
   637 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   638 ;;
   639 ;; *************** function _main *****************
   640 ;; Defined at:
   641 ;;		line 21 in file "main.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;		None
   644 ;; Auto vars:     Size  Location     Type
   645 ;;  counter         2   62[COMRAM] unsigned int 
   646 ;; Return value:  Size  Location     Type
   647 ;;                  1    wreg      void 
   648 ;; Registers used:
   649 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 0/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   655 ;;      Params:         0       0       0       0       0       0       0       0       0
   656 ;;      Locals:         2       0       0       0       0       0       0       0       0
   657 ;;      Temps:          0       0       0       0       0       0       0       0       0
   658 ;;      Totals:         2       0       0       0       0       0       0       0       0
   659 ;;Total ram usage:        2 bytes
   660 ;; Hardware stack levels required when called:    7
   661 ;; This function calls:
   662 ;;		_KP_init
   663 ;;		_LCD_init
   664 ;;		_LCD_putcmd
   665 ;;		_OpenI2C
   666 ;;		_longDelay
   667 ;;		_riksFactors
   668 ;; This function is called by:
   669 ;;		Startup code after reset
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673                           	psect	text0
   674  0013D0                     __ptext0:
   675                           	opt stack 0
   676  0013D0                     _main:
   677                           	opt stack 24
   678                           
   679                           ;main.c: 25: OpenI2C(0b00001000, 0b10000000);
   680                           
   681                           ;incstack = 0
   682  0013D0  0E80               	movlw	128
   683  0013D2  6E01               	movwf	OpenI2C@slew,c
   684  0013D4  0E08               	movlw	8
   685  0013D6  EC67  F00A         	call	_OpenI2C
   686                           
   687                           ;main.c: 26: LCD_init(LCD_01_ADDRESS);
   688  0013DA  5043               	movf	_LCD_01_ADDRESS,w,c
   689  0013DC  EC38  F008         	call	_LCD_init
   690                           
   691                           ;main.c: 27: KP_init();
   692  0013E0  EC87  F00A         	call	_KP_init	;wreg free
   693                           
   694                           ;main.c: 30: unsigned int counter = 0;
   695  0013E4  0E00               	movlw	0
   696  0013E6  6E40               	movwf	main@counter+1,c
   697  0013E8  0E00               	movlw	0
   698  0013EA  6E3F               	movwf	main@counter,c
   699                           
   700                           ;main.c: 31: LCD_putcmd(LCD_01_ADDRESS, 0x01,1);
   701  0013EC  0E01               	movlw	1
   702  0013EE  6E07               	movwf	LCD_putcmd@data,c
   703  0013F0  0E01               	movlw	1
   704  0013F2  6E08               	movwf	LCD_putcmd@cmdtype,c
   705  0013F4  5043               	movf	_LCD_01_ADDRESS,w,c
   706  0013F6  EC97  F009         	call	_LCD_putcmd
   707  0013FA                     l1999:
   708                           
   709                           ;main.c: 34: riksFactors();
   710  0013FA  EC57  F004         	call	_riksFactors	;wreg free
   711                           
   712                           ;main.c: 45: longDelay(10);
   713  0013FE  0E00               	movlw	0
   714  001400  6E02               	movwf	longDelay@time+1,c
   715  001402  0E0A               	movlw	10
   716  001404  6E01               	movwf	longDelay@time,c
   717  001406  EC06  F00A         	call	_longDelay	;wreg free
   718  00140A  D7F7               	goto	l1999
   719  00140C                     __end_of_main:
   720                           	opt stack 0
   721                           tblptru	equ	0xFF8
   722                           tblptrh	equ	0xFF7
   723                           tblptrl	equ	0xFF6
   724                           tablat	equ	0xFF5
   725                           postinc0	equ	0xFEE
   726                           wreg	equ	0xFE8
   727                           
   728 ;; *************** function _riksFactors *****************
   729 ;; Defined at:
   730 ;;		line 39 in file "funciones.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;  text           80    0[BANK0 ] unsigned char [80]
   735 ;;  parents         4  108[BANK0 ] unsigned long 
   736 ;;  smoke           4  104[BANK0 ] unsigned long 
   737 ;;  gender          4  100[BANK0 ] unsigned long 
   738 ;;  peso            4   96[BANK0 ] unsigned long 
   739 ;;  estatura        4   92[BANK0 ] unsigned long 
   740 ;;  edad            4   88[BANK0 ] unsigned long 
   741 ;;  diastolic       4   84[BANK0 ] unsigned long 
   742 ;;  systolic        4   80[BANK0 ] unsigned long 
   743 ;; Return value:  Size  Location     Type
   744 ;;                  1    wreg      void 
   745 ;; Registers used:
   746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   752 ;;      Params:         0       0       0       0       0       0       0       0       0
   753 ;;      Locals:         0     112       0       0       0       0       0       0       0
   754 ;;      Temps:          0       0       0       0       0       0       0       0       0
   755 ;;      Totals:         0     112       0       0       0       0       0       0       0
   756 ;;Total ram usage:      112 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    6
   759 ;; This function calls:
   760 ;;		_LCD_goto
   761 ;;		_LCD_puts
   762 ;;		_keyNumber
   763 ;;		_lcdClear
   764 ;;		_sprintf
   765 ;; This function is called by:
   766 ;;		_main
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text1
   771  0008AE                     __ptext1:
   772                           	opt stack 0
   773  0008AE                     _riksFactors:
   774                           	opt stack 24
   775                           
   776                           ;funciones.c: 40: unsigned char text[80];
   777                           ;funciones.c: 41: unsigned long int edad=0,estatura=0,peso=0,gender=0,smoke=0,parents=0,
      +                          systolic=0,diastolic=0;
   778                           
   779                           ;incstack = 0
   780  0008AE  0E00               	movlw	0
   781  0008B0  0100               	movlb	0	; () banked
   782  0008B2  6FB8               	movwf	riksFactors@edad& (0+255),b
   783  0008B4  0E00               	movlw	0
   784  0008B6  6FB9               	movwf	(riksFactors@edad+1)& (0+255),b
   785  0008B8  0E00               	movlw	0
   786  0008BA  6FBA               	movwf	(riksFactors@edad+2)& (0+255),b
   787  0008BC  0E00               	movlw	0
   788  0008BE  6FBB               	movwf	(riksFactors@edad+3)& (0+255),b
   789  0008C0  0E00               	movlw	0
   790  0008C2  0100               	movlb	0	; () banked
   791  0008C4  6FBC               	movwf	riksFactors@estatura& (0+255),b
   792  0008C6  0E00               	movlw	0
   793  0008C8  6FBD               	movwf	(riksFactors@estatura+1)& (0+255),b
   794  0008CA  0E00               	movlw	0
   795  0008CC  6FBE               	movwf	(riksFactors@estatura+2)& (0+255),b
   796  0008CE  0E00               	movlw	0
   797  0008D0  6FBF               	movwf	(riksFactors@estatura+3)& (0+255),b
   798  0008D2  0E00               	movlw	0
   799  0008D4  0100               	movlb	0	; () banked
   800  0008D6  6FC0               	movwf	riksFactors@peso& (0+255),b
   801  0008D8  0E00               	movlw	0
   802  0008DA  6FC1               	movwf	(riksFactors@peso+1)& (0+255),b
   803  0008DC  0E00               	movlw	0
   804  0008DE  6FC2               	movwf	(riksFactors@peso+2)& (0+255),b
   805  0008E0  0E00               	movlw	0
   806  0008E2  6FC3               	movwf	(riksFactors@peso+3)& (0+255),b
   807  0008E4  0E00               	movlw	0
   808  0008E6  0100               	movlb	0	; () banked
   809  0008E8  6FC4               	movwf	riksFactors@gender& (0+255),b
   810  0008EA  0E00               	movlw	0
   811  0008EC  6FC5               	movwf	(riksFactors@gender+1)& (0+255),b
   812  0008EE  0E00               	movlw	0
   813  0008F0  6FC6               	movwf	(riksFactors@gender+2)& (0+255),b
   814  0008F2  0E00               	movlw	0
   815  0008F4  6FC7               	movwf	(riksFactors@gender+3)& (0+255),b
   816  0008F6  0E00               	movlw	0
   817  0008F8  0100               	movlb	0	; () banked
   818  0008FA  6FC8               	movwf	riksFactors@smoke& (0+255),b
   819  0008FC  0E00               	movlw	0
   820  0008FE  6FC9               	movwf	(riksFactors@smoke+1)& (0+255),b
   821  000900  0E00               	movlw	0
   822  000902  6FCA               	movwf	(riksFactors@smoke+2)& (0+255),b
   823  000904  0E00               	movlw	0
   824  000906  6FCB               	movwf	(riksFactors@smoke+3)& (0+255),b
   825  000908  0E00               	movlw	0
   826  00090A  0100               	movlb	0	; () banked
   827  00090C  6FCC               	movwf	riksFactors@parents& (0+255),b
   828  00090E  0E00               	movlw	0
   829  000910  6FCD               	movwf	(riksFactors@parents+1)& (0+255),b
   830  000912  0E00               	movlw	0
   831  000914  6FCE               	movwf	(riksFactors@parents+2)& (0+255),b
   832  000916  0E00               	movlw	0
   833  000918  6FCF               	movwf	(riksFactors@parents+3)& (0+255),b
   834  00091A  0E00               	movlw	0
   835  00091C  0100               	movlb	0	; () banked
   836  00091E  6FB0               	movwf	riksFactors@systolic& (0+255),b
   837  000920  0E00               	movlw	0
   838  000922  6FB1               	movwf	(riksFactors@systolic+1)& (0+255),b
   839  000924  0E00               	movlw	0
   840  000926  6FB2               	movwf	(riksFactors@systolic+2)& (0+255),b
   841  000928  0E00               	movlw	0
   842  00092A  6FB3               	movwf	(riksFactors@systolic+3)& (0+255),b
   843  00092C  0E00               	movlw	0
   844  00092E  0100               	movlb	0	; () banked
   845  000930  6FB4               	movwf	riksFactors@diastolic& (0+255),b
   846  000932  0E00               	movlw	0
   847  000934  6FB5               	movwf	(riksFactors@diastolic+1)& (0+255),b
   848  000936  0E00               	movlw	0
   849  000938  6FB6               	movwf	(riksFactors@diastolic+2)& (0+255),b
   850  00093A  0E00               	movlw	0
   851  00093C  6FB7               	movwf	(riksFactors@diastolic+3)& (0+255),b
   852                           
   853                           ; BSR set to: 0
   854                           ;funciones.c: 43: lcdClear();
   855  00093E  EC7F  F00A         	call	_lcdClear	;wreg free
   856                           
   857                           ;funciones.c: 45: LCD_goto(LCD_01_ADDRESS,1,1);
   858  000942  0E01               	movlw	1
   859  000944  6E0C               	movwf	LCD_goto@row,c
   860  000946  0E01               	movlw	1
   861  000948  6E0D               	movwf	LCD_goto@column,c
   862  00094A  5043               	movf	_LCD_01_ADDRESS,w,c
   863  00094C  ECC8  F008         	call	_LCD_goto
   864                           
   865                           ;funciones.c: 46: LCD_puts(LCD_01_ADDRESS,"Teclee edad" );
   866  000950  0EA1               	movlw	low STR_1
   867  000952  6E0A               	movwf	LCD_puts@s,c
   868  000954  0E08               	movlw	high STR_1
   869  000956  6E0B               	movwf	LCD_puts@s+1,c
   870  000958  5043               	movf	_LCD_01_ADDRESS,w,c
   871  00095A  EC38  F009         	call	_LCD_puts
   872                           
   873                           ;funciones.c: 47: edad = keyNumber();
   874  00095E  ECD9  F007         	call	_keyNumber	;wreg free
   875  000962  C00F  F0B8         	movff	?_keyNumber,riksFactors@edad
   876  000966  C010  F0B9         	movff	?_keyNumber+1,riksFactors@edad+1
   877  00096A  C011  F0BA         	movff	?_keyNumber+2,riksFactors@edad+2
   878  00096E  C012  F0BB         	movff	?_keyNumber+3,riksFactors@edad+3
   879                           
   880                           ;funciones.c: 48: lcdClear();
   881  000972  EC7F  F00A         	call	_lcdClear	;wreg free
   882                           
   883                           ;funciones.c: 50: LCD_goto(LCD_01_ADDRESS,1,1);
   884  000976  0E01               	movlw	1
   885  000978  6E0C               	movwf	LCD_goto@row,c
   886  00097A  0E01               	movlw	1
   887  00097C  6E0D               	movwf	LCD_goto@column,c
   888  00097E  5043               	movf	_LCD_01_ADDRESS,w,c
   889  000980  ECC8  F008         	call	_LCD_goto
   890                           
   891                           ;funciones.c: 51: LCD_puts(LCD_01_ADDRESS,"Teclee peso en kg" );
   892  000984  0E70               	movlw	low STR_2
   893  000986  6E0A               	movwf	LCD_puts@s,c
   894  000988  0E08               	movlw	high STR_2
   895  00098A  6E0B               	movwf	LCD_puts@s+1,c
   896  00098C  5043               	movf	_LCD_01_ADDRESS,w,c
   897  00098E  EC38  F009         	call	_LCD_puts
   898                           
   899                           ;funciones.c: 52: peso = keyNumber();
   900  000992  ECD9  F007         	call	_keyNumber	;wreg free
   901  000996  C00F  F0C0         	movff	?_keyNumber,riksFactors@peso
   902  00099A  C010  F0C1         	movff	?_keyNumber+1,riksFactors@peso+1
   903  00099E  C011  F0C2         	movff	?_keyNumber+2,riksFactors@peso+2
   904  0009A2  C012  F0C3         	movff	?_keyNumber+3,riksFactors@peso+3
   905                           
   906                           ;funciones.c: 53: lcdClear();
   907  0009A6  EC7F  F00A         	call	_lcdClear	;wreg free
   908                           
   909                           ;funciones.c: 55: LCD_goto(LCD_01_ADDRESS,1,1);
   910  0009AA  0E01               	movlw	1
   911  0009AC  6E0C               	movwf	LCD_goto@row,c
   912  0009AE  0E01               	movlw	1
   913  0009B0  6E0D               	movwf	LCD_goto@column,c
   914  0009B2  5043               	movf	_LCD_01_ADDRESS,w,c
   915  0009B4  ECC8  F008         	call	_LCD_goto
   916                           
   917                           ;funciones.c: 56: LCD_puts(LCD_01_ADDRESS,"Teclee estatura(cm)" );
   918  0009B8  0E5C               	movlw	low STR_3
   919  0009BA  6E0A               	movwf	LCD_puts@s,c
   920  0009BC  0E08               	movlw	high STR_3
   921  0009BE  6E0B               	movwf	LCD_puts@s+1,c
   922  0009C0  5043               	movf	_LCD_01_ADDRESS,w,c
   923  0009C2  EC38  F009         	call	_LCD_puts
   924                           
   925                           ;funciones.c: 57: estatura = keyNumber();
   926  0009C6  ECD9  F007         	call	_keyNumber	;wreg free
   927  0009CA  C00F  F0BC         	movff	?_keyNumber,riksFactors@estatura
   928  0009CE  C010  F0BD         	movff	?_keyNumber+1,riksFactors@estatura+1
   929  0009D2  C011  F0BE         	movff	?_keyNumber+2,riksFactors@estatura+2
   930  0009D6  C012  F0BF         	movff	?_keyNumber+3,riksFactors@estatura+3
   931                           
   932                           ;funciones.c: 58: lcdClear();
   933  0009DA  EC7F  F00A         	call	_lcdClear	;wreg free
   934                           
   935                           ;funciones.c: 60: LCD_goto(LCD_01_ADDRESS,1,1);
   936  0009DE  0E01               	movlw	1
   937  0009E0  6E0C               	movwf	LCD_goto@row,c
   938  0009E2  0E01               	movlw	1
   939  0009E4  6E0D               	movwf	LCD_goto@column,c
   940  0009E6  5043               	movf	_LCD_01_ADDRESS,w,c
   941  0009E8  ECC8  F008         	call	_LCD_goto
   942                           
   943                           ;funciones.c: 61: LCD_puts(LCD_01_ADDRESS,"genero 0 H 1 M" );
   944  0009EC  0E92               	movlw	low STR_4
   945  0009EE  6E0A               	movwf	LCD_puts@s,c
   946  0009F0  0E08               	movlw	high STR_4
   947  0009F2  6E0B               	movwf	LCD_puts@s+1,c
   948  0009F4  5043               	movf	_LCD_01_ADDRESS,w,c
   949  0009F6  EC38  F009         	call	_LCD_puts
   950                           
   951                           ;funciones.c: 62: gender = keyNumber();
   952  0009FA  ECD9  F007         	call	_keyNumber	;wreg free
   953  0009FE  C00F  F0C4         	movff	?_keyNumber,riksFactors@gender
   954  000A02  C010  F0C5         	movff	?_keyNumber+1,riksFactors@gender+1
   955  000A06  C011  F0C6         	movff	?_keyNumber+2,riksFactors@gender+2
   956  000A0A  C012  F0C7         	movff	?_keyNumber+3,riksFactors@gender+3
   957                           
   958                           ;funciones.c: 63: lcdClear();
   959  000A0E  EC7F  F00A         	call	_lcdClear	;wreg free
   960                           
   961                           ;funciones.c: 65: LCD_goto(LCD_01_ADDRESS,1,1);
   962  000A12  0E01               	movlw	1
   963  000A14  6E0C               	movwf	LCD_goto@row,c
   964  000A16  0E01               	movlw	1
   965  000A18  6E0D               	movwf	LCD_goto@column,c
   966  000A1A  5043               	movf	_LCD_01_ADDRESS,w,c
   967  000A1C  ECC8  F008         	call	_LCD_goto
   968                           
   969                           ;funciones.c: 66: LCD_puts(LCD_01_ADDRESS,"Fuma? no 0 si 1" );
   970  000A20  0E82               	movlw	low STR_5
   971  000A22  6E0A               	movwf	LCD_puts@s,c
   972  000A24  0E08               	movlw	high STR_5
   973  000A26  6E0B               	movwf	LCD_puts@s+1,c
   974  000A28  5043               	movf	_LCD_01_ADDRESS,w,c
   975  000A2A  EC38  F009         	call	_LCD_puts
   976                           
   977                           ;funciones.c: 67: smoke = keyNumber();
   978  000A2E  ECD9  F007         	call	_keyNumber	;wreg free
   979  000A32  C00F  F0C8         	movff	?_keyNumber,riksFactors@smoke
   980  000A36  C010  F0C9         	movff	?_keyNumber+1,riksFactors@smoke+1
   981  000A3A  C011  F0CA         	movff	?_keyNumber+2,riksFactors@smoke+2
   982  000A3E  C012  F0CB         	movff	?_keyNumber+3,riksFactors@smoke+3
   983                           
   984                           ;funciones.c: 68: lcdClear();
   985  000A42  EC7F  F00A         	call	_lcdClear	;wreg free
   986                           
   987                           ;funciones.c: 70: LCD_goto(LCD_01_ADDRESS,1,1);
   988  000A46  0E01               	movlw	1
   989  000A48  6E0C               	movwf	LCD_goto@row,c
   990  000A4A  0E01               	movlw	1
   991  000A4C  6E0D               	movwf	LCD_goto@column,c
   992  000A4E  5043               	movf	_LCD_01_ADDRESS,w,c
   993  000A50  ECC8  F008         	call	_LCD_goto
   994                           
   995                           ;funciones.c: 71: LCD_puts(LCD_01_ADDRESS,"padres hiper? no 0  si  1 " );
   996  000A54  0E29               	movlw	low STR_6
   997  000A56  6E0A               	movwf	LCD_puts@s,c
   998  000A58  0E08               	movlw	high STR_6
   999  000A5A  6E0B               	movwf	LCD_puts@s+1,c
  1000  000A5C  5043               	movf	_LCD_01_ADDRESS,w,c
  1001  000A5E  EC38  F009         	call	_LCD_puts
  1002                           
  1003                           ;funciones.c: 72: parents = keyNumber();
  1004  000A62  ECD9  F007         	call	_keyNumber	;wreg free
  1005  000A66  C00F  F0CC         	movff	?_keyNumber,riksFactors@parents
  1006  000A6A  C010  F0CD         	movff	?_keyNumber+1,riksFactors@parents+1
  1007  000A6E  C011  F0CE         	movff	?_keyNumber+2,riksFactors@parents+2
  1008  000A72  C012  F0CF         	movff	?_keyNumber+3,riksFactors@parents+3
  1009                           
  1010                           ;funciones.c: 73: lcdClear();
  1011  000A76  EC7F  F00A         	call	_lcdClear	;wreg free
  1012                           
  1013                           ;funciones.c: 75: sprintf(text, "%lu,%lu,%lu,%lu,%lu,%lu", edad,peso,estatura,gender,smo
      +                          ke,parents);
  1014  000A7A  0E60               	movlw	low riksFactors@text
  1015  000A7C  6E17               	movwf	sprintf@sp,c
  1016  000A7E  0E00               	movlw	high riksFactors@text
  1017  000A80  6E18               	movwf	sprintf@sp+1,c
  1018  000A82  0E44               	movlw	low STR_7
  1019  000A84  6E19               	movwf	sprintf@f,c
  1020  000A86  0E08               	movlw	high STR_7
  1021  000A88  6E1A               	movwf	sprintf@f+1,c
  1022  000A8A  C0B8  F01B         	movff	riksFactors@edad,?_sprintf+4
  1023  000A8E  C0B9  F01C         	movff	riksFactors@edad+1,?_sprintf+5
  1024  000A92  C0BA  F01D         	movff	riksFactors@edad+2,?_sprintf+6
  1025  000A96  C0BB  F01E         	movff	riksFactors@edad+3,?_sprintf+7
  1026  000A9A  C0C0  F01F         	movff	riksFactors@peso,?_sprintf+8
  1027  000A9E  C0C1  F020         	movff	riksFactors@peso+1,?_sprintf+9
  1028  000AA2  C0C2  F021         	movff	riksFactors@peso+2,?_sprintf+10
  1029  000AA6  C0C3  F022         	movff	riksFactors@peso+3,?_sprintf+11
  1030  000AAA  C0BC  F023         	movff	riksFactors@estatura,?_sprintf+12
  1031  000AAE  C0BD  F024         	movff	riksFactors@estatura+1,?_sprintf+13
  1032  000AB2  C0BE  F025         	movff	riksFactors@estatura+2,?_sprintf+14
  1033  000AB6  C0BF  F026         	movff	riksFactors@estatura+3,?_sprintf+15
  1034  000ABA  C0C4  F027         	movff	riksFactors@gender,?_sprintf+16
  1035  000ABE  C0C5  F028         	movff	riksFactors@gender+1,?_sprintf+17
  1036  000AC2  C0C6  F029         	movff	riksFactors@gender+2,?_sprintf+18
  1037  000AC6  C0C7  F02A         	movff	riksFactors@gender+3,?_sprintf+19
  1038  000ACA  C0C8  F02B         	movff	riksFactors@smoke,?_sprintf+20
  1039  000ACE  C0C9  F02C         	movff	riksFactors@smoke+1,?_sprintf+21
  1040  000AD2  C0CA  F02D         	movff	riksFactors@smoke+2,?_sprintf+22
  1041  000AD6  C0CB  F02E         	movff	riksFactors@smoke+3,?_sprintf+23
  1042  000ADA  C0CC  F02F         	movff	riksFactors@parents,?_sprintf+24
  1043  000ADE  C0CD  F030         	movff	riksFactors@parents+1,?_sprintf+25
  1044  000AE2  C0CE  F031         	movff	riksFactors@parents+2,?_sprintf+26
  1045  000AE6  C0CF  F032         	movff	riksFactors@parents+3,?_sprintf+27
  1046  000AEA  EC86  F005         	call	_sprintf	;wreg free
  1047                           
  1048                           ;funciones.c: 76: LCD_goto(LCD_01_ADDRESS,2,1);
  1049  000AEE  0E02               	movlw	2
  1050  000AF0  6E0C               	movwf	LCD_goto@row,c
  1051  000AF2  0E01               	movlw	1
  1052  000AF4  6E0D               	movwf	LCD_goto@column,c
  1053  000AF6  5043               	movf	_LCD_01_ADDRESS,w,c
  1054  000AF8  ECC8  F008         	call	_LCD_goto
  1055                           
  1056                           ;funciones.c: 77: LCD_puts(LCD_01_ADDRESS,text );
  1057  000AFC  0E60               	movlw	low riksFactors@text
  1058  000AFE  6E0A               	movwf	LCD_puts@s,c
  1059  000B00  0E00               	movlw	high riksFactors@text
  1060  000B02  6E0B               	movwf	LCD_puts@s+1,c
  1061  000B04  5043               	movf	_LCD_01_ADDRESS,w,c
  1062  000B06  EC38  F009         	call	_LCD_puts
  1063  000B0A  0012               	return		;funcret
  1064  000B0C                     __end_of_riksFactors:
  1065                           	opt stack 0
  1066                           tblptru	equ	0xFF8
  1067                           tblptrh	equ	0xFF7
  1068                           tblptrl	equ	0xFF6
  1069                           tablat	equ	0xFF5
  1070                           postinc0	equ	0xFEE
  1071                           wreg	equ	0xFE8
  1072                           
  1073 ;; *************** function _sprintf *****************
  1074 ;; Defined at:
  1075 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;  sp              2   22[COMRAM] PTR unsigned char 
  1078 ;;		 -> riksFactors@text(80), 
  1079 ;;  f               2   24[COMRAM] PTR const unsigned char 
  1080 ;;		 -> STR_7(24), 
  1081 ;; Auto vars:     Size  Location     Type
  1082 ;;  val             4   55[COMRAM] unsigned long 
  1083 ;;  tmpval          4    0        struct .
  1084 ;;  cp              3    0        PTR const unsigned char 
  1085 ;;  ap              2   59[COMRAM] PTR void [1]
  1086 ;;		 -> ?_sprintf(2), 
  1087 ;;  prec            2   53[COMRAM] int 
  1088 ;;  len             2    0        unsigned int 
  1089 ;;  c               1   61[COMRAM] char 
  1090 ;;  flag            1   52[COMRAM] unsigned char 
  1091 ;; Return value:  Size  Location     Type
  1092 ;;                  2   22[COMRAM] int 
  1093 ;; Registers used:
  1094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1100 ;;      Params:        28       0       0       0       0       0       0       0       0
  1101 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1102 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1103 ;;      Totals:        40       0       0       0       0       0       0       0       0
  1104 ;;Total ram usage:       40 bytes
  1105 ;; Hardware stack levels used:    1
  1106 ;; Hardware stack levels required when called:    1
  1107 ;; This function calls:
  1108 ;;		___lldiv
  1109 ;;		___llmod
  1110 ;; This function is called by:
  1111 ;;		_riksFactors
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           	psect	text2
  1116  000B0C                     __ptext2:
  1117                           	opt stack 0
  1118  000B0C                     _sprintf:
  1119                           	opt stack 28
  1120                           
  1121                           ;doprnt.c: 494: va_list ap;
  1122                           ;doprnt.c: 499: signed char c;
  1123                           ;doprnt.c: 504: int prec;
  1124                           ;doprnt.c: 508: unsigned char flag;
  1125                           ;doprnt.c: 523: union {
  1126                           ;doprnt.c: 524: unsigned long vd;
  1127                           ;doprnt.c: 525: double integ;
  1128                           ;doprnt.c: 526: } tmpval;
  1129                           ;doprnt.c: 528: unsigned long val;
  1130                           ;doprnt.c: 529: unsigned len;
  1131                           ;doprnt.c: 530: const char * cp;
  1132                           ;doprnt.c: 533: *ap = __va_start();
  1133                           
  1134                           ;incstack = 0
  1135  000B0C  0E1B               	movlw	low (?_sprintf+4)
  1136  000B0E  6E3C               	movwf	sprintf@ap,c
  1137  000B10  0E00               	movlw	high (?_sprintf+4)
  1138  000B12  6E3D               	movwf	sprintf@ap+1,c
  1139                           
  1140                           ;doprnt.c: 536: while(c = *f++) {
  1141  000B14  D0BA               	goto	l1887
  1142  000B16                     l1839:
  1143                           
  1144                           ;doprnt.c: 538: if(c != '%')
  1145  000B16  0E25               	movlw	37
  1146  000B18  183E               	xorwf	sprintf@c,w,c
  1147  000B1A  B4D8               	btfsc	status,2,c
  1148  000B1C  D009               	goto	l1845
  1149                           
  1150                           ;doprnt.c: 540: {
  1151                           ;doprnt.c: 541: ((*sp++ = (c)));
  1152  000B1E  C017  FFD9         	movff	sprintf@sp,fsr2l
  1153  000B22  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1154  000B26  C03E  FFDF         	movff	sprintf@c,indf2
  1155  000B2A  4A17               	infsnz	sprintf@sp,f,c
  1156  000B2C  2A18               	incf	sprintf@sp+1,f,c
  1157                           
  1158                           ;doprnt.c: 542: continue;
  1159  000B2E  D0AD               	goto	l1887
  1160  000B30                     l1845:
  1161                           
  1162                           ;doprnt.c: 543: }
  1163                           ;doprnt.c: 548: flag = 0;
  1164  000B30  0E00               	movlw	0
  1165  000B32  6E35               	movwf	sprintf@flag,c
  1166                           
  1167                           ;doprnt.c: 635: switch(c = *f++) {
  1168                           
  1169                           ;doprnt.c: 633: loop:
  1170  000B34  D005               	goto	l1853
  1171  000B36                     l1847:
  1172                           
  1173                           ;doprnt.c: 643: flag |= 0x10;
  1174  000B36  8835               	bsf	sprintf@flag,4,c
  1175                           
  1176                           ;doprnt.c: 644: goto loop;
  1177  000B38  D003               	goto	l1853
  1178  000B3A                     l1849:
  1179                           
  1180                           ;doprnt.c: 818: flag |= 0xC0;
  1181  000B3A  0EC0               	movlw	192
  1182  000B3C  1235               	iorwf	sprintf@flag,f,c
  1183                           
  1184                           ;doprnt.c: 822: }
  1185                           
  1186                           ;doprnt.c: 819: break;
  1187  000B3E  D014               	goto	l182
  1188  000B40                     l1853:
  1189  000B40  C019  FFF6         	movff	sprintf@f,tblptrl
  1190  000B44  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1191  000B48  4A19               	infsnz	sprintf@f,f,c
  1192  000B4A  2A1A               	incf	sprintf@f+1,f,c
  1193  000B4C                     	if	0	;tblptru may be non-zero
  1194  000B4C                     	endif
  1195  000B4C                     	if	0	;tblptru may be non-zero
  1196  000B4C                     	endif
  1197  000B4C  0008               	tblrd		*
  1198  000B4E  CFF5 F03E          	movff	tablat,sprintf@c
  1199  000B52  503E               	movf	sprintf@c,w,c
  1200                           
  1201                           ; Switch size 1, requested type "space"
  1202                           ; Number of cases is 3, Range of values is 0 to 117
  1203                           ; switch strategies available:
  1204                           ; Name         Instructions Cycles
  1205                           ; simple_byte           10     6 (average)
  1206                           ;	Chosen strategy is simple_byte
  1207  000B54  0A00               	xorlw	0	; case 0
  1208  000B56  B4D8               	btfsc	status,2,c
  1209  000B58  D0A4               	goto	l1889
  1210  000B5A  0A6C               	xorlw	108	; case 108
  1211  000B5C  B4D8               	btfsc	status,2,c
  1212  000B5E  D7EB               	goto	l1847
  1213  000B60  0A19               	xorlw	25	; case 117
  1214  000B62  B4D8               	btfsc	status,2,c
  1215  000B64  D7EA               	goto	l1849
  1216  000B66  D091               	goto	l1887
  1217  000B68                     l182:
  1218                           
  1219                           ;doprnt.c: 1273: {
  1220                           ;doprnt.c: 1281: if(flag & 0x10)
  1221  000B68  A835               	btfss	sprintf@flag,4,c
  1222  000B6A  D00E               	goto	l1859
  1223                           
  1224                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  1225  000B6C  C03C  FFD9         	movff	sprintf@ap,fsr2l
  1226  000B70  C03D  FFDA         	movff	sprintf@ap+1,fsr2h
  1227  000B74  CFDE F038          	movff	postinc2,sprintf@val
  1228  000B78  CFDE F039          	movff	postinc2,sprintf@val+1
  1229  000B7C  CFDE F03A          	movff	postinc2,sprintf@val+2
  1230  000B80  CFDE F03B          	movff	postinc2,sprintf@val+3
  1231  000B84  0E04               	movlw	4
  1232  000B86  D00F               	goto	L1
  1233  000B88                     l1859:
  1234                           
  1235                           ;doprnt.c: 1283: else
  1236                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1237  000B88  C03C  FFD9         	movff	sprintf@ap,fsr2l
  1238  000B8C  C03D  FFDA         	movff	sprintf@ap+1,fsr2h
  1239  000B90  CFDE F033          	movff	postinc2,??_sprintf
  1240  000B94  CFDD F034          	movff	postdec2,??_sprintf+1
  1241  000B98  C033  F038         	movff	??_sprintf,sprintf@val
  1242  000B9C  C034  F039         	movff	??_sprintf+1,sprintf@val+1
  1243  000BA0  6A3A               	clrf	sprintf@val+2,c
  1244  000BA2  6A3B               	clrf	sprintf@val+3,c
  1245  000BA4  0E02               	movlw	2
  1246  000BA6                     L1:
  1247  000BA6  263C               	addwf	sprintf@ap,f,c
  1248  000BA8  0E00               	movlw	0
  1249  000BAA  223D               	addwfc	sprintf@ap+1,f,c
  1250                           
  1251                           ;doprnt.c: 1287: }
  1252                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1253  000BAC  0E01               	movlw	1
  1254  000BAE  6E3E               	movwf	sprintf@c,c
  1255  000BB0                     l1865:
  1256  000BB0  0E0A               	movlw	10
  1257  000BB2  183E               	xorwf	sprintf@c,w,c
  1258  000BB4  B4D8               	btfsc	status,2,c
  1259  000BB6  D018               	goto	l1877
  1260                           
  1261                           ;doprnt.c: 1306: if(val < dpowers[c])
  1262  000BB8  503E               	movf	sprintf@c,w,c
  1263  000BBA  0D04               	mullw	4
  1264  000BBC  0E01               	movlw	low _dpowers
  1265  000BBE  24F3               	addwf	prodl,w,c
  1266  000BC0  6EF6               	movwf	tblptrl,c
  1267  000BC2  0E08               	movlw	high _dpowers
  1268  000BC4  20F4               	addwfc	prodh,w,c
  1269  000BC6  6EF7               	movwf	tblptrh,c
  1270  000BC8                     	if	0	;There are less than 3 active tblptr bytes
  1271  000BC8                     	endif
  1272  000BC8  0009               	tblrd		*+
  1273  000BCA  50F5               	movf	tablat,w,c
  1274  000BCC  5C38               	subwf	sprintf@val,w,c
  1275  000BCE  0009               	tblrd		*+
  1276  000BD0  50F5               	movf	tablat,w,c
  1277  000BD2  5839               	subwfb	sprintf@val+1,w,c
  1278  000BD4  0009               	tblrd		*+
  1279  000BD6  50F5               	movf	tablat,w,c
  1280  000BD8  583A               	subwfb	sprintf@val+2,w,c
  1281  000BDA  0009               	tblrd		*+
  1282  000BDC  50F5               	movf	tablat,w,c
  1283  000BDE  583B               	subwfb	sprintf@val+3,w,c
  1284  000BE0  A0D8               	btfss	status,0,c
  1285  000BE2  D002               	goto	l1877
  1286                           
  1287                           ;doprnt.c: 1307: break;
  1288  000BE4  2A3E               	incf	sprintf@c,f,c
  1289  000BE6  D7E4               	goto	l1865
  1290  000BE8                     l1877:
  1291                           
  1292                           ;doprnt.c: 1422: {
  1293                           ;doprnt.c: 1469: }
  1294                           ;doprnt.c: 1472: prec = c;
  1295  000BE8  503E               	movf	sprintf@c,w,c
  1296  000BEA  6E36               	movwf	sprintf@prec,c
  1297  000BEC  6A37               	clrf	sprintf@prec+1,c
  1298  000BEE  BE36               	btfsc	sprintf@prec,7,c
  1299  000BF0  0637               	decf	sprintf@prec+1,f,c
  1300                           
  1301                           ;doprnt.c: 1474: while(prec--) {
  1302  000BF2  D043               	goto	l1885
  1303  000BF4                     l1879:
  1304                           
  1305                           ;doprnt.c: 1478: {
  1306                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1307  000BF4  C036  F033         	movff	sprintf@prec,??_sprintf
  1308  000BF8  C037  F034         	movff	sprintf@prec+1,??_sprintf+1
  1309  000BFC  90D8               	bcf	status,0,c
  1310  000BFE  3633               	rlcf	??_sprintf,f,c
  1311  000C00  3634               	rlcf	??_sprintf+1,f,c
  1312  000C02  90D8               	bcf	status,0,c
  1313  000C04  3633               	rlcf	??_sprintf,f,c
  1314  000C06  3634               	rlcf	??_sprintf+1,f,c
  1315  000C08  0E01               	movlw	low _dpowers
  1316  000C0A  2433               	addwf	??_sprintf,w,c
  1317  000C0C  6EF6               	movwf	tblptrl,c
  1318  000C0E  0E08               	movlw	high _dpowers
  1319  000C10  2034               	addwfc	??_sprintf+1,w,c
  1320  000C12  6EF7               	movwf	tblptrh,c
  1321  000C14                     	if	0	;There are less than 3 active tblptr bytes
  1322  000C14                     	endif
  1323  000C14  0009               	tblrd		*+
  1324  000C16  CFF5 F005          	movff	tablat,___lldiv@divisor
  1325  000C1A  0009               	tblrd		*+
  1326  000C1C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1327  000C20  0009               	tblrd		*+
  1328  000C22  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1329  000C26  000A               	tblrd		*-
  1330  000C28  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1331  000C2C  C038  F001         	movff	sprintf@val,___lldiv@dividend
  1332  000C30  C039  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1333  000C34  C03A  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1334  000C38  C03B  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1335  000C3C  EC87  F008         	call	___lldiv	;wreg free
  1336  000C40  C001  F00E         	movff	?___lldiv,___llmod@dividend
  1337  000C44  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  1338  000C48  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  1339  000C4C  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  1340  000C50  0E0A               	movlw	10
  1341  000C52  6E12               	movwf	___llmod@divisor,c
  1342  000C54  0E00               	movlw	0
  1343  000C56  6E13               	movwf	___llmod@divisor+1,c
  1344  000C58  0E00               	movlw	0
  1345  000C5A  6E14               	movwf	___llmod@divisor+2,c
  1346  000C5C  0E00               	movlw	0
  1347  000C5E  6E15               	movwf	___llmod@divisor+3,c
  1348  000C60  EC05  F009         	call	___llmod	;wreg free
  1349  000C64  500E               	movf	?___llmod,w,c
  1350  000C66  0F30               	addlw	48
  1351  000C68  6E3E               	movwf	sprintf@c,c
  1352                           
  1353                           ;doprnt.c: 1523: }
  1354                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1355  000C6A  C017  FFD9         	movff	sprintf@sp,fsr2l
  1356  000C6E  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1357  000C72  C03E  FFDF         	movff	sprintf@c,indf2
  1358  000C76  4A17               	infsnz	sprintf@sp,f,c
  1359  000C78  2A18               	incf	sprintf@sp+1,f,c
  1360  000C7A                     l1885:
  1361  000C7A  0636               	decf	sprintf@prec,f,c
  1362  000C7C  A0D8               	btfss	status,0,c
  1363  000C7E  0637               	decf	sprintf@prec+1,f,c
  1364  000C80  2836               	incf	sprintf@prec,w,c
  1365  000C82  E1B8               	bnz	l1879
  1366  000C84  2837               	incf	sprintf@prec+1,w,c
  1367  000C86  A4D8               	btfss	status,2,c
  1368  000C88  D7B5               	goto	l1879
  1369  000C8A                     l1887:
  1370  000C8A  C019  FFF6         	movff	sprintf@f,tblptrl
  1371  000C8E  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1372  000C92  4A19               	infsnz	sprintf@f,f,c
  1373  000C94  2A1A               	incf	sprintf@f+1,f,c
  1374  000C96                     	if	0	;tblptru may be non-zero
  1375  000C96                     	endif
  1376  000C96                     	if	0	;tblptru may be non-zero
  1377  000C96                     	endif
  1378  000C96  0008               	tblrd		*
  1379  000C98  CFF5 F03E          	movff	tablat,sprintf@c
  1380  000C9C  503E               	movf	sprintf@c,w,c
  1381  000C9E  A4D8               	btfss	status,2,c
  1382  000CA0  D73A               	goto	l1839
  1383  000CA2                     l1889:
  1384                           
  1385                           ;doprnt.c: 1538: *sp = 0;
  1386  000CA2  C017  FFD9         	movff	sprintf@sp,fsr2l
  1387  000CA6  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1388  000CAA  0E00               	movlw	0
  1389  000CAC  6EDF               	movwf	indf2,c
  1390  000CAE  0012               	return	
  1391  000CB0                     __end_of_sprintf:
  1392                           	opt stack 0
  1393                           tblptru	equ	0xFF8
  1394                           tblptrh	equ	0xFF7
  1395                           tblptrl	equ	0xFF6
  1396                           tablat	equ	0xFF5
  1397                           prodh	equ	0xFF4
  1398                           prodl	equ	0xFF3
  1399                           postinc0	equ	0xFEE
  1400                           wreg	equ	0xFE8
  1401                           indf2	equ	0xFDF
  1402                           postinc2	equ	0xFDE
  1403                           postdec2	equ	0xFDD
  1404                           fsr2h	equ	0xFDA
  1405                           fsr2l	equ	0xFD9
  1406                           status	equ	0xFD8
  1407                           
  1408 ;; *************** function ___llmod *****************
  1409 ;; Defined at:
  1410 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;  dividend        4   13[COMRAM] unsigned long 
  1413 ;;  divisor         4   17[COMRAM] unsigned long 
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;  counter         1   21[COMRAM] unsigned char 
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  4   13[COMRAM] unsigned long 
  1418 ;; Registers used:
  1419 ;;		wreg, status,2, status,0
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1425 ;;      Params:         8       0       0       0       0       0       0       0       0
  1426 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1427 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1428 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1429 ;;Total ram usage:        9 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; This function calls:
  1432 ;;		Nothing
  1433 ;; This function is called by:
  1434 ;;		_sprintf
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text3
  1439  00120A                     __ptext3:
  1440                           	opt stack 0
  1441  00120A                     ___llmod:
  1442                           	opt stack 28
  1443                           
  1444                           ;incstack = 0
  1445  00120A  5012               	movf	___llmod@divisor,w,c
  1446  00120C  1013               	iorwf	___llmod@divisor+1,w,c
  1447  00120E  1014               	iorwf	___llmod@divisor+2,w,c
  1448  001210  1015               	iorwf	___llmod@divisor+3,w,c
  1449  001212  B4D8               	btfsc	status,2,c
  1450  001214  D024               	goto	l617
  1451  001216  0E01               	movlw	1
  1452  001218  6E16               	movwf	___llmod@counter,c
  1453  00121A  D006               	goto	l1791
  1454  00121C                     l1789:
  1455  00121C  90D8               	bcf	status,0,c
  1456  00121E  3612               	rlcf	___llmod@divisor,f,c
  1457  001220  3613               	rlcf	___llmod@divisor+1,f,c
  1458  001222  3614               	rlcf	___llmod@divisor+2,f,c
  1459  001224  3615               	rlcf	___llmod@divisor+3,f,c
  1460  001226  2A16               	incf	___llmod@counter,f,c
  1461  001228                     l1791:
  1462  001228  AE15               	btfss	___llmod@divisor+3,7,c
  1463  00122A  D7F8               	goto	l1789
  1464  00122C                     l1793:
  1465  00122C  5012               	movf	___llmod@divisor,w,c
  1466  00122E  5C0E               	subwf	___llmod@dividend,w,c
  1467  001230  5013               	movf	___llmod@divisor+1,w,c
  1468  001232  580F               	subwfb	___llmod@dividend+1,w,c
  1469  001234  5014               	movf	___llmod@divisor+2,w,c
  1470  001236  5810               	subwfb	___llmod@dividend+2,w,c
  1471  001238  5015               	movf	___llmod@divisor+3,w,c
  1472  00123A  5811               	subwfb	___llmod@dividend+3,w,c
  1473  00123C  A0D8               	btfss	status,0,c
  1474  00123E  D008               	goto	l1797
  1475  001240  5012               	movf	___llmod@divisor,w,c
  1476  001242  5E0E               	subwf	___llmod@dividend,f,c
  1477  001244  5013               	movf	___llmod@divisor+1,w,c
  1478  001246  5A0F               	subwfb	___llmod@dividend+1,f,c
  1479  001248  5014               	movf	___llmod@divisor+2,w,c
  1480  00124A  5A10               	subwfb	___llmod@dividend+2,f,c
  1481  00124C  5015               	movf	___llmod@divisor+3,w,c
  1482  00124E  5A11               	subwfb	___llmod@dividend+3,f,c
  1483  001250                     l1797:
  1484  001250  90D8               	bcf	status,0,c
  1485  001252  3215               	rrcf	___llmod@divisor+3,f,c
  1486  001254  3214               	rrcf	___llmod@divisor+2,f,c
  1487  001256  3213               	rrcf	___llmod@divisor+1,f,c
  1488  001258  3212               	rrcf	___llmod@divisor,f,c
  1489  00125A  2E16               	decfsz	___llmod@counter,f,c
  1490  00125C  D7E7               	goto	l1793
  1491  00125E                     l617:
  1492  00125E  C00E  F00E         	movff	___llmod@dividend,?___llmod
  1493  001262  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  1494  001266  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  1495  00126A  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  1496  00126E  0012               	return		;funcret
  1497  001270                     __end_of___llmod:
  1498                           	opt stack 0
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           prodh	equ	0xFF4
  1504                           prodl	equ	0xFF3
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           indf2	equ	0xFDF
  1508                           postinc2	equ	0xFDE
  1509                           postdec2	equ	0xFDD
  1510                           fsr2h	equ	0xFDA
  1511                           fsr2l	equ	0xFD9
  1512                           status	equ	0xFD8
  1513                           
  1514 ;; *************** function ___lldiv *****************
  1515 ;; Defined at:
  1516 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;  dividend        4    0[COMRAM] unsigned long 
  1519 ;;  divisor         4    4[COMRAM] unsigned long 
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  quotient        4    8[COMRAM] unsigned long 
  1522 ;;  counter         1   12[COMRAM] unsigned char 
  1523 ;; Return value:  Size  Location     Type
  1524 ;;                  4    0[COMRAM] unsigned long 
  1525 ;; Registers used:
  1526 ;;		wreg, status,2, status,0
  1527 ;; Tracked objects:
  1528 ;;		On entry : 0/0
  1529 ;;		On exit  : 0/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1532 ;;      Params:         8       0       0       0       0       0       0       0       0
  1533 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1534 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1535 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1536 ;;Total ram usage:       13 bytes
  1537 ;; Hardware stack levels used:    1
  1538 ;; This function calls:
  1539 ;;		Nothing
  1540 ;; This function is called by:
  1541 ;;		_sprintf
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           	psect	text4
  1546  00110E                     __ptext4:
  1547                           	opt stack 0
  1548  00110E                     ___lldiv:
  1549                           	opt stack 28
  1550                           
  1551                           ;incstack = 0
  1552  00110E  0E00               	movlw	0
  1553  001110  6E09               	movwf	___lldiv@quotient,c
  1554  001112  0E00               	movlw	0
  1555  001114  6E0A               	movwf	___lldiv@quotient+1,c
  1556  001116  0E00               	movlw	0
  1557  001118  6E0B               	movwf	___lldiv@quotient+2,c
  1558  00111A  0E00               	movlw	0
  1559  00111C  6E0C               	movwf	___lldiv@quotient+3,c
  1560  00111E  5005               	movf	___lldiv@divisor,w,c
  1561  001120  1006               	iorwf	___lldiv@divisor+1,w,c
  1562  001122  1007               	iorwf	___lldiv@divisor+2,w,c
  1563  001124  1008               	iorwf	___lldiv@divisor+3,w,c
  1564  001126  B4D8               	btfsc	status,2,c
  1565  001128  D02A               	goto	l607
  1566  00112A  0E01               	movlw	1
  1567  00112C  6E0D               	movwf	___lldiv@counter,c
  1568  00112E  D006               	goto	l1771
  1569  001130                     l1769:
  1570  001130  90D8               	bcf	status,0,c
  1571  001132  3605               	rlcf	___lldiv@divisor,f,c
  1572  001134  3606               	rlcf	___lldiv@divisor+1,f,c
  1573  001136  3607               	rlcf	___lldiv@divisor+2,f,c
  1574  001138  3608               	rlcf	___lldiv@divisor+3,f,c
  1575  00113A  2A0D               	incf	___lldiv@counter,f,c
  1576  00113C                     l1771:
  1577  00113C  AE08               	btfss	___lldiv@divisor+3,7,c
  1578  00113E  D7F8               	goto	l1769
  1579  001140                     l1773:
  1580  001140  90D8               	bcf	status,0,c
  1581  001142  3609               	rlcf	___lldiv@quotient,f,c
  1582  001144  360A               	rlcf	___lldiv@quotient+1,f,c
  1583  001146  360B               	rlcf	___lldiv@quotient+2,f,c
  1584  001148  360C               	rlcf	___lldiv@quotient+3,f,c
  1585  00114A  5005               	movf	___lldiv@divisor,w,c
  1586  00114C  5C01               	subwf	___lldiv@dividend,w,c
  1587  00114E  5006               	movf	___lldiv@divisor+1,w,c
  1588  001150  5802               	subwfb	___lldiv@dividend+1,w,c
  1589  001152  5007               	movf	___lldiv@divisor+2,w,c
  1590  001154  5803               	subwfb	___lldiv@dividend+2,w,c
  1591  001156  5008               	movf	___lldiv@divisor+3,w,c
  1592  001158  5804               	subwfb	___lldiv@dividend+3,w,c
  1593  00115A  A0D8               	btfss	status,0,c
  1594  00115C  D009               	goto	l1781
  1595  00115E  5005               	movf	___lldiv@divisor,w,c
  1596  001160  5E01               	subwf	___lldiv@dividend,f,c
  1597  001162  5006               	movf	___lldiv@divisor+1,w,c
  1598  001164  5A02               	subwfb	___lldiv@dividend+1,f,c
  1599  001166  5007               	movf	___lldiv@divisor+2,w,c
  1600  001168  5A03               	subwfb	___lldiv@dividend+2,f,c
  1601  00116A  5008               	movf	___lldiv@divisor+3,w,c
  1602  00116C  5A04               	subwfb	___lldiv@dividend+3,f,c
  1603  00116E  8009               	bsf	___lldiv@quotient,0,c
  1604  001170                     l1781:
  1605  001170  90D8               	bcf	status,0,c
  1606  001172  3208               	rrcf	___lldiv@divisor+3,f,c
  1607  001174  3207               	rrcf	___lldiv@divisor+2,f,c
  1608  001176  3206               	rrcf	___lldiv@divisor+1,f,c
  1609  001178  3205               	rrcf	___lldiv@divisor,f,c
  1610  00117A  2E0D               	decfsz	___lldiv@counter,f,c
  1611  00117C  D7E1               	goto	l1773
  1612  00117E                     l607:
  1613  00117E  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1614  001182  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1615  001186  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1616  00118A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1617  00118E  0012               	return		;funcret
  1618  001190                     __end_of___lldiv:
  1619                           	opt stack 0
  1620                           tblptru	equ	0xFF8
  1621                           tblptrh	equ	0xFF7
  1622                           tblptrl	equ	0xFF6
  1623                           tablat	equ	0xFF5
  1624                           prodh	equ	0xFF4
  1625                           prodl	equ	0xFF3
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           indf2	equ	0xFDF
  1629                           postinc2	equ	0xFDE
  1630                           postdec2	equ	0xFDD
  1631                           fsr2h	equ	0xFDA
  1632                           fsr2l	equ	0xFD9
  1633                           status	equ	0xFD8
  1634                           
  1635 ;; *************** function _lcdClear *****************
  1636 ;; Defined at:
  1637 ;;		line 80 in file "funciones.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;		None
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;		None
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      void 
  1644 ;; Registers used:
  1645 ;;		wreg, status,2, status,0, cstack
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1651 ;;      Params:         0       0       0       0       0       0       0       0       0
  1652 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1653 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1654 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1655 ;;Total ram usage:        0 bytes
  1656 ;; Hardware stack levels used:    1
  1657 ;; Hardware stack levels required when called:    4
  1658 ;; This function calls:
  1659 ;;		_LCD_putcmd
  1660 ;; This function is called by:
  1661 ;;		_riksFactors
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664                           
  1665                           	psect	text5
  1666  0014FE                     __ptext5:
  1667                           	opt stack 0
  1668  0014FE                     _lcdClear:
  1669                           	opt stack 25
  1670                           
  1671                           ;funciones.c: 89: LCD_putcmd(LCD_01_ADDRESS, 0x01,1);
  1672                           
  1673                           ;incstack = 0
  1674  0014FE  0E01               	movlw	1
  1675  001500  6E07               	movwf	LCD_putcmd@data,c
  1676  001502  0E01               	movlw	1
  1677  001504  6E08               	movwf	LCD_putcmd@cmdtype,c
  1678  001506  5043               	movf	_LCD_01_ADDRESS,w,c
  1679  001508  EC97  F009         	call	_LCD_putcmd
  1680  00150C  0012               	return		;funcret
  1681  00150E                     __end_of_lcdClear:
  1682                           	opt stack 0
  1683                           tblptru	equ	0xFF8
  1684                           tblptrh	equ	0xFF7
  1685                           tblptrl	equ	0xFF6
  1686                           tablat	equ	0xFF5
  1687                           prodh	equ	0xFF4
  1688                           prodl	equ	0xFF3
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           indf2	equ	0xFDF
  1692                           postinc2	equ	0xFDE
  1693                           postdec2	equ	0xFDD
  1694                           fsr2h	equ	0xFDA
  1695                           fsr2l	equ	0xFD9
  1696                           status	equ	0xFD8
  1697                           
  1698 ;; *************** function _keyNumber *****************
  1699 ;; Defined at:
  1700 ;;		line 6 in file "funciones.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;		None
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  arreglo        20   18[COMRAM] unsigned char [20]
  1705 ;;  number          4   38[COMRAM] unsigned long 
  1706 ;;  i               2   45[COMRAM] unsigned int 
  1707 ;;  contador        2   42[COMRAM] unsigned int 
  1708 ;;  tecla           1   44[COMRAM] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  4   14[COMRAM] unsigned long 
  1711 ;; Registers used:
  1712 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1718 ;;      Params:         4       0       0       0       0       0       0       0       0
  1719 ;;      Locals:        29       0       0       0       0       0       0       0       0
  1720 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1721 ;;      Totals:        33       0       0       0       0       0       0       0       0
  1722 ;;Total ram usage:       33 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    5
  1725 ;; This function calls:
  1726 ;;		_KP_Readbutton
  1727 ;;		_LCD_goto
  1728 ;;		_LCD_puts
  1729 ;;		_atoi
  1730 ;; This function is called by:
  1731 ;;		_riksFactors
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text6
  1736  000FB2                     __ptext6:
  1737                           	opt stack 0
  1738  000FB2                     _keyNumber:
  1739                           	opt stack 24
  1740                           
  1741                           ;funciones.c: 7: unsigned char arreglo[20];
  1742                           ;funciones.c: 8: unsigned int contador =0,i=0;
  1743                           
  1744                           ;incstack = 0
  1745  000FB2  0E00               	movlw	0
  1746  000FB4  6E2C               	movwf	keyNumber@contador+1,c
  1747  000FB6  0E00               	movlw	0
  1748  000FB8  6E2B               	movwf	keyNumber@contador,c
  1749  000FBA  0E00               	movlw	0
  1750  000FBC  6E2F               	movwf	keyNumber@i+1,c
  1751  000FBE  0E00               	movlw	0
  1752  000FC0  6E2E               	movwf	keyNumber@i,c
  1753  000FC2                     l1803:
  1754  000FC2  502F               	movf	keyNumber@i+1,w,c
  1755  000FC4  E10F               	bnz	l1813
  1756  000FC6  0E0A               	movlw	10
  1757  000FC8  5C2E               	subwf	keyNumber@i,w,c
  1758  000FCA  B0D8               	btfsc	status,0,c
  1759  000FCC  D00B               	goto	l1813
  1760                           
  1761                           ;funciones.c: 11: arreglo[i]=0;
  1762  000FCE  0E13               	movlw	low keyNumber@arreglo
  1763  000FD0  242E               	addwf	keyNumber@i,w,c
  1764  000FD2  6ED9               	movwf	fsr2l,c
  1765  000FD4  0E00               	movlw	high keyNumber@arreglo
  1766  000FD6  202F               	addwfc	keyNumber@i+1,w,c
  1767  000FD8  6EDA               	movwf	fsr2h,c
  1768  000FDA  0E00               	movlw	0
  1769  000FDC  6EDF               	movwf	indf2,c
  1770  000FDE  4A2E               	infsnz	keyNumber@i,f,c
  1771  000FE0  2A2F               	incf	keyNumber@i+1,f,c
  1772  000FE2  D7EF               	goto	l1803
  1773  000FE4                     l1813:
  1774                           
  1775                           ;funciones.c: 15: tecla = KP_Readbutton();
  1776  000FE4  EC58  F006         	call	_KP_Readbutton	;wreg free
  1777  000FE8  6E2D               	movwf	keyNumber@tecla,c
  1778                           
  1779                           ;funciones.c: 17: if (tecla != '+'){
  1780  000FEA  0E2B               	movlw	43
  1781  000FEC  182D               	xorwf	keyNumber@tecla,w,c
  1782  000FEE  B4D8               	btfsc	status,2,c
  1783  000FF0  D019               	goto	l1825
  1784                           
  1785                           ;funciones.c: 18: arreglo[contador]= tecla;
  1786  000FF2  0E13               	movlw	low keyNumber@arreglo
  1787  000FF4  242B               	addwf	keyNumber@contador,w,c
  1788  000FF6  6ED9               	movwf	fsr2l,c
  1789  000FF8  0E00               	movlw	high keyNumber@arreglo
  1790  000FFA  202C               	addwfc	keyNumber@contador+1,w,c
  1791  000FFC  6EDA               	movwf	fsr2h,c
  1792  000FFE  C02D  FFDF         	movff	keyNumber@tecla,indf2
  1793                           
  1794                           ;funciones.c: 19: LCD_goto(LCD_01_ADDRESS,2,1);
  1795  001002  0E02               	movlw	2
  1796  001004  6E0C               	movwf	LCD_goto@row,c
  1797  001006  0E01               	movlw	1
  1798  001008  6E0D               	movwf	LCD_goto@column,c
  1799  00100A  5043               	movf	_LCD_01_ADDRESS,w,c
  1800  00100C  ECC8  F008         	call	_LCD_goto
  1801                           
  1802                           ;funciones.c: 20: LCD_puts(LCD_01_ADDRESS, arreglo);
  1803  001010  0E13               	movlw	low keyNumber@arreglo
  1804  001012  6E0A               	movwf	LCD_puts@s,c
  1805  001014  0E00               	movlw	high keyNumber@arreglo
  1806  001016  6E0B               	movwf	LCD_puts@s+1,c
  1807  001018  5043               	movf	_LCD_01_ADDRESS,w,c
  1808  00101A  EC38  F009         	call	_LCD_puts
  1809                           
  1810                           ;funciones.c: 21: contador++;
  1811  00101E  4A2B               	infsnz	keyNumber@contador,f,c
  1812  001020  2A2C               	incf	keyNumber@contador+1,f,c
  1813                           
  1814                           ;funciones.c: 23: }
  1815  001022  D7E0               	goto	l1813
  1816  001024                     l1825:
  1817                           
  1818                           ;funciones.c: 24: else
  1819                           ;funciones.c: 25: {
  1820                           ;funciones.c: 26: LCD_goto(LCD_01_ADDRESS,2,1);
  1821  001024  0E02               	movlw	2
  1822  001026  6E0C               	movwf	LCD_goto@row,c
  1823  001028  0E01               	movlw	1
  1824  00102A  6E0D               	movwf	LCD_goto@column,c
  1825  00102C  5043               	movf	_LCD_01_ADDRESS,w,c
  1826  00102E  ECC8  F008         	call	_LCD_goto
  1827                           
  1828                           ;funciones.c: 27: LCD_puts(LCD_01_ADDRESS, arreglo);
  1829  001032  0E13               	movlw	low keyNumber@arreglo
  1830  001034  6E0A               	movwf	LCD_puts@s,c
  1831  001036  0E00               	movlw	high keyNumber@arreglo
  1832  001038  6E0B               	movwf	LCD_puts@s+1,c
  1833  00103A  5043               	movf	_LCD_01_ADDRESS,w,c
  1834  00103C  EC38  F009         	call	_LCD_puts
  1835                           
  1836                           ;funciones.c: 29: }
  1837                           ;funciones.c: 33: }
  1838                           ;funciones.c: 35: number = (unsigned long int)atoi(arreglo);
  1839                           
  1840                           ;funciones.c: 28: break;
  1841  001040  0E13               	movlw	low keyNumber@arreglo
  1842  001042  6E07               	movwf	atoi@s,c
  1843  001044  0E00               	movlw	high keyNumber@arreglo
  1844  001046  6E08               	movwf	atoi@s+1,c
  1845  001048  EC72  F007         	call	_atoi	;wreg free
  1846  00104C  C007  F027         	movff	?_atoi,keyNumber@number
  1847  001050  C008  F028         	movff	?_atoi+1,keyNumber@number+1
  1848  001054  0E00               	movlw	0
  1849  001056  BE28               	btfsc	keyNumber@number+1,7,c
  1850  001058  0EFF               	movlw	-1
  1851  00105A  6E29               	movwf	keyNumber@number+2,c
  1852  00105C  6E2A               	movwf	keyNumber@number+3,c
  1853                           
  1854                           ;funciones.c: 36: return number;
  1855  00105E  C027  F00F         	movff	keyNumber@number,?_keyNumber
  1856  001062  C028  F010         	movff	keyNumber@number+1,?_keyNumber+1
  1857  001066  C029  F011         	movff	keyNumber@number+2,?_keyNumber+2
  1858  00106A  C02A  F012         	movff	keyNumber@number+3,?_keyNumber+3
  1859  00106E  0012               	return	
  1860  001070                     __end_of_keyNumber:
  1861                           	opt stack 0
  1862                           tblptru	equ	0xFF8
  1863                           tblptrh	equ	0xFF7
  1864                           tblptrl	equ	0xFF6
  1865                           tablat	equ	0xFF5
  1866                           prodh	equ	0xFF4
  1867                           prodl	equ	0xFF3
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           indf2	equ	0xFDF
  1871                           postinc2	equ	0xFDE
  1872                           postdec2	equ	0xFDD
  1873                           fsr2h	equ	0xFDA
  1874                           fsr2l	equ	0xFD9
  1875                           status	equ	0xFD8
  1876                           
  1877 ;; *************** function _atoi *****************
  1878 ;; Defined at:
  1879 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  1880 ;; Parameters:    Size  Location     Type
  1881 ;;  s               2    6[COMRAM] PTR const unsigned char 
  1882 ;;		 -> keyNumber@arreglo(20), 
  1883 ;; Auto vars:     Size  Location     Type
  1884 ;;  a               2   11[COMRAM] int 
  1885 ;;  sign            1   10[COMRAM] unsigned char 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  2    6[COMRAM] int 
  1888 ;; Registers used:
  1889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1895 ;;      Params:         2       0       0       0       0       0       0       0       0
  1896 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1897 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1898 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1899 ;;Total ram usage:        7 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    1
  1902 ;; This function calls:
  1903 ;;		___wmul
  1904 ;;		_isdigit
  1905 ;; This function is called by:
  1906 ;;		_keyNumber
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910                           	psect	text7
  1911  000EE4                     __ptext7:
  1912                           	opt stack 0
  1913  000EE4                     _atoi:
  1914                           	opt stack 27
  1915                           
  1916                           ;incstack = 0
  1917  000EE4  D002               	goto	l1739
  1918  000EE6                     l1737:
  1919  000EE6  4A07               	infsnz	atoi@s,f,c
  1920  000EE8  2A08               	incf	atoi@s+1,f,c
  1921  000EEA                     l1739:
  1922  000EEA  C007  FFD9         	movff	atoi@s,fsr2l
  1923  000EEE  C008  FFDA         	movff	atoi@s+1,fsr2h
  1924  000EF2  0E20               	movlw	32
  1925  000EF4  18DE               	xorwf	postinc2,w,c
  1926  000EF6  B4D8               	btfsc	status,2,c
  1927  000EF8  D7F6               	goto	l1737
  1928  000EFA  C007  FFD9         	movff	atoi@s,fsr2l
  1929  000EFE  C008  FFDA         	movff	atoi@s+1,fsr2h
  1930  000F02  0E09               	movlw	9
  1931  000F04  18DE               	xorwf	postinc2,w,c
  1932  000F06  B4D8               	btfsc	status,2,c
  1933  000F08  D7EE               	goto	l1737
  1934  000F0A  0E00               	movlw	0
  1935  000F0C  6E0D               	movwf	atoi@a+1,c
  1936  000F0E  0E00               	movlw	0
  1937  000F10  6E0C               	movwf	atoi@a,c
  1938  000F12  0E00               	movlw	0
  1939  000F14  6E0B               	movwf	atoi@sign,c
  1940  000F16  C007  FFD9         	movff	atoi@s,fsr2l
  1941  000F1A  C008  FFDA         	movff	atoi@s+1,fsr2h
  1942  000F1E  0E2D               	movlw	45
  1943  000F20  18DE               	xorwf	postinc2,w,c
  1944  000F22  A4D8               	btfss	status,2,c
  1945  000F24  D002               	goto	l1749
  1946  000F26  2A0B               	incf	atoi@sign,f,c
  1947  000F28  D024               	goto	l1755
  1948  000F2A                     l1749:
  1949  000F2A  C007  FFD9         	movff	atoi@s,fsr2l
  1950  000F2E  C008  FFDA         	movff	atoi@s+1,fsr2h
  1951  000F32  0E2B               	movlw	43
  1952  000F34  18DE               	xorwf	postinc2,w,c
  1953  000F36  A4D8               	btfss	status,2,c
  1954  000F38  D01E               	goto	l1757
  1955  000F3A  D01B               	goto	l1755
  1956  000F3C                     l1753:
  1957  000F3C  C00C  F001         	movff	atoi@a,___wmul@multiplier
  1958  000F40  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  1959  000F44  0E00               	movlw	0
  1960  000F46  6E04               	movwf	___wmul@multiplicand+1,c
  1961  000F48  0E0A               	movlw	10
  1962  000F4A  6E03               	movwf	___wmul@multiplicand,c
  1963  000F4C  EC35  F00A         	call	___wmul	;wreg free
  1964  000F50  C007  FFD9         	movff	atoi@s,fsr2l
  1965  000F54  C008  FFDA         	movff	atoi@s+1,fsr2h
  1966  000F58  50DF               	movf	indf2,w,c
  1967  000F5A  6E09               	movwf	??_atoi& (0+255),c
  1968  000F5C  6A0A               	clrf	(??_atoi+1)& (0+255),c
  1969  000F5E  5001               	movf	?___wmul,w,c
  1970  000F60  2609               	addwf	??_atoi,f,c
  1971  000F62  5002               	movf	?___wmul+1,w,c
  1972  000F64  220A               	addwfc	??_atoi+1,f,c
  1973  000F66  0ED0               	movlw	208
  1974  000F68  2409               	addwf	??_atoi,w,c
  1975  000F6A  6E0C               	movwf	atoi@a,c
  1976  000F6C  0EFF               	movlw	255
  1977  000F6E  200A               	addwfc	??_atoi+1,w,c
  1978  000F70  6E0D               	movwf	atoi@a+1,c
  1979  000F72                     l1755:
  1980  000F72  4A07               	infsnz	atoi@s,f,c
  1981  000F74  2A08               	incf	atoi@s+1,f,c
  1982  000F76                     l1757:
  1983  000F76  C007  FFD9         	movff	atoi@s,fsr2l
  1984  000F7A  C008  FFDA         	movff	atoi@s+1,fsr2h
  1985  000F7E  50DF               	movf	indf2,w,c
  1986  000F80  EC58  F00A         	call	_isdigit
  1987  000F84  B0D8               	btfsc	status,0,c
  1988  000F86  D7DA               	goto	l1753
  1989  000F88  500B               	movf	atoi@sign,w,c
  1990  000F8A  B4D8               	btfsc	status,2,c
  1991  000F8C  D00D               	goto	l410
  1992  000F8E  C00C  F009         	movff	atoi@a,??_atoi
  1993  000F92  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  1994  000F96  1E09               	comf	??_atoi,f,c
  1995  000F98  1E0A               	comf	??_atoi+1,f,c
  1996  000F9A  4A09               	infsnz	??_atoi,f,c
  1997  000F9C  2A0A               	incf	??_atoi+1,f,c
  1998  000F9E  C009  F007         	movff	??_atoi,?_atoi
  1999  000FA2  C00A  F008         	movff	??_atoi+1,?_atoi+1
  2000  000FA6  0012               	return	
  2001  000FA8                     l410:
  2002  000FA8  C00C  F007         	movff	atoi@a,?_atoi
  2003  000FAC  C00D  F008         	movff	atoi@a+1,?_atoi+1
  2004  000FB0  0012               	return		;funcret
  2005  000FB2                     __end_of_atoi:
  2006                           	opt stack 0
  2007                           tblptru	equ	0xFF8
  2008                           tblptrh	equ	0xFF7
  2009                           tblptrl	equ	0xFF6
  2010                           tablat	equ	0xFF5
  2011                           prodh	equ	0xFF4
  2012                           prodl	equ	0xFF3
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           indf2	equ	0xFDF
  2016                           postinc2	equ	0xFDE
  2017                           postdec2	equ	0xFDD
  2018                           fsr2h	equ	0xFDA
  2019                           fsr2l	equ	0xFD9
  2020                           status	equ	0xFD8
  2021                           
  2022 ;; *************** function _isdigit *****************
  2023 ;; Defined at:
  2024 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  c               1    wreg     unsigned char 
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;  c               1    2[COMRAM] unsigned char 
  2029 ;; Return value:  Size  Location     Type
  2030 ;;		None               void
  2031 ;; Registers used:
  2032 ;;		wreg, status,2, status,0
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2038 ;;      Params:         0       0       0       0       0       0       0       0       0
  2039 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2040 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2041 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2042 ;;Total ram usage:        3 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_atoi
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text8
  2052  0014B0                     __ptext8:
  2053                           	opt stack 0
  2054  0014B0                     _isdigit:
  2055                           	opt stack 27
  2056                           
  2057                           ;incstack = 0
  2058                           ;isdigit@c stored from wreg
  2059  0014B0  6E03               	movwf	isdigit@c,c
  2060  0014B2  0E00               	movlw	0
  2061  0014B4  6E02               	movwf	_isdigit$832,c
  2062  0014B6  0E3A               	movlw	58
  2063  0014B8  6003               	cpfslt	isdigit@c,c
  2064  0014BA  D005               	goto	l1603
  2065  0014BC  0E2F               	movlw	47
  2066  0014BE  6403               	cpfsgt	isdigit@c,c
  2067  0014C0  D002               	goto	l1603
  2068  0014C2  0E01               	movlw	1
  2069  0014C4  6E02               	movwf	_isdigit$832,c
  2070  0014C6                     l1603:
  2071  0014C6  C002  F001         	movff	_isdigit$832,??_isdigit
  2072  0014CA  3001               	rrcf	??_isdigit,w,c
  2073  0014CC  0012               	return	
  2074  0014CE                     __end_of_isdigit:
  2075                           	opt stack 0
  2076                           tblptru	equ	0xFF8
  2077                           tblptrh	equ	0xFF7
  2078                           tblptrl	equ	0xFF6
  2079                           tablat	equ	0xFF5
  2080                           prodh	equ	0xFF4
  2081                           prodl	equ	0xFF3
  2082                           postinc0	equ	0xFEE
  2083                           wreg	equ	0xFE8
  2084                           indf2	equ	0xFDF
  2085                           postinc2	equ	0xFDE
  2086                           postdec2	equ	0xFDD
  2087                           fsr2h	equ	0xFDA
  2088                           fsr2l	equ	0xFD9
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function ___wmul *****************
  2092 ;; Defined at:
  2093 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  multiplier      2    0[COMRAM] unsigned int 
  2096 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;  product         2    4[COMRAM] unsigned int 
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  2    0[COMRAM] unsigned int 
  2101 ;; Registers used:
  2102 ;;		wreg, status,2, status,0, prodl, prodh
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2108 ;;      Params:         4       0       0       0       0       0       0       0       0
  2109 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2110 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2111 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2112 ;;Total ram usage:        6 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; This function calls:
  2115 ;;		Nothing
  2116 ;; This function is called by:
  2117 ;;		_atoi
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text9
  2122  00146A                     __ptext9:
  2123                           	opt stack 0
  2124  00146A                     ___wmul:
  2125                           	opt stack 27
  2126                           
  2127                           ;incstack = 0
  2128  00146A  5001               	movf	___wmul@multiplier,w,c
  2129  00146C  0203               	mulwf	___wmul@multiplicand,c
  2130  00146E  CFF3 F005          	movff	prodl,___wmul@product
  2131  001472  CFF4 F006          	movff	prodh,___wmul@product+1
  2132  001476  5001               	movf	___wmul@multiplier,w,c
  2133  001478  0204               	mulwf	___wmul@multiplicand+1,c
  2134  00147A  50F3               	movf	prodl,w,c
  2135  00147C  2606               	addwf	___wmul@product+1,f,c
  2136  00147E  5002               	movf	___wmul@multiplier+1,w,c
  2137  001480  0203               	mulwf	___wmul@multiplicand,c
  2138  001482  50F3               	movf	prodl,w,c
  2139  001484  2606               	addwf	___wmul@product+1,f,c
  2140  001486  C005  F001         	movff	___wmul@product,?___wmul
  2141  00148A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2142  00148E  0012               	return	
  2143  001490                     __end_of___wmul:
  2144                           	opt stack 0
  2145                           tblptru	equ	0xFF8
  2146                           tblptrh	equ	0xFF7
  2147                           tblptrl	equ	0xFF6
  2148                           tablat	equ	0xFF5
  2149                           prodh	equ	0xFF4
  2150                           prodl	equ	0xFF3
  2151                           postinc0	equ	0xFEE
  2152                           wreg	equ	0xFE8
  2153                           indf2	equ	0xFDF
  2154                           postinc2	equ	0xFDE
  2155                           postdec2	equ	0xFDD
  2156                           fsr2h	equ	0xFDA
  2157                           fsr2l	equ	0xFD9
  2158                           status	equ	0xFD8
  2159                           
  2160 ;; *************** function _LCD_puts *****************
  2161 ;; Defined at:
  2162 ;;		line 93 in file "i2c_lcd.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;  addr            1    wreg     unsigned char 
  2165 ;;  s               2    9[COMRAM] PTR unsigned char 
  2166 ;;		 -> riksFactors@text(80), STR_6(27), STR_5(16), STR_4(15), 
  2167 ;;		 -> STR_3(20), STR_2(18), STR_1(12), keyNumber@arreglo(20), 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  addr            1   13[COMRAM] unsigned char 
  2170 ;;  i               2   11[COMRAM] int 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2180 ;;      Params:         2       0       0       0       0       0       0       0       0
  2181 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2182 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2183 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2184 ;;Total ram usage:        5 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    4
  2187 ;; This function calls:
  2188 ;;		_LCD_putch
  2189 ;; This function is called by:
  2190 ;;		_keyNumber
  2191 ;;		_riksFactors
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text10
  2196  001270                     __ptext10:
  2197                           	opt stack 0
  2198  001270                     _LCD_puts:
  2199                           	opt stack 24
  2200                           
  2201                           ;incstack = 0
  2202                           ;LCD_puts@addr stored from wreg
  2203  001270  6E0E               	movwf	LCD_puts@addr,c
  2204                           
  2205                           ;i2c_lcd.c: 95: int i=0;
  2206  001272  0E00               	movlw	0
  2207  001274  6E0D               	movwf	LCD_puts@i+1,c
  2208  001276  0E00               	movlw	0
  2209  001278  6E0C               	movwf	LCD_puts@i,c
  2210                           
  2211                           ;i2c_lcd.c: 96: while(*s != 0) LCD_putch(addr, *s++);
  2212  00127A  D016               	goto	l1733
  2213  00127C                     l1729:
  2214  00127C  C00A  FFF6         	movff	LCD_puts@s,tblptrl
  2215  001280  C00B  FFF7         	movff	LCD_puts@s+1,tblptrh
  2216  001284  6AF8               	clrf	tblptru,c
  2217  001286  0E07               	movlw	(high __ramtop+-1)
  2218  001288  64F7               	cpfsgt	tblptrh,c
  2219  00128A  D003               	bra	u1197
  2220  00128C  0008               	tblrd		*
  2221  00128E  50F5               	movf	tablat,w,c
  2222  001290  D005               	bra	u1190
  2223  001292                     u1197:
  2224  001292  CFF6 FFE9          	movff	tblptrl,fsr0l
  2225  001296  CFF7 FFEA          	movff	tblptrh,fsr0h
  2226  00129A  50EF               	movf	indf0,w,c
  2227  00129C                     u1190:
  2228  00129C  6E07               	movwf	LCD_putch@data,c
  2229  00129E  500E               	movf	LCD_puts@addr,w,c
  2230  0012A0  ECC5  F009         	call	_LCD_putch
  2231  0012A4  4A0A               	infsnz	LCD_puts@s,f,c
  2232  0012A6  2A0B               	incf	LCD_puts@s+1,f,c
  2233  0012A8                     l1733:
  2234  0012A8  C00A  FFF6         	movff	LCD_puts@s,tblptrl
  2235  0012AC  C00B  FFF7         	movff	LCD_puts@s+1,tblptrh
  2236  0012B0  6AF8               	clrf	tblptru,c
  2237  0012B2  0E07               	movlw	(high __ramtop+-1)
  2238  0012B4  64F7               	cpfsgt	tblptrh,c
  2239  0012B6  D003               	bra	u1207
  2240  0012B8  0008               	tblrd		*
  2241  0012BA  50F5               	movf	tablat,w,c
  2242  0012BC  D005               	bra	u1200
  2243  0012BE                     u1207:
  2244  0012BE  CFF6 FFE9          	movff	tblptrl,fsr0l
  2245  0012C2  CFF7 FFEA          	movff	tblptrh,fsr0h
  2246  0012C6  50EF               	movf	indf0,w,c
  2247  0012C8                     u1200:
  2248  0012C8  0900               	iorlw	0
  2249  0012CA  B4D8               	btfsc	status,2,c
  2250  0012CC  0012               	return	
  2251  0012CE  D7D6               	goto	l1729
  2252  0012D0                     __end_of_LCD_puts:
  2253                           	opt stack 0
  2254                           tblptru	equ	0xFF8
  2255                           tblptrh	equ	0xFF7
  2256                           tblptrl	equ	0xFF6
  2257                           tablat	equ	0xFF5
  2258                           prodh	equ	0xFF4
  2259                           prodl	equ	0xFF3
  2260                           indf0	equ	0xFEF
  2261                           postinc0	equ	0xFEE
  2262                           fsr0h	equ	0xFEA
  2263                           fsr0l	equ	0xFE9
  2264                           wreg	equ	0xFE8
  2265                           indf2	equ	0xFDF
  2266                           postinc2	equ	0xFDE
  2267                           postdec2	equ	0xFDD
  2268                           fsr2h	equ	0xFDA
  2269                           fsr2l	equ	0xFD9
  2270                           status	equ	0xFD8
  2271                           
  2272 ;; *************** function _LCD_putch *****************
  2273 ;; Defined at:
  2274 ;;		line 50 in file "i2c_lcd.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;  addr            1    wreg     unsigned char 
  2277 ;;  data            1    6[COMRAM] unsigned char 
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;  addr            1    7[COMRAM] unsigned char 
  2280 ;;  lcddata         1    8[COMRAM] unsigned char 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg, status,2, status,0, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2290 ;;      Params:         1       0       0       0       0       0       0       0       0
  2291 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2293 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2294 ;;Total ram usage:        3 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    3
  2297 ;; This function calls:
  2298 ;;		_I2C_PCF8574_Write
  2299 ;; This function is called by:
  2300 ;;		_LCD_puts
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           	psect	text11
  2305  00138A                     __ptext11:
  2306                           	opt stack 0
  2307  00138A                     _LCD_putch:
  2308                           	opt stack 24
  2309                           
  2310                           ;incstack = 0
  2311                           ;LCD_putch@addr stored from wreg
  2312  00138A  6E08               	movwf	LCD_putch@addr,c
  2313                           
  2314                           ;i2c_lcd.c: 52: unsigned char lcddata;
  2315                           ;i2c_lcd.c: 53: lcddata = (data & 0xF0)|0x08|0x01;
  2316  00138C  5007               	movf	LCD_putch@data,w,c
  2317  00138E  0BF0               	andlw	240
  2318  001390  0909               	iorlw	9
  2319  001392  6E09               	movwf	LCD_putch@lcddata,c
  2320                           
  2321                           ;i2c_lcd.c: 54: I2C_PCF8574_Write(addr,lcddata | 0x04);
  2322  001394  5009               	movf	LCD_putch@lcddata,w,c
  2323  001396  0904               	iorlw	4
  2324  001398  6E03               	movwf	I2C_PCF8574_Write@value,c
  2325  00139A  5008               	movf	LCD_putch@addr,w,c
  2326  00139C  EC48  F00A         	call	_I2C_PCF8574_Write
  2327                           
  2328                           ;i2c_lcd.c: 55: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  2329  0013A0  5009               	movf	LCD_putch@lcddata,w,c
  2330  0013A2  0BFB               	andlw	251
  2331  0013A4  6E03               	movwf	I2C_PCF8574_Write@value,c
  2332  0013A6  5008               	movf	LCD_putch@addr,w,c
  2333  0013A8  EC48  F00A         	call	_I2C_PCF8574_Write
  2334                           
  2335                           ;i2c_lcd.c: 56: lcddata = ((data << 4) & 0xF0)|0x08|0x01;
  2336  0013AC  3807               	swapf	LCD_putch@data,w,c
  2337  0013AE  0BF0               	andlw	240
  2338  0013B0  0BF0               	andlw	240
  2339  0013B2  0909               	iorlw	9
  2340  0013B4  6E09               	movwf	LCD_putch@lcddata,c
  2341                           
  2342                           ;i2c_lcd.c: 57: I2C_PCF8574_Write(addr,lcddata | 0x04);
  2343  0013B6  5009               	movf	LCD_putch@lcddata,w,c
  2344  0013B8  0904               	iorlw	4
  2345  0013BA  6E03               	movwf	I2C_PCF8574_Write@value,c
  2346  0013BC  5008               	movf	LCD_putch@addr,w,c
  2347  0013BE  EC48  F00A         	call	_I2C_PCF8574_Write
  2348                           
  2349                           ;i2c_lcd.c: 58: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  2350  0013C2  5009               	movf	LCD_putch@lcddata,w,c
  2351  0013C4  0BFB               	andlw	251
  2352  0013C6  6E03               	movwf	I2C_PCF8574_Write@value,c
  2353  0013C8  5008               	movf	LCD_putch@addr,w,c
  2354  0013CA  EC48  F00A         	call	_I2C_PCF8574_Write
  2355  0013CE  0012               	return		;funcret
  2356  0013D0                     __end_of_LCD_putch:
  2357                           	opt stack 0
  2358                           tblptru	equ	0xFF8
  2359                           tblptrh	equ	0xFF7
  2360                           tblptrl	equ	0xFF6
  2361                           tablat	equ	0xFF5
  2362                           prodh	equ	0xFF4
  2363                           prodl	equ	0xFF3
  2364                           indf0	equ	0xFEF
  2365                           postinc0	equ	0xFEE
  2366                           fsr0h	equ	0xFEA
  2367                           fsr0l	equ	0xFE9
  2368                           wreg	equ	0xFE8
  2369                           indf2	equ	0xFDF
  2370                           postinc2	equ	0xFDE
  2371                           postdec2	equ	0xFDD
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function _LCD_goto *****************
  2377 ;; Defined at:
  2378 ;;		line 80 in file "i2c_lcd.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  addr            1    wreg     unsigned char 
  2381 ;;  row             1   11[COMRAM] unsigned char 
  2382 ;;  column          1   12[COMRAM] unsigned char 
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  addr            1   13[COMRAM] unsigned char 
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      void 
  2387 ;; Registers used:
  2388 ;;		wreg, status,2, status,0, cstack
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2394 ;;      Params:         2       0       0       0       0       0       0       0       0
  2395 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2396 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2397 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2398 ;;Total ram usage:        3 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    4
  2401 ;; This function calls:
  2402 ;;		_LCD_putcmd
  2403 ;; This function is called by:
  2404 ;;		_keyNumber
  2405 ;;		_riksFactors
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text12
  2410  001190                     __ptext12:
  2411                           	opt stack 0
  2412  001190                     _LCD_goto:
  2413                           	opt stack 24
  2414                           
  2415                           ;incstack = 0
  2416                           ;LCD_goto@addr stored from wreg
  2417  001190  6E0E               	movwf	LCD_goto@addr,c
  2418                           
  2419                           ;i2c_lcd.c: 81: switch(row){
  2420  001192  D02D               	goto	l1725
  2421  001194                     l1713:
  2422  001194  500D               	movf	LCD_goto@column,w,c
  2423  001196  0F7F               	addlw	127
  2424  001198  6E07               	movwf	LCD_putcmd@data,c
  2425  00119A  0E01               	movlw	1
  2426  00119C  6E08               	movwf	LCD_putcmd@cmdtype,c
  2427  00119E  500E               	movf	LCD_goto@addr,w,c
  2428  0011A0  EC97  F009         	call	_LCD_putcmd
  2429  0011A4  0012               	return	
  2430  0011A6                     l1715:
  2431  0011A6  500D               	movf	LCD_goto@column,w,c
  2432  0011A8  0FBF               	addlw	191
  2433  0011AA  6E07               	movwf	LCD_putcmd@data,c
  2434  0011AC  0E01               	movlw	1
  2435  0011AE  6E08               	movwf	LCD_putcmd@cmdtype,c
  2436  0011B0  500E               	movf	LCD_goto@addr,w,c
  2437  0011B2  EC97  F009         	call	_LCD_putcmd
  2438  0011B6  0012               	return	
  2439  0011B8                     l1717:
  2440  0011B8  500D               	movf	LCD_goto@column,w,c
  2441  0011BA  0F93               	addlw	147
  2442  0011BC  6E07               	movwf	LCD_putcmd@data,c
  2443  0011BE  0E01               	movlw	1
  2444  0011C0  6E08               	movwf	LCD_putcmd@cmdtype,c
  2445  0011C2  500E               	movf	LCD_goto@addr,w,c
  2446  0011C4  EC97  F009         	call	_LCD_putcmd
  2447  0011C8  0012               	return	
  2448  0011CA                     l1719:
  2449  0011CA  500D               	movf	LCD_goto@column,w,c
  2450  0011CC  0FD3               	addlw	211
  2451  0011CE  6E07               	movwf	LCD_putcmd@data,c
  2452  0011D0  0E01               	movlw	1
  2453  0011D2  6E08               	movwf	LCD_putcmd@cmdtype,c
  2454  0011D4  500E               	movf	LCD_goto@addr,w,c
  2455  0011D6  EC97  F009         	call	_LCD_putcmd
  2456  0011DA  0012               	return	
  2457  0011DC                     l1721:
  2458  0011DC  500D               	movf	LCD_goto@column,w,c
  2459  0011DE  0F7F               	addlw	127
  2460  0011E0  6E07               	movwf	LCD_putcmd@data,c
  2461  0011E2  0E01               	movlw	1
  2462  0011E4  6E08               	movwf	LCD_putcmd@cmdtype,c
  2463  0011E6  500E               	movf	LCD_goto@addr,w,c
  2464  0011E8  EC97  F009         	call	_LCD_putcmd
  2465                           
  2466                           ;i2c_lcd.c: 87: }
  2467  0011EC  0012               	return	
  2468  0011EE                     l1725:
  2469  0011EE  500C               	movf	LCD_goto@row,w,c
  2470                           
  2471                           ; Switch size 1, requested type "space"
  2472                           ; Number of cases is 4, Range of values is 1 to 4
  2473                           ; switch strategies available:
  2474                           ; Name         Instructions Cycles
  2475                           ; simple_byte           13     7 (average)
  2476                           ;	Chosen strategy is simple_byte
  2477  0011F0  0A01               	xorlw	1	; case 1
  2478  0011F2  B4D8               	btfsc	status,2,c
  2479  0011F4  D7CF               	goto	l1713
  2480  0011F6  0A03               	xorlw	3	; case 2
  2481  0011F8  B4D8               	btfsc	status,2,c
  2482  0011FA  D7D5               	goto	l1715
  2483  0011FC  0A01               	xorlw	1	; case 3
  2484  0011FE  B4D8               	btfsc	status,2,c
  2485  001200  D7DB               	goto	l1717
  2486  001202  0A07               	xorlw	7	; case 4
  2487  001204  B4D8               	btfsc	status,2,c
  2488  001206  D7E1               	goto	l1719
  2489  001208  D7E9               	goto	l1721
  2490  00120A                     __end_of_LCD_goto:
  2491                           	opt stack 0
  2492                           tblptru	equ	0xFF8
  2493                           tblptrh	equ	0xFF7
  2494                           tblptrl	equ	0xFF6
  2495                           tablat	equ	0xFF5
  2496                           prodh	equ	0xFF4
  2497                           prodl	equ	0xFF3
  2498                           indf0	equ	0xFEF
  2499                           postinc0	equ	0xFEE
  2500                           fsr0h	equ	0xFEA
  2501                           fsr0l	equ	0xFE9
  2502                           wreg	equ	0xFE8
  2503                           indf2	equ	0xFDF
  2504                           postinc2	equ	0xFDE
  2505                           postdec2	equ	0xFDD
  2506                           fsr2h	equ	0xFDA
  2507                           fsr2l	equ	0xFD9
  2508                           status	equ	0xFD8
  2509                           
  2510 ;; *************** function _KP_Readbutton *****************
  2511 ;; Defined at:
  2512 ;;		line 30 in file "KeyPad Library.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;		None
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;  key             1    8[COMRAM] unsigned char 
  2517 ;; Return value:  Size  Location     Type
  2518 ;;                  1    wreg      unsigned char 
  2519 ;; Registers used:
  2520 ;;		wreg, status,2, status,0, cstack
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2526 ;;      Params:         0       0       0       0       0       0       0       0       0
  2527 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2528 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2529 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2530 ;;Total ram usage:        1 bytes
  2531 ;; Hardware stack levels used:    1
  2532 ;; Hardware stack levels required when called:    1
  2533 ;; This function calls:
  2534 ;;		_KP_scan
  2535 ;; This function is called by:
  2536 ;;		_keyNumber
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text13
  2541  000CB0                     __ptext13:
  2542                           	opt stack 0
  2543  000CB0                     _KP_Readbutton:
  2544                           	opt stack 27
  2545                           
  2546                           ;KeyPad Library.c: 32: char key = ',';
  2547                           
  2548                           ;incstack = 0
  2549  000CB0  0E2C               	movlw	44
  2550  000CB2  6E09               	movwf	KP_Readbutton@key,c
  2551                           
  2552                           ;KeyPad Library.c: 33: while(!((key = KP_scan()) == ','))
  2553  000CB4  D08F               	goto	l1705
  2554  000CB6                     l1609:
  2555                           
  2556                           ;KeyPad Library.c: 34: {
  2557                           ;KeyPad Library.c: 35: if(keynum == 1) { return key = '7'; }
  2558  000CB6  0441               	decf	_keynum,w,c
  2559  000CB8  1042               	iorwf	_keynum+1,w,c
  2560  000CBA  A4D8               	btfss	status,2,c
  2561  000CBC  D004               	goto	l1615
  2562  000CBE  0E37               	movlw	55
  2563  000CC0  6E09               	movwf	KP_Readbutton@key,c
  2564  000CC2  5009               	movf	KP_Readbutton@key,w,c
  2565  000CC4  0012               	return	
  2566  000CC6                     l1615:
  2567                           
  2568                           ;KeyPad Library.c: 36: if(keynum == 2) { return key = '8'; }
  2569  000CC6  0E02               	movlw	2
  2570  000CC8  1841               	xorwf	_keynum,w,c
  2571  000CCA  1042               	iorwf	_keynum+1,w,c
  2572  000CCC  A4D8               	btfss	status,2,c
  2573  000CCE  D004               	goto	l1621
  2574  000CD0  0E38               	movlw	56
  2575  000CD2  6E09               	movwf	KP_Readbutton@key,c
  2576  000CD4  5009               	movf	KP_Readbutton@key,w,c
  2577  000CD6  0012               	return	
  2578  000CD8                     l1621:
  2579                           
  2580                           ;KeyPad Library.c: 37: if(keynum == 3) { return key = '9'; }
  2581  000CD8  0E03               	movlw	3
  2582  000CDA  1841               	xorwf	_keynum,w,c
  2583  000CDC  1042               	iorwf	_keynum+1,w,c
  2584  000CDE  A4D8               	btfss	status,2,c
  2585  000CE0  D004               	goto	l1627
  2586  000CE2  0E39               	movlw	57
  2587  000CE4  6E09               	movwf	KP_Readbutton@key,c
  2588  000CE6  5009               	movf	KP_Readbutton@key,w,c
  2589  000CE8  0012               	return	
  2590  000CEA                     l1627:
  2591                           
  2592                           ;KeyPad Library.c: 38: if(keynum == 4) { return key = '/'; }
  2593  000CEA  0E04               	movlw	4
  2594  000CEC  1841               	xorwf	_keynum,w,c
  2595  000CEE  1042               	iorwf	_keynum+1,w,c
  2596  000CF0  A4D8               	btfss	status,2,c
  2597  000CF2  D004               	goto	l1633
  2598  000CF4  0E2F               	movlw	47
  2599  000CF6  6E09               	movwf	KP_Readbutton@key,c
  2600  000CF8  5009               	movf	KP_Readbutton@key,w,c
  2601  000CFA  0012               	return	
  2602  000CFC                     l1633:
  2603                           
  2604                           ;KeyPad Library.c: 39: if(keynum == 5) { return key = '4'; }
  2605  000CFC  0E05               	movlw	5
  2606  000CFE  1841               	xorwf	_keynum,w,c
  2607  000D00  1042               	iorwf	_keynum+1,w,c
  2608  000D02  A4D8               	btfss	status,2,c
  2609  000D04  D004               	goto	l1639
  2610  000D06  0E34               	movlw	52
  2611  000D08  6E09               	movwf	KP_Readbutton@key,c
  2612  000D0A  5009               	movf	KP_Readbutton@key,w,c
  2613  000D0C  0012               	return	
  2614  000D0E                     l1639:
  2615                           
  2616                           ;KeyPad Library.c: 40: if(keynum == 6) { return key = '5'; }
  2617  000D0E  0E06               	movlw	6
  2618  000D10  1841               	xorwf	_keynum,w,c
  2619  000D12  1042               	iorwf	_keynum+1,w,c
  2620  000D14  A4D8               	btfss	status,2,c
  2621  000D16  D004               	goto	l1645
  2622  000D18  0E35               	movlw	53
  2623  000D1A  6E09               	movwf	KP_Readbutton@key,c
  2624  000D1C  5009               	movf	KP_Readbutton@key,w,c
  2625  000D1E  0012               	return	
  2626  000D20                     l1645:
  2627                           
  2628                           ;KeyPad Library.c: 41: if(keynum == 7) { return key = '6'; }
  2629  000D20  0E07               	movlw	7
  2630  000D22  1841               	xorwf	_keynum,w,c
  2631  000D24  1042               	iorwf	_keynum+1,w,c
  2632  000D26  A4D8               	btfss	status,2,c
  2633  000D28  D004               	goto	l1651
  2634  000D2A  0E36               	movlw	54
  2635  000D2C  6E09               	movwf	KP_Readbutton@key,c
  2636  000D2E  5009               	movf	KP_Readbutton@key,w,c
  2637  000D30  0012               	return	
  2638  000D32                     l1651:
  2639                           
  2640                           ;KeyPad Library.c: 42: if(keynum == 8) { return key = '*'; }
  2641  000D32  0E08               	movlw	8
  2642  000D34  1841               	xorwf	_keynum,w,c
  2643  000D36  1042               	iorwf	_keynum+1,w,c
  2644  000D38  A4D8               	btfss	status,2,c
  2645  000D3A  D004               	goto	l1657
  2646  000D3C  0E2A               	movlw	42
  2647  000D3E  6E09               	movwf	KP_Readbutton@key,c
  2648  000D40  5009               	movf	KP_Readbutton@key,w,c
  2649  000D42  0012               	return	
  2650  000D44                     l1657:
  2651                           
  2652                           ;KeyPad Library.c: 43: if(keynum == 9) { return key = '1'; }
  2653  000D44  0E09               	movlw	9
  2654  000D46  1841               	xorwf	_keynum,w,c
  2655  000D48  1042               	iorwf	_keynum+1,w,c
  2656  000D4A  A4D8               	btfss	status,2,c
  2657  000D4C  D004               	goto	l1663
  2658  000D4E  0E31               	movlw	49
  2659  000D50  6E09               	movwf	KP_Readbutton@key,c
  2660  000D52  5009               	movf	KP_Readbutton@key,w,c
  2661  000D54  0012               	return	
  2662  000D56                     l1663:
  2663                           
  2664                           ;KeyPad Library.c: 44: if(keynum == 10){ return key = '2';}
  2665  000D56  0E0A               	movlw	10
  2666  000D58  1841               	xorwf	_keynum,w,c
  2667  000D5A  1042               	iorwf	_keynum+1,w,c
  2668  000D5C  A4D8               	btfss	status,2,c
  2669  000D5E  D004               	goto	l1669
  2670  000D60  0E32               	movlw	50
  2671  000D62  6E09               	movwf	KP_Readbutton@key,c
  2672  000D64  5009               	movf	KP_Readbutton@key,w,c
  2673  000D66  0012               	return	
  2674  000D68                     l1669:
  2675                           
  2676                           ;KeyPad Library.c: 45: if(keynum == 11){ return key = '3';}
  2677  000D68  0E0B               	movlw	11
  2678  000D6A  1841               	xorwf	_keynum,w,c
  2679  000D6C  1042               	iorwf	_keynum+1,w,c
  2680  000D6E  A4D8               	btfss	status,2,c
  2681  000D70  D004               	goto	l1675
  2682  000D72  0E33               	movlw	51
  2683  000D74  6E09               	movwf	KP_Readbutton@key,c
  2684  000D76  5009               	movf	KP_Readbutton@key,w,c
  2685  000D78  0012               	return	
  2686  000D7A                     l1675:
  2687                           
  2688                           ;KeyPad Library.c: 46: if(keynum == 12){ return key = '-';}
  2689  000D7A  0E0C               	movlw	12
  2690  000D7C  1841               	xorwf	_keynum,w,c
  2691  000D7E  1042               	iorwf	_keynum+1,w,c
  2692  000D80  A4D8               	btfss	status,2,c
  2693  000D82  D004               	goto	l1681
  2694  000D84  0E2D               	movlw	45
  2695  000D86  6E09               	movwf	KP_Readbutton@key,c
  2696  000D88  5009               	movf	KP_Readbutton@key,w,c
  2697  000D8A  0012               	return	
  2698  000D8C                     l1681:
  2699                           
  2700                           ;KeyPad Library.c: 47: if(keynum == 13){ return key = 'd';}
  2701  000D8C  0E0D               	movlw	13
  2702  000D8E  1841               	xorwf	_keynum,w,c
  2703  000D90  1042               	iorwf	_keynum+1,w,c
  2704  000D92  A4D8               	btfss	status,2,c
  2705  000D94  D004               	goto	l1687
  2706  000D96  0E64               	movlw	100
  2707  000D98  6E09               	movwf	KP_Readbutton@key,c
  2708  000D9A  5009               	movf	KP_Readbutton@key,w,c
  2709  000D9C  0012               	return	
  2710  000D9E                     l1687:
  2711                           
  2712                           ;KeyPad Library.c: 48: if(keynum == 14){ return key = '0';}
  2713  000D9E  0E0E               	movlw	14
  2714  000DA0  1841               	xorwf	_keynum,w,c
  2715  000DA2  1042               	iorwf	_keynum+1,w,c
  2716  000DA4  A4D8               	btfss	status,2,c
  2717  000DA6  D004               	goto	l1693
  2718  000DA8  0E30               	movlw	48
  2719  000DAA  6E09               	movwf	KP_Readbutton@key,c
  2720  000DAC  5009               	movf	KP_Readbutton@key,w,c
  2721  000DAE  0012               	return	
  2722  000DB0                     l1693:
  2723                           
  2724                           ;KeyPad Library.c: 49: if(keynum == 15){ return key = '=';}
  2725  000DB0  0E0F               	movlw	15
  2726  000DB2  1841               	xorwf	_keynum,w,c
  2727  000DB4  1042               	iorwf	_keynum+1,w,c
  2728  000DB6  A4D8               	btfss	status,2,c
  2729  000DB8  D004               	goto	l1699
  2730  000DBA  0E3D               	movlw	61
  2731  000DBC  6E09               	movwf	KP_Readbutton@key,c
  2732  000DBE  5009               	movf	KP_Readbutton@key,w,c
  2733  000DC0  0012               	return	
  2734  000DC2                     l1699:
  2735                           
  2736                           ;KeyPad Library.c: 50: if(keynum == 16){ return key = '+';}
  2737  000DC2  0E10               	movlw	16
  2738  000DC4  1841               	xorwf	_keynum,w,c
  2739  000DC6  1042               	iorwf	_keynum+1,w,c
  2740  000DC8  A4D8               	btfss	status,2,c
  2741  000DCA  D004               	goto	l1705
  2742  000DCC  0E2B               	movlw	43
  2743  000DCE  6E09               	movwf	KP_Readbutton@key,c
  2744  000DD0  5009               	movf	KP_Readbutton@key,w,c
  2745  000DD2  0012               	return	
  2746  000DD4                     l1705:
  2747  000DD4  ECF4  F006         	call	_KP_scan	;wreg free
  2748  000DD8  5001               	movf	?_KP_scan,w,c
  2749  000DDA  6E09               	movwf	KP_Readbutton@key,c
  2750  000DDC  0E2C               	movlw	44
  2751  000DDE  1809               	xorwf	KP_Readbutton@key,w,c
  2752  000DE0  A4D8               	btfss	status,2,c
  2753  000DE2  D769               	goto	l1609
  2754                           
  2755                           ;KeyPad Library.c: 51: }
  2756                           ;KeyPad Library.c: 52: return key;
  2757  000DE4  5009               	movf	KP_Readbutton@key,w,c
  2758  000DE6  0012               	return	
  2759  000DE8                     __end_of_KP_Readbutton:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           prodh	equ	0xFF4
  2766                           prodl	equ	0xFF3
  2767                           indf0	equ	0xFEF
  2768                           postinc0	equ	0xFEE
  2769                           fsr0h	equ	0xFEA
  2770                           fsr0l	equ	0xFE9
  2771                           wreg	equ	0xFE8
  2772                           indf2	equ	0xFDF
  2773                           postinc2	equ	0xFDE
  2774                           postdec2	equ	0xFDD
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _KP_scan *****************
  2780 ;; Defined at:
  2781 ;;		line 12 in file "KeyPad Library.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;		None
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  row             2    6[COMRAM] short 
  2786 ;;  press           2    4[COMRAM] short 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  2    0[COMRAM] int 
  2789 ;; Registers used:
  2790 ;;		wreg, status,2, status,0
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2796 ;;      Params:         2       0       0       0       0       0       0       0       0
  2797 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2798 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2799 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2800 ;;Total ram usage:        8 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_KP_Readbutton
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text14
  2810  000DE8                     __ptext14:
  2811                           	opt stack 0
  2812  000DE8                     _KP_scan:
  2813                           	opt stack 27
  2814                           
  2815                           ;KeyPad Library.c: 14: short row,press = 0;
  2816                           
  2817                           ;incstack = 0
  2818  000DE8  0E00               	movlw	0
  2819  000DEA  6E06               	movwf	KP_scan@press+1,c
  2820  000DEC  0E00               	movlw	0
  2821  000DEE  6E05               	movwf	KP_scan@press,c
  2822                           
  2823                           ;KeyPad Library.c: 15: keynum = 0;
  2824  000DF0  0E00               	movlw	0
  2825  000DF2  6E42               	movwf	_keynum+1,c
  2826  000DF4  0E00               	movlw	0
  2827  000DF6  6E41               	movwf	_keynum,c
  2828                           
  2829                           ;KeyPad Library.c: 16: for(row = 0; row < 4; row++)
  2830  000DF8  0E00               	movlw	0
  2831  000DFA  6E08               	movwf	KP_scan@row+1,c
  2832  000DFC  0E00               	movlw	0
  2833  000DFE  6E07               	movwf	KP_scan@row,c
  2834  000E00  BE08               	btfsc	KP_scan@row+1,7,c
  2835  000E02  D006               	goto	l1511
  2836  000E04  5008               	movf	KP_scan@row+1,w,c
  2837  000E06  E165               	bnz	l1559
  2838  000E08  0E04               	movlw	4
  2839  000E0A  5C07               	subwf	KP_scan@row,w,c
  2840  000E0C  B0D8               	btfsc	status,0,c
  2841  000E0E  D061               	goto	l1559
  2842  000E10                     l1511:
  2843                           
  2844                           ;KeyPad Library.c: 17: {
  2845                           ;KeyPad Library.c: 18: LATD = (0x10<<row);
  2846  000E10  C007  F003         	movff	KP_scan@row,??_KP_scan
  2847  000E14  0E10               	movlw	16
  2848  000E16  6E04               	movwf	(??_KP_scan+1)& (0+255),c
  2849  000E18  2A03               	incf	??_KP_scan,f,c
  2850  000E1A  D002               	goto	u884
  2851  000E1C                     u885:
  2852  000E1C  90D8               	bcf	status,0,c
  2853  000E1E  3604               	rlcf	??_KP_scan+1,f,c
  2854  000E20                     u884:
  2855  000E20  2E03               	decfsz	??_KP_scan,f,c
  2856  000E22  D7FC               	goto	u885
  2857  000E24  5004               	movf	??_KP_scan+1,w,c
  2858  000E26  6E8C               	movwf	3980,c	;volatile
  2859                           
  2860                           ;KeyPad Library.c: 20: if(PORTDbits.RD0 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD0 == 1); return keynum+=1; press = 1;}
  2861  000E28  A083               	btfss	3971,0,c	;volatile
  2862  000E2A  D010               	goto	l1523
  2863  000E2C  0EE4               	movlw	228
  2864  000E2E                     u1457:
  2865  000E2E  D000               	nop2	
  2866  000E30  D000               	nop2	
  2867  000E32  2EE8               	decfsz	wreg,f,c
  2868  000E34  D7FC               	bra	u1457
  2869  000E36  D000               	nop2	
  2870  000E38  D000               	nop2	
  2871  000E3A                     l19:
  2872  000E3A  B083               	btfsc	3971,0,c	;volatile
  2873  000E3C  D7FE               	goto	l19
  2874  000E3E  4A41               	infsnz	_keynum,f,c
  2875  000E40  2A42               	incf	_keynum+1,f,c
  2876  000E42  C041  F001         	movff	_keynum,?_KP_scan
  2877  000E46  C042  F002         	movff	_keynum+1,?_KP_scan+1
  2878  000E4A  0012               	return	
  2879  000E4C                     l1523:
  2880                           
  2881                           ;KeyPad Library.c: 21: if(PORTDbits.RD1 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD1 == 1); return keynum+=2; press = 1;}
  2882  000E4C  A283               	btfss	3971,1,c	;volatile
  2883  000E4E  D012               	goto	l1533
  2884  000E50  0EE4               	movlw	228
  2885  000E52                     u1467:
  2886  000E52  D000               	nop2	
  2887  000E54  D000               	nop2	
  2888  000E56  2EE8               	decfsz	wreg,f,c
  2889  000E58  D7FC               	bra	u1467
  2890  000E5A  D000               	nop2	
  2891  000E5C  D000               	nop2	
  2892  000E5E                     l24:
  2893  000E5E  B283               	btfsc	3971,1,c	;volatile
  2894  000E60  D7FE               	goto	l24
  2895  000E62  0E02               	movlw	2
  2896  000E64  2641               	addwf	_keynum,f,c
  2897  000E66  0E00               	movlw	0
  2898  000E68  2242               	addwfc	_keynum+1,f,c
  2899  000E6A  C041  F001         	movff	_keynum,?_KP_scan
  2900  000E6E  C042  F002         	movff	_keynum+1,?_KP_scan+1
  2901  000E72  0012               	return	
  2902  000E74                     l1533:
  2903                           
  2904                           ;KeyPad Library.c: 22: if(PORTDbits.RD2 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD2 == 1); return keynum+=3; press = 1;}
  2905  000E74  A483               	btfss	3971,2,c	;volatile
  2906  000E76  D012               	goto	l1543
  2907  000E78  0EE4               	movlw	228
  2908  000E7A                     u1477:
  2909  000E7A  D000               	nop2	
  2910  000E7C  D000               	nop2	
  2911  000E7E  2EE8               	decfsz	wreg,f,c
  2912  000E80  D7FC               	bra	u1477
  2913  000E82  D000               	nop2	
  2914  000E84  D000               	nop2	
  2915  000E86                     l28:
  2916  000E86  B483               	btfsc	3971,2,c	;volatile
  2917  000E88  D7FE               	goto	l28
  2918  000E8A  0E03               	movlw	3
  2919  000E8C  2641               	addwf	_keynum,f,c
  2920  000E8E  0E00               	movlw	0
  2921  000E90  2242               	addwfc	_keynum+1,f,c
  2922  000E92  C041  F001         	movff	_keynum,?_KP_scan
  2923  000E96  C042  F002         	movff	_keynum+1,?_KP_scan+1
  2924  000E9A  0012               	return	
  2925  000E9C                     l1543:
  2926                           
  2927                           ;KeyPad Library.c: 23: if(PORTDbits.RD3 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD3 == 1); return keynum+=4; press = 1;}
  2928  000E9C  A683               	btfss	3971,3,c	;volatile
  2929  000E9E  D012               	goto	l1553
  2930  000EA0  0EE4               	movlw	228
  2931  000EA2                     u1487:
  2932  000EA2  D000               	nop2	
  2933  000EA4  D000               	nop2	
  2934  000EA6  2EE8               	decfsz	wreg,f,c
  2935  000EA8  D7FC               	bra	u1487
  2936  000EAA  D000               	nop2	
  2937  000EAC  D000               	nop2	
  2938  000EAE                     l32:
  2939  000EAE  B683               	btfsc	3971,3,c	;volatile
  2940  000EB0  D7FE               	goto	l32
  2941  000EB2  0E04               	movlw	4
  2942  000EB4  2641               	addwf	_keynum,f,c
  2943  000EB6  0E00               	movlw	0
  2944  000EB8  2242               	addwfc	_keynum+1,f,c
  2945  000EBA  C041  F001         	movff	_keynum,?_KP_scan
  2946  000EBE  C042  F002         	movff	_keynum+1,?_KP_scan+1
  2947  000EC2  0012               	return	
  2948  000EC4                     l1553:
  2949                           
  2950                           ;KeyPad Library.c: 25: keynum +=4;
  2951  000EC4  0E04               	movlw	4
  2952  000EC6  2641               	addwf	_keynum,f,c
  2953  000EC8  0E00               	movlw	0
  2954  000ECA  2242               	addwfc	_keynum+1,f,c
  2955  000ECC  4A07               	infsnz	KP_scan@row,f,c
  2956  000ECE  2A08               	incf	KP_scan@row+1,f,c
  2957  000ED0  D797               	goto	L3
  2958  000ED2                     l1559:
  2959                           
  2960                           ;KeyPad Library.c: 26: }
  2961                           ;KeyPad Library.c: 27: if(press == 0) keynum = 0;
  2962  000ED2  5005               	movf	KP_scan@press,w,c
  2963  000ED4  1006               	iorwf	KP_scan@press+1,w,c
  2964  000ED6  A4D8               	btfss	status,2,c
  2965  000ED8  0012               	return	
  2966  000EDA  0E00               	movlw	0
  2967  000EDC  6E42               	movwf	_keynum+1,c
  2968  000EDE  0E00               	movlw	0
  2969  000EE0  6E41               	movwf	_keynum,c
  2970  000EE2  0012               	return	
  2971  000EE4                     __end_of_KP_scan:
  2972                           	opt stack 0
  2973                           tblptru	equ	0xFF8
  2974                           tblptrh	equ	0xFF7
  2975                           tblptrl	equ	0xFF6
  2976                           tablat	equ	0xFF5
  2977                           prodh	equ	0xFF4
  2978                           prodl	equ	0xFF3
  2979                           indf0	equ	0xFEF
  2980                           postinc0	equ	0xFEE
  2981                           fsr0h	equ	0xFEA
  2982                           fsr0l	equ	0xFE9
  2983                           wreg	equ	0xFE8
  2984                           indf2	equ	0xFDF
  2985                           postinc2	equ	0xFDE
  2986                           postdec2	equ	0xFDD
  2987                           fsr2h	equ	0xFDA
  2988                           fsr2l	equ	0xFD9
  2989                           status	equ	0xFD8
  2990                           
  2991 ;; *************** function _longDelay *****************
  2992 ;; Defined at:
  2993 ;;		line 16 in file "main.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;  time            2    0[COMRAM] int 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;  i               2    3[COMRAM] int 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3007 ;;      Params:         2       0       0       0       0       0       0       0       0
  3008 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3009 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3010 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3011 ;;Total ram usage:        5 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; This function calls:
  3014 ;;		Nothing
  3015 ;; This function is called by:
  3016 ;;		_main
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text15
  3021  00140C                     __ptext15:
  3022                           	opt stack 0
  3023  00140C                     _longDelay:
  3024                           	opt stack 30
  3025                           
  3026                           ;main.c: 17: for (int i = 0 ; i < time; i++) _delay((unsigned long)((50)*(8000000/4000.0
      +                          )));
  3027                           
  3028                           ;incstack = 0
  3029  00140C  0E00               	movlw	0
  3030  00140E  6E05               	movwf	longDelay@i+1,c
  3031  001410  0E00               	movlw	0
  3032  001412  6E04               	movwf	longDelay@i,c
  3033  001414  D009               	goto	l122
  3034  001416                     l1917:
  3035  001416  0E82               	movlw	130
  3036  001418  6E03               	movwf	??_longDelay& (0+255),c
  3037  00141A  0EDE               	movlw	222
  3038  00141C                     u1497:
  3039  00141C  2EE8               	decfsz	wreg,f,c
  3040  00141E  D7FE               	bra	u1497
  3041  001420  2E03               	decfsz	??_longDelay& (0+255),f,c
  3042  001422  D7FC               	bra	u1497
  3043  001424  4A04               	infsnz	longDelay@i,f,c
  3044  001426  2A05               	incf	longDelay@i+1,f,c
  3045  001428                     l122:
  3046  001428  5001               	movf	longDelay@time,w,c
  3047  00142A  5C04               	subwf	longDelay@i,w,c
  3048  00142C  5005               	movf	longDelay@i+1,w,c
  3049  00142E  0A80               	xorlw	128
  3050  001430  6E03               	movwf	??_longDelay& (0+255),c
  3051  001432  5002               	movf	longDelay@time+1,w,c
  3052  001434  0A80               	xorlw	128
  3053  001436  5803               	subwfb	??_longDelay& (0+255),w,c
  3054  001438  B0D8               	btfsc	status,0,c
  3055  00143A  0012               	return	
  3056  00143C  D7EC               	goto	l1917
  3057  00143E                     __end_of_longDelay:
  3058                           	opt stack 0
  3059                           tblptru	equ	0xFF8
  3060                           tblptrh	equ	0xFF7
  3061                           tblptrl	equ	0xFF6
  3062                           tablat	equ	0xFF5
  3063                           prodh	equ	0xFF4
  3064                           prodl	equ	0xFF3
  3065                           indf0	equ	0xFEF
  3066                           postinc0	equ	0xFEE
  3067                           fsr0h	equ	0xFEA
  3068                           fsr0l	equ	0xFE9
  3069                           wreg	equ	0xFE8
  3070                           indf2	equ	0xFDF
  3071                           postinc2	equ	0xFDE
  3072                           postdec2	equ	0xFDD
  3073                           fsr2h	equ	0xFDA
  3074                           fsr2l	equ	0xFD9
  3075                           status	equ	0xFD8
  3076                           
  3077 ;; *************** function _OpenI2C *****************
  3078 ;; Defined at:
  3079 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_open.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;  sync_mode       1    wreg     unsigned char 
  3082 ;;  slew            1    0[COMRAM] unsigned char 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  sync_mode       1    1[COMRAM] unsigned char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      void 
  3087 ;; Registers used:
  3088 ;;		wreg, status,2, status,0
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3094 ;;      Params:         1       0       0       0       0       0       0       0       0
  3095 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3096 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3097 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3098 ;;Total ram usage:        2 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; This function calls:
  3101 ;;		Nothing
  3102 ;; This function is called by:
  3103 ;;		_main
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text16
  3108  0014CE                     __ptext16:
  3109                           	opt stack 0
  3110  0014CE                     _OpenI2C:
  3111                           	opt stack 30
  3112                           
  3113                           ;incstack = 0
  3114                           ;OpenI2C@sync_mode stored from wreg
  3115  0014CE  6E02               	movwf	OpenI2C@sync_mode,c
  3116  0014D0  0E3F               	movlw	63
  3117  0014D2  16C7               	andwf	4039,f,c	;volatile
  3118  0014D4  0E00               	movlw	0
  3119  0014D6  6EC6               	movwf	4038,c	;volatile
  3120  0014D8  0E00               	movlw	0
  3121  0014DA  6EC5               	movwf	4037,c	;volatile
  3122  0014DC  5002               	movf	OpenI2C@sync_mode,w,c
  3123  0014DE  12C6               	iorwf	4038,f,c	;volatile
  3124  0014E0  5001               	movf	OpenI2C@slew,w,c
  3125  0014E2  12C7               	iorwf	4039,f,c	;volatile
  3126  0014E4  8293               	bsf	3987,1,c	;volatile
  3127  0014E6  8093               	bsf	3987,0,c	;volatile
  3128  0014E8  8AC6               	bsf	4038,5,c	;volatile
  3129  0014EA  0012               	return		;funcret
  3130  0014EC                     __end_of_OpenI2C:
  3131                           	opt stack 0
  3132                           tblptru	equ	0xFF8
  3133                           tblptrh	equ	0xFF7
  3134                           tblptrl	equ	0xFF6
  3135                           tablat	equ	0xFF5
  3136                           prodh	equ	0xFF4
  3137                           prodl	equ	0xFF3
  3138                           indf0	equ	0xFEF
  3139                           postinc0	equ	0xFEE
  3140                           fsr0h	equ	0xFEA
  3141                           fsr0l	equ	0xFE9
  3142                           wreg	equ	0xFE8
  3143                           indf2	equ	0xFDF
  3144                           postinc2	equ	0xFDE
  3145                           postdec2	equ	0xFDD
  3146                           fsr2h	equ	0xFDA
  3147                           fsr2l	equ	0xFD9
  3148                           status	equ	0xFD8
  3149                           
  3150 ;; *************** function _LCD_init *****************
  3151 ;; Defined at:
  3152 ;;		line 63 in file "i2c_lcd.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;  addr            1    wreg     unsigned char 
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;  addr            1   12[COMRAM] unsigned char 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      void 
  3159 ;; Registers used:
  3160 ;;		wreg, status,2, status,0, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3166 ;;      Params:         0       0       0       0       0       0       0       0       0
  3167 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3168 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3169 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3170 ;;Total ram usage:        2 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    4
  3173 ;; This function calls:
  3174 ;;		_LCD_putcmd
  3175 ;; This function is called by:
  3176 ;;		_main
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text17
  3181  001070                     __ptext17:
  3182                           	opt stack 0
  3183  001070                     _LCD_init:
  3184                           	opt stack 26
  3185                           
  3186                           ;incstack = 0
  3187                           ;LCD_init@addr stored from wreg
  3188  001070  6E0D               	movwf	LCD_init@addr,c
  3189                           
  3190                           ;i2c_lcd.c: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
  3191  001072  0E34               	movlw	52
  3192  001074  6E0C               	movwf	??_LCD_init& (0+255),c
  3193  001076  0EF2               	movlw	242
  3194  001078                     u1507:
  3195  001078  2EE8               	decfsz	wreg,f,c
  3196  00107A  D7FE               	bra	u1507
  3197  00107C  2E0C               	decfsz	??_LCD_init& (0+255),f,c
  3198  00107E  D7FC               	bra	u1507
  3199                           
  3200                           ;i2c_lcd.c: 67: LCD_putcmd(addr, 0x30,0);_delay((unsigned long)((5)*(8000000/4000.0)));
  3201  001080  0E30               	movlw	48
  3202  001082  6E07               	movwf	LCD_putcmd@data,c
  3203  001084  0E00               	movlw	0
  3204  001086  6E08               	movwf	LCD_putcmd@cmdtype,c
  3205  001088  500D               	movf	LCD_init@addr,w,c
  3206  00108A  EC97  F009         	call	_LCD_putcmd
  3207  00108E  0E0D               	movlw	13
  3208  001090  6E0C               	movwf	??_LCD_init& (0+255),c
  3209  001092  0EFC               	movlw	252
  3210  001094                     u1517:
  3211  001094  2EE8               	decfsz	wreg,f,c
  3212  001096  D7FE               	bra	u1517
  3213  001098  2E0C               	decfsz	??_LCD_init& (0+255),f,c
  3214  00109A  D7FC               	bra	u1517
  3215                           
  3216                           ;i2c_lcd.c: 68: LCD_putcmd(addr, 0x30,0);
  3217  00109C  0E30               	movlw	48
  3218  00109E  6E07               	movwf	LCD_putcmd@data,c
  3219  0010A0  0E00               	movlw	0
  3220  0010A2  6E08               	movwf	LCD_putcmd@cmdtype,c
  3221  0010A4  500D               	movf	LCD_init@addr,w,c
  3222  0010A6  EC97  F009         	call	_LCD_putcmd
  3223                           
  3224                           ;i2c_lcd.c: 69: LCD_putcmd(addr, 0x30,0);
  3225  0010AA  0E30               	movlw	48
  3226  0010AC  6E07               	movwf	LCD_putcmd@data,c
  3227  0010AE  0E00               	movlw	0
  3228  0010B0  6E08               	movwf	LCD_putcmd@cmdtype,c
  3229  0010B2  500D               	movf	LCD_init@addr,w,c
  3230  0010B4  EC97  F009         	call	_LCD_putcmd
  3231                           
  3232                           ;i2c_lcd.c: 70: LCD_putcmd(addr, 0x20,0);
  3233  0010B8  0E20               	movlw	32
  3234  0010BA  6E07               	movwf	LCD_putcmd@data,c
  3235  0010BC  0E00               	movlw	0
  3236  0010BE  6E08               	movwf	LCD_putcmd@cmdtype,c
  3237  0010C0  500D               	movf	LCD_init@addr,w,c
  3238  0010C2  EC97  F009         	call	_LCD_putcmd
  3239                           
  3240                           ;i2c_lcd.c: 71: LCD_putcmd(addr, 0x28,1);
  3241  0010C6  0E28               	movlw	40
  3242  0010C8  6E07               	movwf	LCD_putcmd@data,c
  3243  0010CA  0E01               	movlw	1
  3244  0010CC  6E08               	movwf	LCD_putcmd@cmdtype,c
  3245  0010CE  500D               	movf	LCD_init@addr,w,c
  3246  0010D0  EC97  F009         	call	_LCD_putcmd
  3247                           
  3248                           ;i2c_lcd.c: 72: LCD_putcmd(addr, 0x08,1);
  3249  0010D4  0E08               	movlw	8
  3250  0010D6  6E07               	movwf	LCD_putcmd@data,c
  3251  0010D8  0E01               	movlw	1
  3252  0010DA  6E08               	movwf	LCD_putcmd@cmdtype,c
  3253  0010DC  500D               	movf	LCD_init@addr,w,c
  3254  0010DE  EC97  F009         	call	_LCD_putcmd
  3255                           
  3256                           ;i2c_lcd.c: 73: LCD_putcmd(addr, 0x01,1);
  3257  0010E2  0E01               	movlw	1
  3258  0010E4  6E07               	movwf	LCD_putcmd@data,c
  3259  0010E6  0E01               	movlw	1
  3260  0010E8  6E08               	movwf	LCD_putcmd@cmdtype,c
  3261  0010EA  500D               	movf	LCD_init@addr,w,c
  3262  0010EC  EC97  F009         	call	_LCD_putcmd
  3263                           
  3264                           ;i2c_lcd.c: 74: LCD_putcmd(addr, 0x06,1);
  3265  0010F0  0E06               	movlw	6
  3266  0010F2  6E07               	movwf	LCD_putcmd@data,c
  3267  0010F4  0E01               	movlw	1
  3268  0010F6  6E08               	movwf	LCD_putcmd@cmdtype,c
  3269  0010F8  500D               	movf	LCD_init@addr,w,c
  3270  0010FA  EC97  F009         	call	_LCD_putcmd
  3271                           
  3272                           ;i2c_lcd.c: 75: LCD_putcmd(addr, 0x0c,1);
  3273  0010FE  0E0C               	movlw	12
  3274  001100  6E07               	movwf	LCD_putcmd@data,c
  3275  001102  0E01               	movlw	1
  3276  001104  6E08               	movwf	LCD_putcmd@cmdtype,c
  3277  001106  500D               	movf	LCD_init@addr,w,c
  3278  001108  EC97  F009         	call	_LCD_putcmd
  3279  00110C  0012               	return		;funcret
  3280  00110E                     __end_of_LCD_init:
  3281                           	opt stack 0
  3282                           tblptru	equ	0xFF8
  3283                           tblptrh	equ	0xFF7
  3284                           tblptrl	equ	0xFF6
  3285                           tablat	equ	0xFF5
  3286                           prodh	equ	0xFF4
  3287                           prodl	equ	0xFF3
  3288                           indf0	equ	0xFEF
  3289                           postinc0	equ	0xFEE
  3290                           fsr0h	equ	0xFEA
  3291                           fsr0l	equ	0xFE9
  3292                           wreg	equ	0xFE8
  3293                           indf2	equ	0xFDF
  3294                           postinc2	equ	0xFDE
  3295                           postdec2	equ	0xFDD
  3296                           fsr2h	equ	0xFDA
  3297                           fsr2l	equ	0xFD9
  3298                           status	equ	0xFD8
  3299                           
  3300 ;; *************** function _LCD_putcmd *****************
  3301 ;; Defined at:
  3302 ;;		line 29 in file "i2c_lcd.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;  addr            1    wreg     unsigned char 
  3305 ;;  data            1    6[COMRAM] unsigned char 
  3306 ;;  cmdtype         1    7[COMRAM] unsigned char 
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;  addr            1    9[COMRAM] unsigned char 
  3309 ;;  lcddata         1   10[COMRAM] unsigned char 
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		wreg, status,2, status,0, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3319 ;;      Params:         2       0       0       0       0       0       0       0       0
  3320 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3321 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3322 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3323 ;;Total ram usage:        5 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    3
  3326 ;; This function calls:
  3327 ;;		_I2C_PCF8574_Write
  3328 ;; This function is called by:
  3329 ;;		_LCD_init
  3330 ;;		_LCD_goto
  3331 ;;		_main
  3332 ;;		_lcdClear
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text18
  3337  00132E                     __ptext18:
  3338                           	opt stack 0
  3339  00132E                     _LCD_putcmd:
  3340                           	opt stack 25
  3341                           
  3342                           ;incstack = 0
  3343                           ;LCD_putcmd@addr stored from wreg
  3344  00132E  6E0A               	movwf	LCD_putcmd@addr,c
  3345                           
  3346                           ;i2c_lcd.c: 31: unsigned char lcddata;
  3347                           ;i2c_lcd.c: 34: lcddata = (data & 0xF0)|0x08;
  3348  001330  5007               	movf	LCD_putcmd@data,w,c
  3349  001332  0BF0               	andlw	240
  3350  001334  0908               	iorlw	8
  3351  001336  6E0B               	movwf	LCD_putcmd@lcddata,c
  3352                           
  3353                           ;i2c_lcd.c: 35: I2C_PCF8574_Write(addr,lcddata | 0x04);
  3354  001338  500B               	movf	LCD_putcmd@lcddata,w,c
  3355  00133A  0904               	iorlw	4
  3356  00133C  6E03               	movwf	I2C_PCF8574_Write@value,c
  3357  00133E  500A               	movf	LCD_putcmd@addr,w,c
  3358  001340  EC48  F00A         	call	_I2C_PCF8574_Write
  3359                           
  3360                           ;i2c_lcd.c: 36: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  3361  001344  500B               	movf	LCD_putcmd@lcddata,w,c
  3362  001346  0BFB               	andlw	251
  3363  001348  6E03               	movwf	I2C_PCF8574_Write@value,c
  3364  00134A  500A               	movf	LCD_putcmd@addr,w,c
  3365  00134C  EC48  F00A         	call	_I2C_PCF8574_Write
  3366                           
  3367                           ;i2c_lcd.c: 39: if (cmdtype) {
  3368  001350  5008               	movf	LCD_putcmd@cmdtype,w,c
  3369  001352  B4D8               	btfsc	status,2,c
  3370  001354  D011               	goto	l1577
  3371                           
  3372                           ;i2c_lcd.c: 41: lcddata = ((data << 4) & 0xF0)|0x08;
  3373  001356  3807               	swapf	LCD_putcmd@data,w,c
  3374  001358  0BF0               	andlw	240
  3375  00135A  0BF0               	andlw	240
  3376  00135C  0908               	iorlw	8
  3377  00135E  6E0B               	movwf	LCD_putcmd@lcddata,c
  3378                           
  3379                           ;i2c_lcd.c: 42: I2C_PCF8574_Write(addr,lcddata | 0x04);
  3380  001360  500B               	movf	LCD_putcmd@lcddata,w,c
  3381  001362  0904               	iorlw	4
  3382  001364  6E03               	movwf	I2C_PCF8574_Write@value,c
  3383  001366  500A               	movf	LCD_putcmd@addr,w,c
  3384  001368  EC48  F00A         	call	_I2C_PCF8574_Write
  3385                           
  3386                           ;i2c_lcd.c: 43: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  3387  00136C  500B               	movf	LCD_putcmd@lcddata,w,c
  3388  00136E  0BFB               	andlw	251
  3389  001370  6E03               	movwf	I2C_PCF8574_Write@value,c
  3390  001372  500A               	movf	LCD_putcmd@addr,w,c
  3391  001374  EC48  F00A         	call	_I2C_PCF8574_Write
  3392  001378                     l1577:
  3393                           
  3394                           ;i2c_lcd.c: 44: }
  3395                           ;i2c_lcd.c: 45: _delay((unsigned long)((2)*(8000000/4000.0)));
  3396  001378  0E06               	movlw	6
  3397  00137A  6E09               	movwf	??_LCD_putcmd& (0+255),c
  3398  00137C  0E30               	movlw	48
  3399  00137E                     u1527:
  3400  00137E  2EE8               	decfsz	wreg,f,c
  3401  001380  D7FE               	bra	u1527
  3402  001382  2E09               	decfsz	??_LCD_putcmd& (0+255),f,c
  3403  001384  D7FC               	bra	u1527
  3404  001386  D000               	nop2	
  3405  001388  0012               	return		;funcret
  3406  00138A                     __end_of_LCD_putcmd:
  3407                           	opt stack 0
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           indf0	equ	0xFEF
  3415                           postinc0	equ	0xFEE
  3416                           fsr0h	equ	0xFEA
  3417                           fsr0l	equ	0xFE9
  3418                           wreg	equ	0xFE8
  3419                           indf2	equ	0xFDF
  3420                           postinc2	equ	0xFDE
  3421                           postdec2	equ	0xFDD
  3422                           fsr2h	equ	0xFDA
  3423                           fsr2l	equ	0xFD9
  3424                           status	equ	0xFD8
  3425                           
  3426 ;; *************** function _I2C_PCF8574_Write *****************
  3427 ;; Defined at:
  3428 ;;		line 12 in file "i2c_lcd.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;  addr            1    wreg     unsigned char 
  3431 ;;  value           1    2[COMRAM] unsigned char 
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;  addr            1    5[COMRAM] unsigned char 
  3434 ;;  S               1    4[COMRAM] unsigned char 
  3435 ;;  dummy           1    3[COMRAM] unsigned char 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      unsigned char 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2, status,0, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3445 ;;      Params:         1       0       0       0       0       0       0       0       0
  3446 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3447 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3448 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3449 ;;Total ram usage:        4 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    2
  3452 ;; This function calls:
  3453 ;;		_WriteI2C
  3454 ;; This function is called by:
  3455 ;;		_LCD_putcmd
  3456 ;;		_LCD_putch
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text19
  3461  001490                     __ptext19:
  3462                           	opt stack 0
  3463  001490                     _I2C_PCF8574_Write:
  3464                           	opt stack 25
  3465                           
  3466                           ;incstack = 0
  3467                           ;I2C_PCF8574_Write@addr stored from wreg
  3468  001490  6E06               	movwf	I2C_PCF8574_Write@addr,c
  3469                           
  3470                           ;i2c_lcd.c: 14: unsigned char S,dummy;
  3471                           ;i2c_lcd.c: 15: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3472  001492  80C5               	bsf	4037,0,c	;volatile
  3473  001494                     l70:
  3474  001494  B0C5               	btfsc	4037,0,c	;volatile
  3475  001496  D7FE               	goto	l70
  3476                           
  3477                           ;i2c_lcd.c: 16: S = WriteI2C( addr );
  3478  001498  5006               	movf	I2C_PCF8574_Write@addr,w,c
  3479  00149A  EC68  F009         	call	_WriteI2C
  3480  00149E  6E05               	movwf	I2C_PCF8574_Write@S,c
  3481                           
  3482                           ;i2c_lcd.c: 21: }
  3483                           ;i2c_lcd.c: 22: S = WriteI2C(value);
  3484                           
  3485                           ;i2c_lcd.c: 20: SSPCON1bits.WCOL=0;
  3486                           
  3487                           ;i2c_lcd.c: 18: {
  3488                           ;i2c_lcd.c: 19: dummy = SSPBUF;
  3489                           
  3490                           ;i2c_lcd.c: 17: if(S == -1)
  3491  0014A0  5003               	movf	I2C_PCF8574_Write@value,w,c
  3492  0014A2  EC68  F009         	call	_WriteI2C
  3493  0014A6  6E05               	movwf	I2C_PCF8574_Write@S,c
  3494                           
  3495                           ;i2c_lcd.c: 23: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3496  0014A8  84C5               	bsf	4037,2,c	;volatile
  3497  0014AA                     l74:
  3498  0014AA  A4C5               	btfss	4037,2,c	;volatile
  3499  0014AC  0012               	return	
  3500  0014AE  D7FD               	goto	l74
  3501  0014B0                     __end_of_I2C_PCF8574_Write:
  3502                           	opt stack 0
  3503                           tblptru	equ	0xFF8
  3504                           tblptrh	equ	0xFF7
  3505                           tblptrl	equ	0xFF6
  3506                           tablat	equ	0xFF5
  3507                           prodh	equ	0xFF4
  3508                           prodl	equ	0xFF3
  3509                           indf0	equ	0xFEF
  3510                           postinc0	equ	0xFEE
  3511                           fsr0h	equ	0xFEA
  3512                           fsr0l	equ	0xFE9
  3513                           wreg	equ	0xFE8
  3514                           indf2	equ	0xFDF
  3515                           postinc2	equ	0xFDE
  3516                           postdec2	equ	0xFDD
  3517                           fsr2h	equ	0xFDA
  3518                           fsr2l	equ	0xFD9
  3519                           status	equ	0xFD8
  3520                           
  3521 ;; *************** function _WriteI2C *****************
  3522 ;; Defined at:
  3523 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_writ.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;  data_out        1    wreg     unsigned char 
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;  data_out        1    1[COMRAM] unsigned char 
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      char 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2, status,0, cstack
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3537 ;;      Params:         0       0       0       0       0       0       0       0       0
  3538 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3540 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3541 ;;Total ram usage:        1 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    1
  3544 ;; This function calls:
  3545 ;;		_IdleI2C
  3546 ;; This function is called by:
  3547 ;;		_I2C_PCF8574_Write
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text20
  3552  0012D0                     __ptext20:
  3553                           	opt stack 0
  3554  0012D0                     _WriteI2C:
  3555                           	opt stack 25
  3556                           
  3557                           ;incstack = 0
  3558                           ;WriteI2C@data_out stored from wreg
  3559  0012D0  6E02               	movwf	WriteI2C@data_out,c
  3560  0012D2  C002  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  3561  0012D6  AEC6               	btfss	4038,7,c	;volatile
  3562  0012D8  D002               	goto	l1459
  3563  0012DA  0EFF               	movlw	255
  3564  0012DC  0012               	return	
  3565  0012DE                     l1459:
  3566  0012DE  50C6               	movf	4038,w,c	;volatile
  3567  0012E0  0B0F               	andlw	15
  3568  0012E2  0A08               	xorlw	8
  3569  0012E4  B4D8               	btfsc	status,2,c
  3570  0012E6  D00F               	goto	l1477
  3571  0012E8  50C6               	movf	4038,w,c	;volatile
  3572  0012EA  0B0F               	andlw	15
  3573  0012EC  0A0B               	xorlw	11
  3574  0012EE  B4D8               	btfsc	status,2,c
  3575  0012F0  D00A               	goto	l1477
  3576  0012F2  88C6               	bsf	4038,4,c	;volatile
  3577  0012F4                     l224:
  3578  0012F4  A69E               	btfss	3998,3,c	;volatile
  3579  0012F6  D7FE               	goto	l224
  3580  0012F8  A4C7               	btfss	4039,2,c	;volatile
  3581  0012FA  B0C7               	btfsc	4039,0,c	;volatile
  3582  0012FC  D002               	goto	l1473
  3583  0012FE  0EFE               	movlw	254
  3584  001300  0012               	return	
  3585  001302                     l1473:
  3586  001302  0E00               	movlw	0
  3587  001304  0012               	return	
  3588  001306                     l1477:
  3589  001306  50C6               	movf	4038,w,c	;volatile
  3590  001308  0B0F               	andlw	15
  3591  00130A  0A08               	xorlw	8
  3592  00130C  B4D8               	btfsc	status,2,c
  3593  00130E  D005               	goto	l233
  3594  001310  50C6               	movf	4038,w,c	;volatile
  3595  001312  0B0F               	andlw	15
  3596  001314  0A0B               	xorlw	11
  3597  001316  A4D8               	btfss	status,2,c
  3598  001318  0012               	return	
  3599  00131A                     l233:
  3600  00131A  B0C7               	btfsc	4039,0,c	;volatile
  3601  00131C  D7FE               	goto	l233
  3602  00131E  EC76  F00A         	call	_IdleI2C	;wreg free
  3603  001322  ACC5               	btfss	4037,6,c	;volatile
  3604  001324  D002               	goto	l1491
  3605  001326  0EFE               	movlw	254
  3606  001328  0012               	return	
  3607  00132A                     l1491:
  3608  00132A  0E00               	movlw	0
  3609  00132C  0012               	return	
  3610  00132E                     __end_of_WriteI2C:
  3611                           	opt stack 0
  3612                           tblptru	equ	0xFF8
  3613                           tblptrh	equ	0xFF7
  3614                           tblptrl	equ	0xFF6
  3615                           tablat	equ	0xFF5
  3616                           prodh	equ	0xFF4
  3617                           prodl	equ	0xFF3
  3618                           indf0	equ	0xFEF
  3619                           postinc0	equ	0xFEE
  3620                           fsr0h	equ	0xFEA
  3621                           fsr0l	equ	0xFE9
  3622                           wreg	equ	0xFE8
  3623                           indf2	equ	0xFDF
  3624                           postinc2	equ	0xFDE
  3625                           postdec2	equ	0xFDD
  3626                           fsr2h	equ	0xFDA
  3627                           fsr2l	equ	0xFD9
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _IdleI2C *****************
  3631 ;; Defined at:
  3632 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_idle.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3646 ;;      Params:         0       0       0       0       0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3648 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3649 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3650 ;;Total ram usage:        1 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; This function calls:
  3653 ;;		Nothing
  3654 ;; This function is called by:
  3655 ;;		_WriteI2C
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text21
  3660  0014EC                     __ptext21:
  3661                           	opt stack 0
  3662  0014EC                     _IdleI2C:
  3663                           	opt stack 25
  3664  0014EC                     l1445:
  3665  0014EC  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
  3666  0014F0  0E1F               	movlw	31
  3667  0014F2  1601               	andwf	??_IdleI2C,f,c
  3668  0014F4  A4D8               	btfss	status,2,c
  3669  0014F6  D7FA               	goto	l1445
  3670  0014F8  A4C7               	btfss	4039,2,c	;volatile
  3671  0014FA  0012               	return	
  3672  0014FC  D7F7               	goto	l1445
  3673  0014FE                     __end_of_IdleI2C:
  3674                           	opt stack 0
  3675                           tblptru	equ	0xFF8
  3676                           tblptrh	equ	0xFF7
  3677                           tblptrl	equ	0xFF6
  3678                           tablat	equ	0xFF5
  3679                           prodh	equ	0xFF4
  3680                           prodl	equ	0xFF3
  3681                           indf0	equ	0xFEF
  3682                           postinc0	equ	0xFEE
  3683                           fsr0h	equ	0xFEA
  3684                           fsr0l	equ	0xFE9
  3685                           wreg	equ	0xFE8
  3686                           indf2	equ	0xFDF
  3687                           postinc2	equ	0xFDE
  3688                           postdec2	equ	0xFDD
  3689                           fsr2h	equ	0xFDA
  3690                           fsr2l	equ	0xFD9
  3691                           status	equ	0xFD8
  3692                           
  3693 ;; *************** function _KP_init *****************
  3694 ;; Defined at:
  3695 ;;		line 6 in file "KeyPad Library.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;		None
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;		None
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  1    wreg      void 
  3702 ;; Registers used:
  3703 ;;		wreg, status,2
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3709 ;;      Params:         0       0       0       0       0       0       0       0       0
  3710 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3711 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3712 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3713 ;;Total ram usage:        0 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_main
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text22
  3723  00150E                     __ptext22:
  3724                           	opt stack 0
  3725  00150E                     _KP_init:
  3726                           	opt stack 30
  3727                           
  3728                           ;KeyPad Library.c: 8: TRISD = 0x0F;
  3729                           
  3730                           ;incstack = 0
  3731  00150E  0E0F               	movlw	15
  3732  001510  6E95               	movwf	3989,c	;volatile
  3733                           
  3734                           ;KeyPad Library.c: 9: LATD = 0x00;
  3735  001512  0E00               	movlw	0
  3736  001514  6E8C               	movwf	3980,c	;volatile
  3737  001516  0012               	return		;funcret
  3738  001518                     __end_of_KP_init:
  3739                           	opt stack 0
  3740                           tblptru	equ	0xFF8
  3741                           tblptrh	equ	0xFF7
  3742                           tblptrl	equ	0xFF6
  3743                           tablat	equ	0xFF5
  3744                           prodh	equ	0xFF4
  3745                           prodl	equ	0xFF3
  3746                           indf0	equ	0xFEF
  3747                           postinc0	equ	0xFEE
  3748                           fsr0h	equ	0xFEA
  3749                           fsr0l	equ	0xFE9
  3750                           wreg	equ	0xFE8
  3751                           indf2	equ	0xFDF
  3752                           postinc2	equ	0xFDE
  3753                           postdec2	equ	0xFDD
  3754                           fsr2h	equ	0xFDA
  3755                           fsr2l	equ	0xFD9
  3756                           status	equ	0xFD8
  3757                           tblptru	equ	0xFF8
  3758                           tblptrh	equ	0xFF7
  3759                           tblptrl	equ	0xFF6
  3760                           tablat	equ	0xFF5
  3761                           prodh	equ	0xFF4
  3762                           prodl	equ	0xFF3
  3763                           indf0	equ	0xFEF
  3764                           postinc0	equ	0xFEE
  3765                           fsr0h	equ	0xFEA
  3766                           fsr0l	equ	0xFE9
  3767                           wreg	equ	0xFE8
  3768                           indf2	equ	0xFDF
  3769                           postinc2	equ	0xFDE
  3770                           postdec2	equ	0xFDD
  3771                           fsr2h	equ	0xFDA
  3772                           fsr2l	equ	0xFD9
  3773                           status	equ	0xFD8
  3774                           
  3775                           	psect	rparam
  3776  0000                     tblptru	equ	0xFF8
  3777                           tblptrh	equ	0xFF7
  3778                           tblptrl	equ	0xFF6
  3779                           tablat	equ	0xFF5
  3780                           prodh	equ	0xFF4
  3781                           prodl	equ	0xFF3
  3782                           indf0	equ	0xFEF
  3783                           postinc0	equ	0xFEE
  3784                           fsr0h	equ	0xFEA
  3785                           fsr0l	equ	0xFE9
  3786                           wreg	equ	0xFE8
  3787                           indf2	equ	0xFDF
  3788                           postinc2	equ	0xFDE
  3789                           postdec2	equ	0xFDD
  3790                           fsr2h	equ	0xFDA
  3791                           fsr2l	equ	0xFD9
  3792                           status	equ	0xFD8


Data Sizes:
    Strings     132
    Constant    40
    Data        1
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     64      67
    BANK0           160    112     112
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> keyNumber@arreglo(COMRAM[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_7(CODE[24]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> riksFactors@text(BANK0[80]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    LCD_puts@s	PTR unsigned char  size(2) Largest target is 80
		 -> riksFactors@text(BANK0[80]), STR_6(CODE[27]), STR_5(CODE[16]), STR_4(CODE[15]), 
		 -> STR_3(CODE[20]), STR_2(CODE[18]), STR_1(CODE[12]), keyNumber@arreglo(COMRAM[20]), 


Critical Paths under _main in COMRAM

    _riksFactors->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    _lcdClear->_LCD_putcmd
    _keyNumber->_LCD_goto
    _keyNumber->_LCD_puts
    _atoi->___wmul
    _LCD_puts->_LCD_putch
    _LCD_putch->_I2C_PCF8574_Write
    _LCD_goto->_LCD_putcmd
    _KP_Readbutton->_KP_scan
    _LCD_init->_LCD_putcmd
    _LCD_putcmd->_I2C_PCF8574_Write
    _I2C_PCF8574_Write->_WriteI2C
    _WriteI2C->_IdleI2C

Critical Paths under _main in BANK0

    _main->_riksFactors

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   23035
                                             62 COMRAM     2     2      0
                            _KP_init
                           _LCD_init
                         _LCD_putcmd
                            _OpenI2C
                          _longDelay
                        _riksFactors
 ---------------------------------------------------------------------------------
 (1) _riksFactors                                        112   112      0   16860
                                              0 BANK0    112   112      0
                           _LCD_goto
                           _LCD_puts
                          _keyNumber
                           _lcdClear
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             49    21     28    1139
                                             22 COMRAM    40    12     28
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     287
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0    2879
                         _LCD_putcmd
 ---------------------------------------------------------------------------------
 (2) _keyNumber                                           33    29      4    6854
                                             14 COMRAM    33    29      4
                      _KP_Readbutton
                           _LCD_goto
                           _LCD_puts
                               _atoi
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2     647
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _LCD_puts                                             5     3      2    1517
                                              9 COMRAM     5     3      2
                          _LCD_putch
 ---------------------------------------------------------------------------------
 (4) _LCD_putch                                            3     2      1     873
                                              6 COMRAM     3     2      1
                  _I2C_PCF8574_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_goto                                             3     1      2    4273
                                             11 COMRAM     3     1      2
                         _LCD_putcmd
 ---------------------------------------------------------------------------------
 (3) _KP_Readbutton                                        1     1      0     135
                                              8 COMRAM     1     1      0
                            _KP_scan
 ---------------------------------------------------------------------------------
 (4) _KP_scan                                              8     6      2      95
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _longDelay                                            5     3      2     110
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _OpenI2C                                              2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0    3077
                                             11 COMRAM     2     2      0
                         _LCD_putcmd
 ---------------------------------------------------------------------------------
 (3) _LCD_putcmd                                           5     3      2    2879
                                              6 COMRAM     5     3      2
                  _I2C_PCF8574_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_PCF8574_Write                                    4     3      1     587
                                              2 COMRAM     4     3      1
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (5) _WriteI2C                                             1     1      0      22
                                              1 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (6) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _KP_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KP_init
   _LCD_init
     _LCD_putcmd
       _I2C_PCF8574_Write
         _WriteI2C
           _IdleI2C
   _LCD_putcmd
     _I2C_PCF8574_Write
       _WriteI2C
         _IdleI2C
   _OpenI2C
   _longDelay
   _riksFactors
     _LCD_goto
       _LCD_putcmd
         _I2C_PCF8574_Write
           _WriteI2C
             _IdleI2C
     _LCD_puts
       _LCD_putch
         _I2C_PCF8574_Write
           _WriteI2C
             _IdleI2C
     _keyNumber
       _KP_Readbutton
         _KP_scan
       _LCD_goto
         _LCD_putcmd
           _I2C_PCF8574_Write
             _WriteI2C
               _IdleI2C
       _LCD_puts
         _LCD_putch
           _I2C_PCF8574_Write
             _WriteI2C
               _IdleI2C
       _atoi
         ___wmul
         _isdigit
     _lcdClear
       _LCD_putcmd
         _I2C_PCF8574_Write
           _WriteI2C
             _IdleI2C
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      50       7       31.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      70       5       70.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     40      43       1       70.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     103      20        0.0%
DATA                 0      0     103       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun May 19 20:51:53 2019

               _SSPSTATbits 000FC7                          l32 0EAE                          l24 0E5E  
                        l19 0E3A                          l28 0E86                          l70 1494  
                        l74 14AA         ___wmul@multiplicand 0003                         l122 1428  
                       l224 12F4                         l233 131A                         l410 0FA8  
                       l182 0B68                         l607 117E                         l617 125E  
                       u884 0E20                         u885 0E1C                         wreg 000FE8  
               ?_LCD_putcmd 0007            KP_Readbutton@key 0009                        l1511 0E10  
                      l1523 0E4C                        l1603 14C6                        l1445 14EC  
                      l1533 0E74                        l1621 0CD8                        l1543 0E9C  
                      l1615 0CC6                        l1473 1302                        l1553 0EC4  
                      l1633 0CFC                        l1609 0CB6                        l1705 0DD4  
                      l1721 11DC                        l1713 1194                        l1491 132A  
                      l1459 12DE                        l1651 0D32                        l1627 0CEA  
                      l1715 11A6                        l1803 0FC2                        l1477 1306  
                      l1645 0D20                        l1717 11B8                        l1725 11EE  
                      l1733 12A8                        l1813 0FE4                        l1559 0ED2  
                      l1663 0D56                        l1639 0D0E                        l1719 11CA  
                      l1577 1378                        l1681 0D8C                        l1657 0D44  
                      l1729 127C                        l1753 0F3C                        l1737 0EE6  
                      l1825 1024                        l1675 0D7A                        l1755 0F72  
                      l1739 0EEA                        l1771 113C                        l1917 1416  
                      l1693 0DB0                        l1669 0D68                        l1757 0F76  
                      l1749 0F2A                        l1781 1170                        l1773 1140  
                      l1853 0B40                        l1845 0B30                        l1687 0D9E  
                      l1791 1228                        l1847 0B36                        l1839 0B16  
                      l1769 1130                        l1793 122C                        l1865 0BB0  
                      l1849 0B3A                        l1699 0DC2                        l1859 0B88  
                      l1797 1250                        l1789 121C                        l1885 0C7A  
                      l1877 0BE8                        l1879 0BF4                        l1887 0C8A  
                      l1889 0CA2                        l1999 13FA                        STR_1 08A1  
                      STR_2 0870                        STR_3 085C                        STR_4 0892  
                      STR_5 0882                        STR_6 0829                        STR_7 0844  
                      u1200 12C8                        u1207 12BE                        u1190 129C  
                      _LATD 000F8C                        u1507 1078                        u1517 1094  
                      u1197 1292                        u1527 137E                        u1457 0E2E  
                      u1467 0E52                        u1477 0E7A                        u1487 0EA2  
                      u1497 141C                 main@counter 003F            LCD_putch@lcddata 0009  
                      _atoi 0EE4                        _main 13D0               longDelay@time 0001  
__size_of_I2C_PCF8574_Write 0020                        _text 0100                        fsr0h 000FEA  
                      indf0 000FEF                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr2l 000FD9             __end_of_KP_init 1518  
           __end_of_KP_scan 0EE4                        prodh 000FF4                        prodl 000FF3  
                      start 0000             __end_of_IdleI2C 14FE              LCD_goto@column 000D  
        __size_of_LCD_putch 0046                ___param_bank 000000           riksFactors@gender 00C4  
           __end_of_OpenI2C 14EC            __end_of_LCD_init 110E            __end_of_LCD_goto 120A  
          __end_of_LCD_puts 12D0                       ?_atoi 0007                       ?_main 0001  
           __end_of___lldiv 1190             __end_of___llmod 1270          I2C_PCF8574_Write@S 0005  
                     _TRISD 000F95             __end_of_dpowers 0829             __end_of_isdigit 14CE  
                     atoi@a 000C                       atoi@s 0007                       tablat 000FF5  
                     status 000FD8             __end_of_sprintf 0CB0             __initialization 143E  
               LCD_goto@row 000C         __size_of_LCD_putcmd 005C                __end_of_atoi 0FB2  
              __end_of_main 140C                      ??_atoi 0009                      ??_main 003F  
        riksFactors@parents 00CC               __activetblptr 000002           __end_of_LCD_putch 13D0  
          ___llmod@dividend 000E            __end_of_WriteI2C 132E                   ??_KP_init 0001  
                 ??_KP_scan 0003                ?_riksFactors 0001                 OpenI2C@slew 0001  
                 ??_IdleI2C 0001                      _SSPBUF 000FC9            __end_of_lcdClear 150E  
                 ??_OpenI2C 0002                KP_scan@press 0005                      ___wmul 146A  
                 ??___lldiv 0009                   ??___llmod 0016           LCD_putcmd@cmdtype 0008  
                    _keynum 0041           LCD_putcmd@lcddata 000B                      clear_0 1456  
              __pdataCOMRAM 0043                   ??_isdigit 0001                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
            keyNumber@tecla 002D                   ??_sprintf 0033                  __accesstop 0060  
   __end_of__initialization 1460                   ?_LCD_init 0001                   ?_LCD_goto 000C  
                 ?_LCD_puts 000A               ___rparam_used 000001                LCD_init@addr 000D  
              LCD_goto@addr 000E             riksFactors@edad 00B8              __pcstackCOMRAM 0001  
           riksFactors@peso 00C0             riksFactors@text 0060              LCD_putcmd@addr 000A  
            LCD_putcmd@data 0007                   LCD_puts@i 000C                   LCD_puts@s 000A  
              ??_LCD_putcmd 0009         riksFactors@estatura 00BC                  __pbssBANK1 0100  
        __size_of_keyNumber 00BE                LCD_puts@addr 000E                  ??_LCD_init 000C  
                ??_LCD_goto 000E                  ??_LCD_puts 000C          __size_of_longDelay 0032  
     __end_of_KP_Readbutton 0DE8          __end_of_LCD_putcmd 138A                     ?___wmul 0001  
       riksFactors@systolic 00B0                   ?_WriteI2C 0001                   ?_lcdClear 0001  
                   _SSPCON1 000FC6                     _SSPCON2 000FC5                     _SSPSTAT 000FC7  
                   _KP_init 150E                     _KP_scan 0DE8                     _IdleI2C 14EC  
      __size_of_riksFactors 025E                     _OpenI2C 14CE                     __Hparam 0000  
                   __Lparam 0000                     ___lldiv 110E             __size_of___wmul 0026  
                   ___llmod 120A                __psmallconst 0800                     __pcinit 143E  
                ??_WriteI2C 0002                     __ramtop 0800                     __ptext0 13D0  
                   __ptext1 08AE                     __ptext2 0B0C                     __ptext3 120A  
                   __ptext4 110E                     __ptext5 14FE                     __ptext6 0FB2  
                   __ptext7 0EE4                     __ptext8 14B0           __end_of_keyNumber 1070  
                   __ptext9 146A                     _dpowers 0801                     _isdigit 14B0  
            _LCD_01_ADDRESS 0043           __end_of_longDelay 143E                  ??_lcdClear 000C  
                   _sprintf 0B0C        end_of_initialization 1460                   _LCD_putch 138A  
             __Lmediumconst 0000             ___lldiv@divisor 0005             ___lldiv@counter 000D  
           keyNumber@number 0027                     postdec2 000FDD      I2C_PCF8574_Write@dummy 0004  
                   postinc0 000FEE                     postinc2 000FDE      I2C_PCF8574_Write@value 0003  
                 _PORTDbits 000F83                   _TRISBbits 000F93                  ?_LCD_putch 0007  
         __size_of_LCD_init 009E           __size_of_LCD_goto 007A           __size_of_LCD_puts 0060  
          riksFactors@smoke 00C8              __end_of___wmul 1490               __pidataCOMRAM 1518  
       start_initialization 143E        riksFactors@diastolic 00B4            WriteI2C@data_out 0002  
                keyNumber@i 002E             ___llmod@divisor 0012             ___llmod@counter 0016  
                  ??___wmul 0005           __size_of_WriteI2C 005E                 __pbssCOMRAM 0041  
             LCD_putch@addr 0008               LCD_putch@data 0007                  longDelay@i 0004  
             __pcstackBANK0 0060                    ?_KP_init 0001                    ?_KP_scan 0001  
         __size_of_lcdClear 0010                 ??_LCD_putch 0008                    ?_IdleI2C 0001  
               sprintf@flag 0035                 sprintf@prec 0036                    ?_OpenI2C 0001  
                  ?___lldiv 0001                    ?___llmod 000E                 __smallconst 0800  
                  ?_isdigit 0001                   _keyNumber 0FB2      __size_of_KP_Readbutton 0138  
                  ?_sprintf 0017               ??_riksFactors 003F                   _longDelay 140C  
            ___wmul@product 0005                    _LCD_init 1070                    _LCD_goto 1190  
                  _LCD_puts 1270                    _PIR1bits 000F9E       I2C_PCF8574_Write@addr 0006  
         ___wmul@multiplier 0001                  ?_keyNumber 000F                  ?_longDelay 0001  
          __size_of_KP_init 000A            __size_of_KP_scan 00FC            OpenI2C@sync_mode 0002  
          __size_of_IdleI2C 0012         __end_of_riksFactors 0B0C                    __Hrparam 0000  
          __size_of_OpenI2C 001E                    __Lrparam 0000                  KP_scan@row 0007  
             _KP_Readbutton 0CB0            __size_of___lldiv 0082            __size_of___llmod 0066  
                  _WriteI2C 12D0                 _isdigit$832 0002                  sprintf@val 0038  
          __size_of_isdigit 001E                    _lcdClear 14FE                    __ptext10 1270  
                  __ptext11 138A                    __ptext20 12D0                    __ptext12 1190  
                  __ptext21 14EC                    __ptext13 0CB0                    __ptext22 150E  
                  __ptext14 0DE8                    __ptext15 140C                    __ptext16 14CE  
                  __ptext17 1070                    __ptext18 132E                    __ptext19 1490  
          __size_of_sprintf 01A4               __size_of_atoi 00CE               __size_of_main 003C  
         keyNumber@contador 002B           _I2C_PCF8574_Write 1490              ?_KP_Readbutton 0001  
        ?_I2C_PCF8574_Write 0003                    atoi@sign 000B         ??_I2C_PCF8574_Write 0004  
               ??_keyNumber 0013                  _LCD_putcmd 132E                    isdigit@c 0003  
               ??_longDelay 0003                 _riksFactors 08AE                   sprintf@ap 003C  
                 sprintf@sp 0017            ___lldiv@dividend 0001   __end_of_I2C_PCF8574_Write 14B0  
          keyNumber@arreglo 0013                    sprintf@c 003E                    sprintf@f 0019  
          ___lldiv@quotient 0009                 _SSPCON1bits 000FC6                 _SSPCON2bits 000FC5  
           ??_KP_Readbutton 0009  
