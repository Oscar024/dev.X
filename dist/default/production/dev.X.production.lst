

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun May 19 17:29:35 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36  0000                     
    37                           ; Version 1.41
    38                           ; Generated 25/01/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4550 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  0013E0                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for _LCD_01_ADDRESS
    77  0013E0  40                 	db	64
    78                           
    79                           	psect	smallconst
    80  000800                     __psmallconst:
    81                           	opt stack 0
    82  000800  00                 	db	0
    83  000801                     _dpowers:
    84                           	opt stack 0
    85  000801  0001               	dw	1
    86  000803  0000               	dw	0
    87  000805  000A               	dw	10
    88  000807  0000               	dw	0
    89  000809  0064               	dw	100
    90  00080B  0000               	dw	0
    91  00080D  03E8               	dw	1000
    92  00080F  0000               	dw	0
    93  000811  2710               	dw	10000
    94  000813  0000               	dw	0
    95  000815  86A0               	dw	34464
    96  000817  0001               	dw	1
    97  000819  4240               	dw	16960
    98  00081B  000F               	dw	15
    99  00081D  9680               	dw	38528
   100  00081F  0098               	dw	152
   101  000821  E100               	dw	57600
   102  000823  05F5               	dw	1525
   103  000825  CA00               	dw	51712
   104  000827  3B9A               	dw	15258
   105  000829                     __end_of_dpowers:
   106                           	opt stack 0
   107  0000                     _SSPSTATbits	set	4039
   108  0000                     _PIR1bits	set	3998
   109  0000                     _TRISBbits	set	3987
   110  0000                     _SSPCON2	set	4037
   111  0000                     _SSPCON1	set	4038
   112  0000                     _SSPSTAT	set	4039
   113  0000                     _SSPCON1bits	set	4038
   114  0000                     _SSPBUF	set	4041
   115  0000                     _SSPCON2bits	set	4037
   116  0000                     _PORTDbits	set	3971
   117  0000                     _LATD	set	3980
   118  0000                     _TRISD	set	3989
   119  000829                     STR_1:
   120  000829  20                 	db	32
   121  00082A  20                 	db	32
   122  00082B  20                 	db	32
   123  00082C  20                 	db	32
   124  00082D  20                 	db	32
   125  00082E  20                 	db	32
   126  00082F  20                 	db	32
   127  000830  20                 	db	32
   128  000831  20                 	db	32
   129  000832  20                 	db	32
   130  000833  20                 	db	32
   131  000834  20                 	db	32
   132  000835  20                 	db	32
   133  000836  20                 	db	32
   134  000837  20                 	db	32
   135  000838  20                 	db	32
   136  000839  20                 	db	32
   137  00083A  20                 	db	32
   138  00083B  20                 	db	32
   139  00083C  20                 	db	32
   140  00083D  20                 	db	32
   141  00083E  20                 	db	32
   142  00083F  20                 	db	32
   143  000840  20                 	db	32
   144  000841  00                 	db	0
   145  000842                     STR_7:
   146  000842  65                 	db	101	;'e'
   147  000843  64                 	db	100	;'d'
   148  000844  61                 	db	97	;'a'
   149  000845  64                 	db	100	;'d'
   150  000846  3A                 	db	58	;':'
   151  000847  20                 	db	32
   152  000848  25                 	db	37
   153  000849  6C                 	db	108	;'l'
   154  00084A  75                 	db	117	;'u'
   155  00084B  2C                 	db	44
   156  00084C  20                 	db	32
   157  00084D  70                 	db	112	;'p'
   158  00084E  65                 	db	101	;'e'
   159  00084F  73                 	db	115	;'s'
   160  000850  6F                 	db	111	;'o'
   161  000851  3A                 	db	58	;':'
   162  000852  20                 	db	32
   163  000853  25                 	db	37
   164  000854  6C                 	db	108	;'l'
   165  000855  75                 	db	117	;'u'
   166  000856  00                 	db	0
   167  000857                     STR_3:
   168  000857  54                 	db	84	;'T'
   169  000858  65                 	db	101	;'e'
   170  000859  63                 	db	99	;'c'
   171  00085A  6C                 	db	108	;'l'
   172  00085B  65                 	db	101	;'e'
   173  00085C  65                 	db	101	;'e'
   174  00085D  20                 	db	32
   175  00085E  65                 	db	101	;'e'
   176  00085F  64                 	db	100	;'d'
   177  000860  61                 	db	97	;'a'
   178  000861  64                 	db	100	;'d'
   179  000862  00                 	db	0
   180  000863                     STR_5:
   181  000863  54                 	db	84	;'T'
   182  000864  65                 	db	101	;'e'
   183  000865  63                 	db	99	;'c'
   184  000866  6C                 	db	108	;'l'
   185  000867  65                 	db	101	;'e'
   186  000868  65                 	db	101	;'e'
   187  000869  20                 	db	32
   188  00086A  70                 	db	112	;'p'
   189  00086B  65                 	db	101	;'e'
   190  00086C  73                 	db	115	;'s'
   191  00086D  6F                 	db	111	;'o'
   192  00086E  00                 	db	0
   193  00086F  00                 	db	0	; dummy byte at the end
   194  0000                     
   195                           ; #config settings
   196                           
   197                           	psect	cinit
   198  001316                     __pcinit:
   199                           	opt stack 0
   200  001316                     start_initialization:
   201                           	opt stack 0
   202  001316                     __initialization:
   203                           	opt stack 0
   204                           
   205                           ; Initialize objects allocated to COMRAM (1 bytes)
   206                           ; load TBLPTR registers with __pidataCOMRAM
   207  001316  0EE0               	movlw	low __pidataCOMRAM
   208  001318  6EF6               	movwf	tblptrl,c
   209  00131A  0E13               	movlw	high __pidataCOMRAM
   210  00131C  6EF7               	movwf	tblptrh,c
   211  00131E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   212  001320  6EF8               	movwf	tblptru,c
   213  001322  0009               	tblrd		*+	;fetch initializer
   214  001324  CFF5 F034          	movff	tablat,__pdataCOMRAM
   215                           
   216                           ; Clear objects allocated to BANK1 (80 bytes)
   217  001328  EE01  F000         	lfsr	0,__pbssBANK1
   218  00132C  0E50               	movlw	80
   219  00132E                     clear_0:
   220  00132E  6AEE               	clrf	postinc0,c
   221  001330  06E8               	decf	wreg,f,c
   222  001332  E1FD               	bnz	clear_0
   223                           
   224                           ; Clear objects allocated to COMRAM (2 bytes)
   225  001334  6A33               	clrf	(__pbssCOMRAM+1)& (0+255),c
   226  001336  6A32               	clrf	__pbssCOMRAM& (0+255),c
   227  001338                     end_of_initialization:
   228                           	opt stack 0
   229  001338                     __end_of__initialization:
   230                           	opt stack 0
   231  001338  0E00               	movlw	low (__Lmediumconst shr (0+16))
   232  00133A  6EF8               	movwf	tblptru,c
   233  00133C  0100               	movlb	0
   234  00133E  EF73  F009         	goto	_main	;jump to C main() function
   235                           tblptru	equ	0xFF8
   236                           tblptrh	equ	0xFF7
   237                           tblptrl	equ	0xFF6
   238                           tablat	equ	0xFF5
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           
   242                           	psect	bssCOMRAM
   243  000032                     __pbssCOMRAM:
   244                           	opt stack 0
   245  000032                     _keynum:
   246                           	opt stack 0
   247  000032                     	ds	2
   248                           tblptru	equ	0xFF8
   249                           tblptrh	equ	0xFF7
   250                           tblptrl	equ	0xFF6
   251                           tablat	equ	0xFF5
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	dataCOMRAM
   256  000034                     __pdataCOMRAM:
   257                           	opt stack 0
   258  000034                     _LCD_01_ADDRESS:
   259                           	opt stack 0
   260  000034                     	ds	1
   261                           tblptru	equ	0xFF8
   262                           tblptrh	equ	0xFF7
   263                           tblptrl	equ	0xFF6
   264                           tablat	equ	0xFF5
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           
   268                           	psect	bssBANK1
   269  000100                     __pbssBANK1:
   270                           	opt stack 0
   271  000100                     _text:
   272                           	opt stack 0
   273  000100                     	ds	80
   274                           tblptru	equ	0xFF8
   275                           tblptrh	equ	0xFF7
   276                           tblptrl	equ	0xFF6
   277                           tablat	equ	0xFF5
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           
   281                           	psect	cstackBANK0
   282  000060                     __pcstackBANK0:
   283                           	opt stack 0
   284  000060                     riksFactors@text:
   285                           	opt stack 0
   286                           
   287                           ; 80 bytes @ 0x0
   288  000060                     	ds	80
   289  0000B0                     riksFactors@estatura:
   290                           	opt stack 0
   291                           
   292                           ; 4 bytes @ 0x50
   293  0000B0                     	ds	4
   294  0000B4                     riksFactors@gender:
   295                           	opt stack 0
   296                           
   297                           ; 4 bytes @ 0x54
   298  0000B4                     	ds	4
   299  0000B8                     riksFactors@smoke:
   300                           	opt stack 0
   301                           
   302                           ; 4 bytes @ 0x58
   303  0000B8                     	ds	4
   304  0000BC                     riksFactors@parents:
   305                           	opt stack 0
   306                           
   307                           ; 4 bytes @ 0x5C
   308  0000BC                     	ds	4
   309  0000C0                     riksFactors@systolic:
   310                           	opt stack 0
   311                           
   312                           ; 4 bytes @ 0x60
   313  0000C0                     	ds	4
   314  0000C4                     riksFactors@diastolic:
   315                           	opt stack 0
   316                           
   317                           ; 4 bytes @ 0x64
   318  0000C4                     	ds	4
   319  0000C8                     riksFactors@edad:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0x68
   323  0000C8                     	ds	4
   324  0000CC                     riksFactors@peso:
   325                           	opt stack 0
   326                           
   327                           ; 4 bytes @ 0x6C
   328  0000CC                     	ds	4
   329                           tblptru	equ	0xFF8
   330                           tblptrh	equ	0xFF7
   331                           tblptrl	equ	0xFF6
   332                           tablat	equ	0xFF5
   333                           postinc0	equ	0xFEE
   334                           wreg	equ	0xFE8
   335                           
   336                           	psect	cstackCOMRAM
   337  000001                     __pcstackCOMRAM:
   338                           	opt stack 0
   339  000001                     ??_IdleI2C:
   340  000001                     ??_isdigit:
   341  000001                     ?_KP_scan:
   342                           	opt stack 0
   343  000001                     ?___wmul:
   344                           	opt stack 0
   345  000001                     ?___lldiv:
   346                           	opt stack 0
   347  000001                     OpenI2C@slew:
   348                           	opt stack 0
   349  000001                     ___wmul@multiplier:
   350                           	opt stack 0
   351  000001                     ___lldiv@dividend:
   352                           	opt stack 0
   353                           
   354                           ; 4 bytes @ 0x0
   355  000001                     	ds	1
   356  000002                     OpenI2C@sync_mode:
   357                           	opt stack 0
   358  000002                     WriteI2C@data_out:
   359                           	opt stack 0
   360  000002                     _isdigit$825:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x1
   364  000002                     	ds	1
   365  000003                     ??_KP_scan:
   366  000003                     I2C_PCF8574_Write@value:
   367                           	opt stack 0
   368  000003                     isdigit@c:
   369                           	opt stack 0
   370  000003                     ___wmul@multiplicand:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x2
   374  000003                     	ds	1
   375  000004                     I2C_PCF8574_Write@dummy:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x3
   379  000004                     	ds	1
   380  000005                     I2C_PCF8574_Write@S:
   381                           	opt stack 0
   382  000005                     KP_scan@press:
   383                           	opt stack 0
   384  000005                     ___wmul@product:
   385                           	opt stack 0
   386  000005                     ___lldiv@divisor:
   387                           	opt stack 0
   388                           
   389                           ; 4 bytes @ 0x4
   390  000005                     	ds	1
   391  000006                     I2C_PCF8574_Write@addr:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x5
   395  000006                     	ds	1
   396  000007                     ?_atoi:
   397                           	opt stack 0
   398  000007                     LCD_putcmd@data:
   399                           	opt stack 0
   400  000007                     LCD_putch@data:
   401                           	opt stack 0
   402  000007                     KP_scan@row:
   403                           	opt stack 0
   404  000007                     atoi@s:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x6
   408  000007                     	ds	1
   409  000008                     LCD_putcmd@cmdtype:
   410                           	opt stack 0
   411  000008                     LCD_putch@addr:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x7
   415  000008                     	ds	1
   416  000009                     ??_atoi:
   417  000009                     ??_LCD_putcmd:
   418  000009                     KP_Readbutton@key:
   419                           	opt stack 0
   420  000009                     LCD_putch@lcddata:
   421                           	opt stack 0
   422  000009                     ___lldiv@quotient:
   423                           	opt stack 0
   424                           
   425                           ; 4 bytes @ 0x8
   426  000009                     	ds	1
   427  00000A                     LCD_putcmd@addr:
   428                           	opt stack 0
   429  00000A                     LCD_puts@s:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x9
   433  00000A                     	ds	1
   434  00000B                     LCD_putcmd@lcddata:
   435                           	opt stack 0
   436  00000B                     atoi@sign:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0xA
   440  00000B                     	ds	1
   441  00000C                     ??_LCD_init:
   442  00000C                     LCD_goto@row:
   443                           	opt stack 0
   444  00000C                     LCD_puts@i:
   445                           	opt stack 0
   446  00000C                     atoi@a:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0xB
   450  00000C                     	ds	1
   451  00000D                     LCD_init@addr:
   452                           	opt stack 0
   453  00000D                     LCD_goto@column:
   454                           	opt stack 0
   455  00000D                     ___lldiv@counter:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0xC
   459  00000D                     	ds	1
   460  00000E                     ?___llmod:
   461                           	opt stack 0
   462  00000E                     LCD_goto@addr:
   463                           	opt stack 0
   464  00000E                     LCD_puts@addr:
   465                           	opt stack 0
   466  00000E                     ___llmod@dividend:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0xD
   470  00000E                     	ds	1
   471  00000F                     ?_keyNumber:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0xE
   475  00000F                     	ds	3
   476  000012                     ___llmod@divisor:
   477                           	opt stack 0
   478                           
   479                           ; 4 bytes @ 0x11
   480  000012                     	ds	1
   481  000013                     keyNumber@arreglo:
   482                           	opt stack 0
   483                           
   484                           ; 20 bytes @ 0x12
   485  000013                     	ds	3
   486  000016                     ___llmod@counter:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x15
   490  000016                     	ds	1
   491  000017                     ?_sprintf:
   492                           	opt stack 0
   493  000017                     sprintf@sp:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x16
   497  000017                     	ds	2
   498  000019                     sprintf@f:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x18
   502  000019                     	ds	10
   503  000023                     ??_sprintf:
   504                           
   505                           ; 1 bytes @ 0x22
   506  000023                     	ds	2
   507  000025                     sprintf@flag:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x24
   511  000025                     	ds	1
   512  000026                     sprintf@prec:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x25
   516  000026                     	ds	1
   517  000027                     keyNumber@number:
   518                           	opt stack 0
   519                           
   520                           ; 4 bytes @ 0x26
   521  000027                     	ds	1
   522  000028                     sprintf@val:
   523                           	opt stack 0
   524                           
   525                           ; 4 bytes @ 0x27
   526  000028                     	ds	3
   527  00002B                     keyNumber@contador:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x2A
   531  00002B                     	ds	1
   532  00002C                     sprintf@ap:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x2B
   536  00002C                     	ds	1
   537  00002D                     keyNumber@tecla:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x2C
   541  00002D                     	ds	1
   542  00002E                     sprintf@c:
   543                           	opt stack 0
   544  00002E                     keyNumber@i:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x2D
   548  00002E                     	ds	2
   549  000030                     main@counter:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x2F
   553  000030                     	ds	2
   554                           tblptru	equ	0xFF8
   555                           tblptrh	equ	0xFF7
   556                           tblptrl	equ	0xFF6
   557                           tablat	equ	0xFF5
   558                           postinc0	equ	0xFEE
   559                           wreg	equ	0xFE8
   560                           
   561 ;;
   562 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   563 ;;
   564 ;; *************** function _main *****************
   565 ;; Defined at:
   566 ;;		line 21 in file "main.c"
   567 ;; Parameters:    Size  Location     Type
   568 ;;		None
   569 ;; Auto vars:     Size  Location     Type
   570 ;;  counter         2   47[COMRAM] unsigned int 
   571 ;; Return value:  Size  Location     Type
   572 ;;                  1    wreg      void 
   573 ;; Registers used:
   574 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   575 ;; Tracked objects:
   576 ;;		On entry : 0/0
   577 ;;		On exit  : 0/0
   578 ;;		Unchanged: 0/0
   579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   580 ;;      Params:         0       0       0       0       0       0       0       0       0
   581 ;;      Locals:         2       0       0       0       0       0       0       0       0
   582 ;;      Temps:          0       0       0       0       0       0       0       0       0
   583 ;;      Totals:         2       0       0       0       0       0       0       0       0
   584 ;;Total ram usage:        2 bytes
   585 ;; Hardware stack levels required when called:    7
   586 ;; This function calls:
   587 ;;		_KP_init
   588 ;;		_LCD_init
   589 ;;		_LCD_putcmd
   590 ;;		_OpenI2C
   591 ;;		_riksFactors
   592 ;; This function is called by:
   593 ;;		Startup code after reset
   594 ;; This function uses a non-reentrant model
   595 ;;
   596                           
   597                           	psect	text0
   598  0012E6                     __ptext0:
   599                           	opt stack 0
   600  0012E6                     _main:
   601                           	opt stack 24
   602                           
   603                           ;main.c: 25: OpenI2C(0b00001000, 0b10000000);
   604                           
   605                           ;incstack = 0
   606  0012E6  0E80               	movlw	128
   607  0012E8  6E01               	movwf	OpenI2C@slew,c
   608  0012EA  0E08               	movlw	8
   609  0012EC  ECD3  F009         	call	_OpenI2C
   610                           
   611                           ;main.c: 26: LCD_init(LCD_01_ADDRESS);
   612  0012F0  5034               	movf	_LCD_01_ADDRESS,w,c
   613  0012F2  ECC3  F007         	call	_LCD_init
   614                           
   615                           ;main.c: 27: KP_init();
   616  0012F6  ECEB  F009         	call	_KP_init	;wreg free
   617                           
   618                           ;main.c: 30: unsigned int counter = 0;
   619  0012FA  0E00               	movlw	0
   620  0012FC  6E31               	movwf	main@counter+1,c
   621  0012FE  0E00               	movlw	0
   622  001300  6E30               	movwf	main@counter,c
   623                           
   624                           ;main.c: 31: LCD_putcmd(LCD_01_ADDRESS, 0x01,1);
   625  001302  0E01               	movlw	1
   626  001304  6E07               	movwf	LCD_putcmd@data,c
   627  001306  0E01               	movlw	1
   628  001308  6E08               	movwf	LCD_putcmd@cmdtype,c
   629  00130A  5034               	movf	_LCD_01_ADDRESS,w,c
   630  00130C  EC22  F009         	call	_LCD_putcmd
   631  001310                     l1936:
   632                           
   633                           ;main.c: 34: riksFactors();
   634  001310  EC38  F004         	call	_riksFactors	;wreg free
   635  001314  D7FD               	goto	l1936
   636  001316                     __end_of_main:
   637                           	opt stack 0
   638                           tblptru	equ	0xFF8
   639                           tblptrh	equ	0xFF7
   640                           tblptrl	equ	0xFF6
   641                           tablat	equ	0xFF5
   642                           postinc0	equ	0xFEE
   643                           wreg	equ	0xFE8
   644                           
   645 ;; *************** function _riksFactors *****************
   646 ;; Defined at:
   647 ;;		line 39 in file "funciones.c"
   648 ;; Parameters:    Size  Location     Type
   649 ;;		None
   650 ;; Auto vars:     Size  Location     Type
   651 ;;  text           80    0[BANK0 ] unsigned char [80]
   652 ;;  peso            4  108[BANK0 ] unsigned long 
   653 ;;  edad            4  104[BANK0 ] unsigned long 
   654 ;;  diastolic       4  100[BANK0 ] unsigned long 
   655 ;;  systolic        4   96[BANK0 ] unsigned long 
   656 ;;  parents         4   92[BANK0 ] unsigned long 
   657 ;;  smoke           4   88[BANK0 ] unsigned long 
   658 ;;  gender          4   84[BANK0 ] unsigned long 
   659 ;;  estatura        4   80[BANK0 ] unsigned long 
   660 ;; Return value:  Size  Location     Type
   661 ;;                  1    wreg      void 
   662 ;; Registers used:
   663 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   669 ;;      Params:         0       0       0       0       0       0       0       0       0
   670 ;;      Locals:         0     112       0       0       0       0       0       0       0
   671 ;;      Temps:          0       0       0       0       0       0       0       0       0
   672 ;;      Totals:         0     112       0       0       0       0       0       0       0
   673 ;;Total ram usage:      112 bytes
   674 ;; Hardware stack levels used:    1
   675 ;; Hardware stack levels required when called:    6
   676 ;; This function calls:
   677 ;;		_LCD_goto
   678 ;;		_LCD_puts
   679 ;;		_keyNumber
   680 ;;		_sprintf
   681 ;; This function is called by:
   682 ;;		_main
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686                           	psect	text1
   687  000870                     __ptext1:
   688                           	opt stack 0
   689  000870                     _riksFactors:
   690                           	opt stack 24
   691                           
   692                           ;funciones.c: 40: unsigned char text[80];
   693                           ;funciones.c: 41: unsigned long int edad=0,estatura=0,peso=0,gender=0,smoke=0,parents=0,
      +                          systolic=0,diastolic=0;
   694                           
   695                           ;incstack = 0
   696  000870  0E00               	movlw	0
   697  000872  0100               	movlb	0	; () banked
   698  000874  6FC8               	movwf	riksFactors@edad& (0+255),b
   699  000876  0E00               	movlw	0
   700  000878  6FC9               	movwf	(riksFactors@edad+1)& (0+255),b
   701  00087A  0E00               	movlw	0
   702  00087C  6FCA               	movwf	(riksFactors@edad+2)& (0+255),b
   703  00087E  0E00               	movlw	0
   704  000880  6FCB               	movwf	(riksFactors@edad+3)& (0+255),b
   705  000882  0E00               	movlw	0
   706  000884  0100               	movlb	0	; () banked
   707  000886  6FB0               	movwf	riksFactors@estatura& (0+255),b
   708  000888  0E00               	movlw	0
   709  00088A  6FB1               	movwf	(riksFactors@estatura+1)& (0+255),b
   710  00088C  0E00               	movlw	0
   711  00088E  6FB2               	movwf	(riksFactors@estatura+2)& (0+255),b
   712  000890  0E00               	movlw	0
   713  000892  6FB3               	movwf	(riksFactors@estatura+3)& (0+255),b
   714  000894  0E00               	movlw	0
   715  000896  0100               	movlb	0	; () banked
   716  000898  6FCC               	movwf	riksFactors@peso& (0+255),b
   717  00089A  0E00               	movlw	0
   718  00089C  6FCD               	movwf	(riksFactors@peso+1)& (0+255),b
   719  00089E  0E00               	movlw	0
   720  0008A0  6FCE               	movwf	(riksFactors@peso+2)& (0+255),b
   721  0008A2  0E00               	movlw	0
   722  0008A4  6FCF               	movwf	(riksFactors@peso+3)& (0+255),b
   723  0008A6  0E00               	movlw	0
   724  0008A8  0100               	movlb	0	; () banked
   725  0008AA  6FB4               	movwf	riksFactors@gender& (0+255),b
   726  0008AC  0E00               	movlw	0
   727  0008AE  6FB5               	movwf	(riksFactors@gender+1)& (0+255),b
   728  0008B0  0E00               	movlw	0
   729  0008B2  6FB6               	movwf	(riksFactors@gender+2)& (0+255),b
   730  0008B4  0E00               	movlw	0
   731  0008B6  6FB7               	movwf	(riksFactors@gender+3)& (0+255),b
   732  0008B8  0E00               	movlw	0
   733  0008BA  0100               	movlb	0	; () banked
   734  0008BC  6FB8               	movwf	riksFactors@smoke& (0+255),b
   735  0008BE  0E00               	movlw	0
   736  0008C0  6FB9               	movwf	(riksFactors@smoke+1)& (0+255),b
   737  0008C2  0E00               	movlw	0
   738  0008C4  6FBA               	movwf	(riksFactors@smoke+2)& (0+255),b
   739  0008C6  0E00               	movlw	0
   740  0008C8  6FBB               	movwf	(riksFactors@smoke+3)& (0+255),b
   741  0008CA  0E00               	movlw	0
   742  0008CC  0100               	movlb	0	; () banked
   743  0008CE  6FBC               	movwf	riksFactors@parents& (0+255),b
   744  0008D0  0E00               	movlw	0
   745  0008D2  6FBD               	movwf	(riksFactors@parents+1)& (0+255),b
   746  0008D4  0E00               	movlw	0
   747  0008D6  6FBE               	movwf	(riksFactors@parents+2)& (0+255),b
   748  0008D8  0E00               	movlw	0
   749  0008DA  6FBF               	movwf	(riksFactors@parents+3)& (0+255),b
   750  0008DC  0E00               	movlw	0
   751  0008DE  0100               	movlb	0	; () banked
   752  0008E0  6FC0               	movwf	riksFactors@systolic& (0+255),b
   753  0008E2  0E00               	movlw	0
   754  0008E4  6FC1               	movwf	(riksFactors@systolic+1)& (0+255),b
   755  0008E6  0E00               	movlw	0
   756  0008E8  6FC2               	movwf	(riksFactors@systolic+2)& (0+255),b
   757  0008EA  0E00               	movlw	0
   758  0008EC  6FC3               	movwf	(riksFactors@systolic+3)& (0+255),b
   759  0008EE  0E00               	movlw	0
   760  0008F0  0100               	movlb	0	; () banked
   761  0008F2  6FC4               	movwf	riksFactors@diastolic& (0+255),b
   762  0008F4  0E00               	movlw	0
   763  0008F6  6FC5               	movwf	(riksFactors@diastolic+1)& (0+255),b
   764  0008F8  0E00               	movlw	0
   765  0008FA  6FC6               	movwf	(riksFactors@diastolic+2)& (0+255),b
   766  0008FC  0E00               	movlw	0
   767  0008FE  6FC7               	movwf	(riksFactors@diastolic+3)& (0+255),b
   768                           
   769                           ; BSR set to: 0
   770                           ;funciones.c: 44: LCD_goto(LCD_01_ADDRESS,1,1);
   771  000900  0E01               	movlw	1
   772  000902  6E0C               	movwf	LCD_goto@row,c
   773  000904  0E01               	movlw	1
   774  000906  6E0D               	movwf	LCD_goto@column,c
   775  000908  5034               	movf	_LCD_01_ADDRESS,w,c
   776  00090A  EC53  F008         	call	_LCD_goto
   777                           
   778                           ;funciones.c: 45: LCD_puts(LCD_01_ADDRESS,"                        " );
   779  00090E  0E29               	movlw	low STR_1
   780  000910  6E0A               	movwf	LCD_puts@s,c
   781  000912  0E08               	movlw	high STR_1
   782  000914  6E0B               	movwf	LCD_puts@s+1,c
   783  000916  5034               	movf	_LCD_01_ADDRESS,w,c
   784  000918  ECC3  F008         	call	_LCD_puts
   785                           
   786                           ;funciones.c: 47: LCD_goto(LCD_01_ADDRESS,2,1);
   787  00091C  0E02               	movlw	2
   788  00091E  6E0C               	movwf	LCD_goto@row,c
   789  000920  0E01               	movlw	1
   790  000922  6E0D               	movwf	LCD_goto@column,c
   791  000924  5034               	movf	_LCD_01_ADDRESS,w,c
   792  000926  EC53  F008         	call	_LCD_goto
   793                           
   794                           ;funciones.c: 48: LCD_puts(LCD_01_ADDRESS,"                        " );
   795  00092A  0E29               	movlw	low STR_1
   796  00092C  6E0A               	movwf	LCD_puts@s,c
   797  00092E  0E08               	movlw	high STR_1
   798  000930  6E0B               	movwf	LCD_puts@s+1,c
   799  000932  5034               	movf	_LCD_01_ADDRESS,w,c
   800  000934  ECC3  F008         	call	_LCD_puts
   801                           
   802                           ;funciones.c: 50: LCD_goto(LCD_01_ADDRESS,1,1);
   803  000938  0E01               	movlw	1
   804  00093A  6E0C               	movwf	LCD_goto@row,c
   805  00093C  0E01               	movlw	1
   806  00093E  6E0D               	movwf	LCD_goto@column,c
   807  000940  5034               	movf	_LCD_01_ADDRESS,w,c
   808  000942  EC53  F008         	call	_LCD_goto
   809                           
   810                           ;funciones.c: 51: LCD_puts(LCD_01_ADDRESS,"Teclee edad" );
   811  000946  0E57               	movlw	low STR_3
   812  000948  6E0A               	movwf	LCD_puts@s,c
   813  00094A  0E08               	movlw	high STR_3
   814  00094C  6E0B               	movwf	LCD_puts@s+1,c
   815  00094E  5034               	movf	_LCD_01_ADDRESS,w,c
   816  000950  ECC3  F008         	call	_LCD_puts
   817                           
   818                           ;funciones.c: 52: edad = keyNumber();
   819  000954  EC64  F007         	call	_keyNumber	;wreg free
   820  000958  C00F  F0C8         	movff	?_keyNumber,riksFactors@edad
   821  00095C  C010  F0C9         	movff	?_keyNumber+1,riksFactors@edad+1
   822  000960  C011  F0CA         	movff	?_keyNumber+2,riksFactors@edad+2
   823  000964  C012  F0CB         	movff	?_keyNumber+3,riksFactors@edad+3
   824                           
   825                           ;funciones.c: 54: LCD_goto(LCD_01_ADDRESS,2,1);
   826  000968  0E02               	movlw	2
   827  00096A  6E0C               	movwf	LCD_goto@row,c
   828  00096C  0E01               	movlw	1
   829  00096E  6E0D               	movwf	LCD_goto@column,c
   830  000970  5034               	movf	_LCD_01_ADDRESS,w,c
   831  000972  EC53  F008         	call	_LCD_goto
   832                           
   833                           ;funciones.c: 55: LCD_puts(LCD_01_ADDRESS,"                        " );
   834  000976  0E29               	movlw	low STR_1
   835  000978  6E0A               	movwf	LCD_puts@s,c
   836  00097A  0E08               	movlw	high STR_1
   837  00097C  6E0B               	movwf	LCD_puts@s+1,c
   838  00097E  5034               	movf	_LCD_01_ADDRESS,w,c
   839  000980  ECC3  F008         	call	_LCD_puts
   840                           
   841                           ;funciones.c: 57: LCD_goto(LCD_01_ADDRESS,1,1);
   842  000984  0E01               	movlw	1
   843  000986  6E0C               	movwf	LCD_goto@row,c
   844  000988  0E01               	movlw	1
   845  00098A  6E0D               	movwf	LCD_goto@column,c
   846  00098C  5034               	movf	_LCD_01_ADDRESS,w,c
   847  00098E  EC53  F008         	call	_LCD_goto
   848                           
   849                           ;funciones.c: 58: LCD_puts(LCD_01_ADDRESS,"Teclee peso" );
   850  000992  0E63               	movlw	low STR_5
   851  000994  6E0A               	movwf	LCD_puts@s,c
   852  000996  0E08               	movlw	high STR_5
   853  000998  6E0B               	movwf	LCD_puts@s+1,c
   854  00099A  5034               	movf	_LCD_01_ADDRESS,w,c
   855  00099C  ECC3  F008         	call	_LCD_puts
   856                           
   857                           ;funciones.c: 59: peso = keyNumber();
   858  0009A0  EC64  F007         	call	_keyNumber	;wreg free
   859  0009A4  C00F  F0CC         	movff	?_keyNumber,riksFactors@peso
   860  0009A8  C010  F0CD         	movff	?_keyNumber+1,riksFactors@peso+1
   861  0009AC  C011  F0CE         	movff	?_keyNumber+2,riksFactors@peso+2
   862  0009B0  C012  F0CF         	movff	?_keyNumber+3,riksFactors@peso+3
   863                           
   864                           ;funciones.c: 61: LCD_goto(LCD_01_ADDRESS,2,1);
   865  0009B4  0E02               	movlw	2
   866  0009B6  6E0C               	movwf	LCD_goto@row,c
   867  0009B8  0E01               	movlw	1
   868  0009BA  6E0D               	movwf	LCD_goto@column,c
   869  0009BC  5034               	movf	_LCD_01_ADDRESS,w,c
   870  0009BE  EC53  F008         	call	_LCD_goto
   871                           
   872                           ;funciones.c: 62: LCD_puts(LCD_01_ADDRESS,"                        " );
   873  0009C2  0E29               	movlw	low STR_1
   874  0009C4  6E0A               	movwf	LCD_puts@s,c
   875  0009C6  0E08               	movlw	high STR_1
   876  0009C8  6E0B               	movwf	LCD_puts@s+1,c
   877  0009CA  5034               	movf	_LCD_01_ADDRESS,w,c
   878  0009CC  ECC3  F008         	call	_LCD_puts
   879                           
   880                           ;funciones.c: 65: sprintf(text, "edad: %lu, peso: %lu", edad,peso);
   881  0009D0  0E60               	movlw	low riksFactors@text
   882  0009D2  6E17               	movwf	sprintf@sp,c
   883  0009D4  0E00               	movlw	high riksFactors@text
   884  0009D6  6E18               	movwf	sprintf@sp+1,c
   885  0009D8  0E42               	movlw	low STR_7
   886  0009DA  6E19               	movwf	sprintf@f,c
   887  0009DC  0E08               	movlw	high STR_7
   888  0009DE  6E1A               	movwf	sprintf@f+1,c
   889  0009E0  C0C8  F01B         	movff	riksFactors@edad,?_sprintf+4
   890  0009E4  C0C9  F01C         	movff	riksFactors@edad+1,?_sprintf+5
   891  0009E8  C0CA  F01D         	movff	riksFactors@edad+2,?_sprintf+6
   892  0009EC  C0CB  F01E         	movff	riksFactors@edad+3,?_sprintf+7
   893  0009F0  C0CC  F01F         	movff	riksFactors@peso,?_sprintf+8
   894  0009F4  C0CD  F020         	movff	riksFactors@peso+1,?_sprintf+9
   895  0009F8  C0CE  F021         	movff	riksFactors@peso+2,?_sprintf+10
   896  0009FC  C0CF  F022         	movff	riksFactors@peso+3,?_sprintf+11
   897  000A00  EC11  F005         	call	_sprintf	;wreg free
   898                           
   899                           ;funciones.c: 66: LCD_goto(LCD_01_ADDRESS,2,1);
   900  000A04  0E02               	movlw	2
   901  000A06  6E0C               	movwf	LCD_goto@row,c
   902  000A08  0E01               	movlw	1
   903  000A0A  6E0D               	movwf	LCD_goto@column,c
   904  000A0C  5034               	movf	_LCD_01_ADDRESS,w,c
   905  000A0E  EC53  F008         	call	_LCD_goto
   906                           
   907                           ;funciones.c: 67: LCD_puts(LCD_01_ADDRESS,text );
   908  000A12  0E60               	movlw	low riksFactors@text
   909  000A14  6E0A               	movwf	LCD_puts@s,c
   910  000A16  0E00               	movlw	high riksFactors@text
   911  000A18  6E0B               	movwf	LCD_puts@s+1,c
   912  000A1A  5034               	movf	_LCD_01_ADDRESS,w,c
   913  000A1C  ECC3  F008         	call	_LCD_puts
   914  000A20  0012               	return		;funcret
   915  000A22                     __end_of_riksFactors:
   916                           	opt stack 0
   917                           tblptru	equ	0xFF8
   918                           tblptrh	equ	0xFF7
   919                           tblptrl	equ	0xFF6
   920                           tablat	equ	0xFF5
   921                           postinc0	equ	0xFEE
   922                           wreg	equ	0xFE8
   923                           
   924 ;; *************** function _sprintf *****************
   925 ;; Defined at:
   926 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;  sp              2   22[COMRAM] PTR unsigned char 
   929 ;;		 -> riksFactors@text(80), 
   930 ;;  f               2   24[COMRAM] PTR const unsigned char 
   931 ;;		 -> STR_7(21), 
   932 ;; Auto vars:     Size  Location     Type
   933 ;;  val             4   39[COMRAM] unsigned long 
   934 ;;  tmpval          4    0        struct .
   935 ;;  cp              3    0        PTR const unsigned char 
   936 ;;  ap              2   43[COMRAM] PTR void [1]
   937 ;;		 -> ?_sprintf(2), 
   938 ;;  prec            2   37[COMRAM] int 
   939 ;;  len             2    0        unsigned int 
   940 ;;  c               1   45[COMRAM] char 
   941 ;;  flag            1   36[COMRAM] unsigned char 
   942 ;; Return value:  Size  Location     Type
   943 ;;                  2   22[COMRAM] int 
   944 ;; Registers used:
   945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   951 ;;      Params:        12       0       0       0       0       0       0       0       0
   952 ;;      Locals:        10       0       0       0       0       0       0       0       0
   953 ;;      Temps:          2       0       0       0       0       0       0       0       0
   954 ;;      Totals:        24       0       0       0       0       0       0       0       0
   955 ;;Total ram usage:       24 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    1
   958 ;; This function calls:
   959 ;;		___lldiv
   960 ;;		___llmod
   961 ;; This function is called by:
   962 ;;		_riksFactors
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text2
   967  000A22                     __ptext2:
   968                           	opt stack 0
   969  000A22                     _sprintf:
   970                           	opt stack 28
   971                           
   972                           ;doprnt.c: 494: va_list ap;
   973                           ;doprnt.c: 499: signed char c;
   974                           ;doprnt.c: 504: int prec;
   975                           ;doprnt.c: 508: unsigned char flag;
   976                           ;doprnt.c: 523: union {
   977                           ;doprnt.c: 524: unsigned long vd;
   978                           ;doprnt.c: 525: double integ;
   979                           ;doprnt.c: 526: } tmpval;
   980                           ;doprnt.c: 528: unsigned long val;
   981                           ;doprnt.c: 529: unsigned len;
   982                           ;doprnt.c: 530: const char * cp;
   983                           ;doprnt.c: 533: *ap = __va_start();
   984                           
   985                           ;incstack = 0
   986  000A22  0E1B               	movlw	low (?_sprintf+4)
   987  000A24  6E2C               	movwf	sprintf@ap,c
   988  000A26  0E00               	movlw	high (?_sprintf+4)
   989  000A28  6E2D               	movwf	sprintf@ap+1,c
   990                           
   991                           ;doprnt.c: 536: while(c = *f++) {
   992  000A2A  D0BA               	goto	l1852
   993  000A2C                     l1804:
   994                           
   995                           ;doprnt.c: 538: if(c != '%')
   996  000A2C  0E25               	movlw	37
   997  000A2E  182E               	xorwf	sprintf@c,w,c
   998  000A30  B4D8               	btfsc	status,2,c
   999  000A32  D009               	goto	l1810
  1000                           
  1001                           ;doprnt.c: 540: {
  1002                           ;doprnt.c: 541: ((*sp++ = (c)));
  1003  000A34  C017  FFD9         	movff	sprintf@sp,fsr2l
  1004  000A38  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1005  000A3C  C02E  FFDF         	movff	sprintf@c,indf2
  1006  000A40  4A17               	infsnz	sprintf@sp,f,c
  1007  000A42  2A18               	incf	sprintf@sp+1,f,c
  1008                           
  1009                           ;doprnt.c: 542: continue;
  1010  000A44  D0AD               	goto	l1852
  1011  000A46                     l1810:
  1012                           
  1013                           ;doprnt.c: 543: }
  1014                           ;doprnt.c: 548: flag = 0;
  1015  000A46  0E00               	movlw	0
  1016  000A48  6E25               	movwf	sprintf@flag,c
  1017                           
  1018                           ;doprnt.c: 635: switch(c = *f++) {
  1019                           
  1020                           ;doprnt.c: 633: loop:
  1021  000A4A  D005               	goto	l1818
  1022  000A4C                     l1812:
  1023                           
  1024                           ;doprnt.c: 643: flag |= 0x10;
  1025  000A4C  8825               	bsf	sprintf@flag,4,c
  1026                           
  1027                           ;doprnt.c: 644: goto loop;
  1028  000A4E  D003               	goto	l1818
  1029  000A50                     l1814:
  1030                           
  1031                           ;doprnt.c: 818: flag |= 0xC0;
  1032  000A50  0EC0               	movlw	192
  1033  000A52  1225               	iorwf	sprintf@flag,f,c
  1034                           
  1035                           ;doprnt.c: 822: }
  1036                           
  1037                           ;doprnt.c: 819: break;
  1038  000A54  D014               	goto	l175
  1039  000A56                     l1818:
  1040  000A56  C019  FFF6         	movff	sprintf@f,tblptrl
  1041  000A5A  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1042  000A5E  4A19               	infsnz	sprintf@f,f,c
  1043  000A60  2A1A               	incf	sprintf@f+1,f,c
  1044  000A62                     	if	0	;tblptru may be non-zero
  1045  000A62                     	endif
  1046  000A62                     	if	0	;tblptru may be non-zero
  1047  000A62                     	endif
  1048  000A62  0008               	tblrd		*
  1049  000A64  CFF5 F02E          	movff	tablat,sprintf@c
  1050  000A68  502E               	movf	sprintf@c,w,c
  1051                           
  1052                           ; Switch size 1, requested type "space"
  1053                           ; Number of cases is 3, Range of values is 0 to 117
  1054                           ; switch strategies available:
  1055                           ; Name         Instructions Cycles
  1056                           ; simple_byte           10     6 (average)
  1057                           ;	Chosen strategy is simple_byte
  1058  000A6A  0A00               	xorlw	0	; case 0
  1059  000A6C  B4D8               	btfsc	status,2,c
  1060  000A6E  D0A4               	goto	l1854
  1061  000A70  0A6C               	xorlw	108	; case 108
  1062  000A72  B4D8               	btfsc	status,2,c
  1063  000A74  D7EB               	goto	l1812
  1064  000A76  0A19               	xorlw	25	; case 117
  1065  000A78  B4D8               	btfsc	status,2,c
  1066  000A7A  D7EA               	goto	l1814
  1067  000A7C  D091               	goto	l1852
  1068  000A7E                     l175:
  1069                           
  1070                           ;doprnt.c: 1273: {
  1071                           ;doprnt.c: 1281: if(flag & 0x10)
  1072  000A7E  A825               	btfss	sprintf@flag,4,c
  1073  000A80  D00E               	goto	l1824
  1074                           
  1075                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  1076  000A82  C02C  FFD9         	movff	sprintf@ap,fsr2l
  1077  000A86  C02D  FFDA         	movff	sprintf@ap+1,fsr2h
  1078  000A8A  CFDE F028          	movff	postinc2,sprintf@val
  1079  000A8E  CFDE F029          	movff	postinc2,sprintf@val+1
  1080  000A92  CFDE F02A          	movff	postinc2,sprintf@val+2
  1081  000A96  CFDE F02B          	movff	postinc2,sprintf@val+3
  1082  000A9A  0E04               	movlw	4
  1083  000A9C  D00F               	goto	L1
  1084  000A9E                     l1824:
  1085                           
  1086                           ;doprnt.c: 1283: else
  1087                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1088  000A9E  C02C  FFD9         	movff	sprintf@ap,fsr2l
  1089  000AA2  C02D  FFDA         	movff	sprintf@ap+1,fsr2h
  1090  000AA6  CFDE F023          	movff	postinc2,??_sprintf
  1091  000AAA  CFDD F024          	movff	postdec2,??_sprintf+1
  1092  000AAE  C023  F028         	movff	??_sprintf,sprintf@val
  1093  000AB2  C024  F029         	movff	??_sprintf+1,sprintf@val+1
  1094  000AB6  6A2A               	clrf	sprintf@val+2,c
  1095  000AB8  6A2B               	clrf	sprintf@val+3,c
  1096  000ABA  0E02               	movlw	2
  1097  000ABC                     L1:
  1098  000ABC  262C               	addwf	sprintf@ap,f,c
  1099  000ABE  0E00               	movlw	0
  1100  000AC0  222D               	addwfc	sprintf@ap+1,f,c
  1101                           
  1102                           ;doprnt.c: 1287: }
  1103                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1104  000AC2  0E01               	movlw	1
  1105  000AC4  6E2E               	movwf	sprintf@c,c
  1106  000AC6                     l1830:
  1107  000AC6  0E0A               	movlw	10
  1108  000AC8  182E               	xorwf	sprintf@c,w,c
  1109  000ACA  B4D8               	btfsc	status,2,c
  1110  000ACC  D018               	goto	l1842
  1111                           
  1112                           ;doprnt.c: 1306: if(val < dpowers[c])
  1113  000ACE  502E               	movf	sprintf@c,w,c
  1114  000AD0  0D04               	mullw	4
  1115  000AD2  0E01               	movlw	low _dpowers
  1116  000AD4  24F3               	addwf	prodl,w,c
  1117  000AD6  6EF6               	movwf	tblptrl,c
  1118  000AD8  0E08               	movlw	high _dpowers
  1119  000ADA  20F4               	addwfc	prodh,w,c
  1120  000ADC  6EF7               	movwf	tblptrh,c
  1121  000ADE                     	if	0	;There are less than 3 active tblptr bytes
  1122  000ADE                     	endif
  1123  000ADE  0009               	tblrd		*+
  1124  000AE0  50F5               	movf	tablat,w,c
  1125  000AE2  5C28               	subwf	sprintf@val,w,c
  1126  000AE4  0009               	tblrd		*+
  1127  000AE6  50F5               	movf	tablat,w,c
  1128  000AE8  5829               	subwfb	sprintf@val+1,w,c
  1129  000AEA  0009               	tblrd		*+
  1130  000AEC  50F5               	movf	tablat,w,c
  1131  000AEE  582A               	subwfb	sprintf@val+2,w,c
  1132  000AF0  0009               	tblrd		*+
  1133  000AF2  50F5               	movf	tablat,w,c
  1134  000AF4  582B               	subwfb	sprintf@val+3,w,c
  1135  000AF6  A0D8               	btfss	status,0,c
  1136  000AF8  D002               	goto	l1842
  1137                           
  1138                           ;doprnt.c: 1307: break;
  1139  000AFA  2A2E               	incf	sprintf@c,f,c
  1140  000AFC  D7E4               	goto	l1830
  1141  000AFE                     l1842:
  1142                           
  1143                           ;doprnt.c: 1422: {
  1144                           ;doprnt.c: 1469: }
  1145                           ;doprnt.c: 1472: prec = c;
  1146  000AFE  502E               	movf	sprintf@c,w,c
  1147  000B00  6E26               	movwf	sprintf@prec,c
  1148  000B02  6A27               	clrf	sprintf@prec+1,c
  1149  000B04  BE26               	btfsc	sprintf@prec,7,c
  1150  000B06  0627               	decf	sprintf@prec+1,f,c
  1151                           
  1152                           ;doprnt.c: 1474: while(prec--) {
  1153  000B08  D043               	goto	l1850
  1154  000B0A                     l1844:
  1155                           
  1156                           ;doprnt.c: 1478: {
  1157                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1158  000B0A  C026  F023         	movff	sprintf@prec,??_sprintf
  1159  000B0E  C027  F024         	movff	sprintf@prec+1,??_sprintf+1
  1160  000B12  90D8               	bcf	status,0,c
  1161  000B14  3623               	rlcf	??_sprintf,f,c
  1162  000B16  3624               	rlcf	??_sprintf+1,f,c
  1163  000B18  90D8               	bcf	status,0,c
  1164  000B1A  3623               	rlcf	??_sprintf,f,c
  1165  000B1C  3624               	rlcf	??_sprintf+1,f,c
  1166  000B1E  0E01               	movlw	low _dpowers
  1167  000B20  2423               	addwf	??_sprintf,w,c
  1168  000B22  6EF6               	movwf	tblptrl,c
  1169  000B24  0E08               	movlw	high _dpowers
  1170  000B26  2024               	addwfc	??_sprintf+1,w,c
  1171  000B28  6EF7               	movwf	tblptrh,c
  1172  000B2A                     	if	0	;There are less than 3 active tblptr bytes
  1173  000B2A                     	endif
  1174  000B2A  0009               	tblrd		*+
  1175  000B2C  CFF5 F005          	movff	tablat,___lldiv@divisor
  1176  000B30  0009               	tblrd		*+
  1177  000B32  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1178  000B36  0009               	tblrd		*+
  1179  000B38  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1180  000B3C  000A               	tblrd		*-
  1181  000B3E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1182  000B42  C028  F001         	movff	sprintf@val,___lldiv@dividend
  1183  000B46  C029  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1184  000B4A  C02A  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1185  000B4E  C02B  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1186  000B52  EC12  F008         	call	___lldiv	;wreg free
  1187  000B56  C001  F00E         	movff	?___lldiv,___llmod@dividend
  1188  000B5A  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  1189  000B5E  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  1190  000B62  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  1191  000B66  0E0A               	movlw	10
  1192  000B68  6E12               	movwf	___llmod@divisor,c
  1193  000B6A  0E00               	movlw	0
  1194  000B6C  6E13               	movwf	___llmod@divisor+1,c
  1195  000B6E  0E00               	movlw	0
  1196  000B70  6E14               	movwf	___llmod@divisor+2,c
  1197  000B72  0E00               	movlw	0
  1198  000B74  6E15               	movwf	___llmod@divisor+3,c
  1199  000B76  EC90  F008         	call	___llmod	;wreg free
  1200  000B7A  500E               	movf	?___llmod,w,c
  1201  000B7C  0F30               	addlw	48
  1202  000B7E  6E2E               	movwf	sprintf@c,c
  1203                           
  1204                           ;doprnt.c: 1523: }
  1205                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1206  000B80  C017  FFD9         	movff	sprintf@sp,fsr2l
  1207  000B84  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1208  000B88  C02E  FFDF         	movff	sprintf@c,indf2
  1209  000B8C  4A17               	infsnz	sprintf@sp,f,c
  1210  000B8E  2A18               	incf	sprintf@sp+1,f,c
  1211  000B90                     l1850:
  1212  000B90  0626               	decf	sprintf@prec,f,c
  1213  000B92  A0D8               	btfss	status,0,c
  1214  000B94  0627               	decf	sprintf@prec+1,f,c
  1215  000B96  2826               	incf	sprintf@prec,w,c
  1216  000B98  E1B8               	bnz	l1844
  1217  000B9A  2827               	incf	sprintf@prec+1,w,c
  1218  000B9C  A4D8               	btfss	status,2,c
  1219  000B9E  D7B5               	goto	l1844
  1220  000BA0                     l1852:
  1221  000BA0  C019  FFF6         	movff	sprintf@f,tblptrl
  1222  000BA4  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  1223  000BA8  4A19               	infsnz	sprintf@f,f,c
  1224  000BAA  2A1A               	incf	sprintf@f+1,f,c
  1225  000BAC                     	if	0	;tblptru may be non-zero
  1226  000BAC                     	endif
  1227  000BAC                     	if	0	;tblptru may be non-zero
  1228  000BAC                     	endif
  1229  000BAC  0008               	tblrd		*
  1230  000BAE  CFF5 F02E          	movff	tablat,sprintf@c
  1231  000BB2  502E               	movf	sprintf@c,w,c
  1232  000BB4  A4D8               	btfss	status,2,c
  1233  000BB6  D73A               	goto	l1804
  1234  000BB8                     l1854:
  1235                           
  1236                           ;doprnt.c: 1538: *sp = 0;
  1237  000BB8  C017  FFD9         	movff	sprintf@sp,fsr2l
  1238  000BBC  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  1239  000BC0  0E00               	movlw	0
  1240  000BC2  6EDF               	movwf	indf2,c
  1241  000BC4  0012               	return	
  1242  000BC6                     __end_of_sprintf:
  1243                           	opt stack 0
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           prodh	equ	0xFF4
  1249                           prodl	equ	0xFF3
  1250                           postinc0	equ	0xFEE
  1251                           wreg	equ	0xFE8
  1252                           indf2	equ	0xFDF
  1253                           postinc2	equ	0xFDE
  1254                           postdec2	equ	0xFDD
  1255                           fsr2h	equ	0xFDA
  1256                           fsr2l	equ	0xFD9
  1257                           status	equ	0xFD8
  1258                           
  1259 ;; *************** function ___llmod *****************
  1260 ;; Defined at:
  1261 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;  dividend        4   13[COMRAM] unsigned long 
  1264 ;;  divisor         4   17[COMRAM] unsigned long 
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;  counter         1   21[COMRAM] unsigned char 
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  4   13[COMRAM] unsigned long 
  1269 ;; Registers used:
  1270 ;;		wreg, status,2, status,0
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1276 ;;      Params:         8       0       0       0       0       0       0       0       0
  1277 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1278 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1279 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1280 ;;Total ram usage:        9 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; This function calls:
  1283 ;;		Nothing
  1284 ;; This function is called by:
  1285 ;;		_sprintf
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289                           	psect	text3
  1290  001120                     __ptext3:
  1291                           	opt stack 0
  1292  001120                     ___llmod:
  1293                           	opt stack 28
  1294                           
  1295                           ;incstack = 0
  1296  001120  5012               	movf	___llmod@divisor,w,c
  1297  001122  1013               	iorwf	___llmod@divisor+1,w,c
  1298  001124  1014               	iorwf	___llmod@divisor+2,w,c
  1299  001126  1015               	iorwf	___llmod@divisor+3,w,c
  1300  001128  B4D8               	btfsc	status,2,c
  1301  00112A  D024               	goto	l610
  1302  00112C  0E01               	movlw	1
  1303  00112E  6E16               	movwf	___llmod@counter,c
  1304  001130  D006               	goto	l1758
  1305  001132                     l1756:
  1306  001132  90D8               	bcf	status,0,c
  1307  001134  3612               	rlcf	___llmod@divisor,f,c
  1308  001136  3613               	rlcf	___llmod@divisor+1,f,c
  1309  001138  3614               	rlcf	___llmod@divisor+2,f,c
  1310  00113A  3615               	rlcf	___llmod@divisor+3,f,c
  1311  00113C  2A16               	incf	___llmod@counter,f,c
  1312  00113E                     l1758:
  1313  00113E  AE15               	btfss	___llmod@divisor+3,7,c
  1314  001140  D7F8               	goto	l1756
  1315  001142                     l1760:
  1316  001142  5012               	movf	___llmod@divisor,w,c
  1317  001144  5C0E               	subwf	___llmod@dividend,w,c
  1318  001146  5013               	movf	___llmod@divisor+1,w,c
  1319  001148  580F               	subwfb	___llmod@dividend+1,w,c
  1320  00114A  5014               	movf	___llmod@divisor+2,w,c
  1321  00114C  5810               	subwfb	___llmod@dividend+2,w,c
  1322  00114E  5015               	movf	___llmod@divisor+3,w,c
  1323  001150  5811               	subwfb	___llmod@dividend+3,w,c
  1324  001152  A0D8               	btfss	status,0,c
  1325  001154  D008               	goto	l1764
  1326  001156  5012               	movf	___llmod@divisor,w,c
  1327  001158  5E0E               	subwf	___llmod@dividend,f,c
  1328  00115A  5013               	movf	___llmod@divisor+1,w,c
  1329  00115C  5A0F               	subwfb	___llmod@dividend+1,f,c
  1330  00115E  5014               	movf	___llmod@divisor+2,w,c
  1331  001160  5A10               	subwfb	___llmod@dividend+2,f,c
  1332  001162  5015               	movf	___llmod@divisor+3,w,c
  1333  001164  5A11               	subwfb	___llmod@dividend+3,f,c
  1334  001166                     l1764:
  1335  001166  90D8               	bcf	status,0,c
  1336  001168  3215               	rrcf	___llmod@divisor+3,f,c
  1337  00116A  3214               	rrcf	___llmod@divisor+2,f,c
  1338  00116C  3213               	rrcf	___llmod@divisor+1,f,c
  1339  00116E  3212               	rrcf	___llmod@divisor,f,c
  1340  001170  2E16               	decfsz	___llmod@counter,f,c
  1341  001172  D7E7               	goto	l1760
  1342  001174                     l610:
  1343  001174  C00E  F00E         	movff	___llmod@dividend,?___llmod
  1344  001178  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  1345  00117C  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  1346  001180  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  1347  001184  0012               	return		;funcret
  1348  001186                     __end_of___llmod:
  1349                           	opt stack 0
  1350                           tblptru	equ	0xFF8
  1351                           tblptrh	equ	0xFF7
  1352                           tblptrl	equ	0xFF6
  1353                           tablat	equ	0xFF5
  1354                           prodh	equ	0xFF4
  1355                           prodl	equ	0xFF3
  1356                           postinc0	equ	0xFEE
  1357                           wreg	equ	0xFE8
  1358                           indf2	equ	0xFDF
  1359                           postinc2	equ	0xFDE
  1360                           postdec2	equ	0xFDD
  1361                           fsr2h	equ	0xFDA
  1362                           fsr2l	equ	0xFD9
  1363                           status	equ	0xFD8
  1364                           
  1365 ;; *************** function ___lldiv *****************
  1366 ;; Defined at:
  1367 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  dividend        4    0[COMRAM] unsigned long 
  1370 ;;  divisor         4    4[COMRAM] unsigned long 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;  quotient        4    8[COMRAM] unsigned long 
  1373 ;;  counter         1   12[COMRAM] unsigned char 
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  4    0[COMRAM] unsigned long 
  1376 ;; Registers used:
  1377 ;;		wreg, status,2, status,0
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1383 ;;      Params:         8       0       0       0       0       0       0       0       0
  1384 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1385 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1386 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1387 ;;Total ram usage:       13 bytes
  1388 ;; Hardware stack levels used:    1
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_sprintf
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text4
  1397  001024                     __ptext4:
  1398                           	opt stack 0
  1399  001024                     ___lldiv:
  1400                           	opt stack 28
  1401                           
  1402                           ;incstack = 0
  1403  001024  0E00               	movlw	0
  1404  001026  6E09               	movwf	___lldiv@quotient,c
  1405  001028  0E00               	movlw	0
  1406  00102A  6E0A               	movwf	___lldiv@quotient+1,c
  1407  00102C  0E00               	movlw	0
  1408  00102E  6E0B               	movwf	___lldiv@quotient+2,c
  1409  001030  0E00               	movlw	0
  1410  001032  6E0C               	movwf	___lldiv@quotient+3,c
  1411  001034  5005               	movf	___lldiv@divisor,w,c
  1412  001036  1006               	iorwf	___lldiv@divisor+1,w,c
  1413  001038  1007               	iorwf	___lldiv@divisor+2,w,c
  1414  00103A  1008               	iorwf	___lldiv@divisor+3,w,c
  1415  00103C  B4D8               	btfsc	status,2,c
  1416  00103E  D02A               	goto	l600
  1417  001040  0E01               	movlw	1
  1418  001042  6E0D               	movwf	___lldiv@counter,c
  1419  001044  D006               	goto	l1738
  1420  001046                     l1736:
  1421  001046  90D8               	bcf	status,0,c
  1422  001048  3605               	rlcf	___lldiv@divisor,f,c
  1423  00104A  3606               	rlcf	___lldiv@divisor+1,f,c
  1424  00104C  3607               	rlcf	___lldiv@divisor+2,f,c
  1425  00104E  3608               	rlcf	___lldiv@divisor+3,f,c
  1426  001050  2A0D               	incf	___lldiv@counter,f,c
  1427  001052                     l1738:
  1428  001052  AE08               	btfss	___lldiv@divisor+3,7,c
  1429  001054  D7F8               	goto	l1736
  1430  001056                     l1740:
  1431  001056  90D8               	bcf	status,0,c
  1432  001058  3609               	rlcf	___lldiv@quotient,f,c
  1433  00105A  360A               	rlcf	___lldiv@quotient+1,f,c
  1434  00105C  360B               	rlcf	___lldiv@quotient+2,f,c
  1435  00105E  360C               	rlcf	___lldiv@quotient+3,f,c
  1436  001060  5005               	movf	___lldiv@divisor,w,c
  1437  001062  5C01               	subwf	___lldiv@dividend,w,c
  1438  001064  5006               	movf	___lldiv@divisor+1,w,c
  1439  001066  5802               	subwfb	___lldiv@dividend+1,w,c
  1440  001068  5007               	movf	___lldiv@divisor+2,w,c
  1441  00106A  5803               	subwfb	___lldiv@dividend+2,w,c
  1442  00106C  5008               	movf	___lldiv@divisor+3,w,c
  1443  00106E  5804               	subwfb	___lldiv@dividend+3,w,c
  1444  001070  A0D8               	btfss	status,0,c
  1445  001072  D009               	goto	l1748
  1446  001074  5005               	movf	___lldiv@divisor,w,c
  1447  001076  5E01               	subwf	___lldiv@dividend,f,c
  1448  001078  5006               	movf	___lldiv@divisor+1,w,c
  1449  00107A  5A02               	subwfb	___lldiv@dividend+1,f,c
  1450  00107C  5007               	movf	___lldiv@divisor+2,w,c
  1451  00107E  5A03               	subwfb	___lldiv@dividend+2,f,c
  1452  001080  5008               	movf	___lldiv@divisor+3,w,c
  1453  001082  5A04               	subwfb	___lldiv@dividend+3,f,c
  1454  001084  8009               	bsf	___lldiv@quotient,0,c
  1455  001086                     l1748:
  1456  001086  90D8               	bcf	status,0,c
  1457  001088  3208               	rrcf	___lldiv@divisor+3,f,c
  1458  00108A  3207               	rrcf	___lldiv@divisor+2,f,c
  1459  00108C  3206               	rrcf	___lldiv@divisor+1,f,c
  1460  00108E  3205               	rrcf	___lldiv@divisor,f,c
  1461  001090  2E0D               	decfsz	___lldiv@counter,f,c
  1462  001092  D7E1               	goto	l1740
  1463  001094                     l600:
  1464  001094  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1465  001098  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1466  00109C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1467  0010A0  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1468  0010A4  0012               	return		;funcret
  1469  0010A6                     __end_of___lldiv:
  1470                           	opt stack 0
  1471                           tblptru	equ	0xFF8
  1472                           tblptrh	equ	0xFF7
  1473                           tblptrl	equ	0xFF6
  1474                           tablat	equ	0xFF5
  1475                           prodh	equ	0xFF4
  1476                           prodl	equ	0xFF3
  1477                           postinc0	equ	0xFEE
  1478                           wreg	equ	0xFE8
  1479                           indf2	equ	0xFDF
  1480                           postinc2	equ	0xFDE
  1481                           postdec2	equ	0xFDD
  1482                           fsr2h	equ	0xFDA
  1483                           fsr2l	equ	0xFD9
  1484                           status	equ	0xFD8
  1485                           
  1486 ;; *************** function _keyNumber *****************
  1487 ;; Defined at:
  1488 ;;		line 6 in file "funciones.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;		None
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  arreglo        20   18[COMRAM] unsigned char [20]
  1493 ;;  number          4   38[COMRAM] unsigned long 
  1494 ;;  i               2   45[COMRAM] unsigned int 
  1495 ;;  contador        2   42[COMRAM] unsigned int 
  1496 ;;  tecla           1   44[COMRAM] unsigned char 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  4   14[COMRAM] unsigned long 
  1499 ;; Registers used:
  1500 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1506 ;;      Params:         4       0       0       0       0       0       0       0       0
  1507 ;;      Locals:        29       0       0       0       0       0       0       0       0
  1508 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1509 ;;      Totals:        33       0       0       0       0       0       0       0       0
  1510 ;;Total ram usage:       33 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    5
  1513 ;; This function calls:
  1514 ;;		_KP_Readbutton
  1515 ;;		_LCD_goto
  1516 ;;		_LCD_puts
  1517 ;;		_atoi
  1518 ;; This function is called by:
  1519 ;;		_riksFactors
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text5
  1524  000EC8                     __ptext5:
  1525                           	opt stack 0
  1526  000EC8                     _keyNumber:
  1527                           	opt stack 24
  1528                           
  1529                           ;funciones.c: 7: unsigned char arreglo[20];
  1530                           ;funciones.c: 8: unsigned int contador =0,i=0;
  1531                           
  1532                           ;incstack = 0
  1533  000EC8  0E00               	movlw	0
  1534  000ECA  6E2C               	movwf	keyNumber@contador+1,c
  1535  000ECC  0E00               	movlw	0
  1536  000ECE  6E2B               	movwf	keyNumber@contador,c
  1537  000ED0  0E00               	movlw	0
  1538  000ED2  6E2F               	movwf	keyNumber@i+1,c
  1539  000ED4  0E00               	movlw	0
  1540  000ED6  6E2E               	movwf	keyNumber@i,c
  1541  000ED8                     l1770:
  1542  000ED8  502F               	movf	keyNumber@i+1,w,c
  1543  000EDA  E10F               	bnz	l1780
  1544  000EDC  0E0A               	movlw	10
  1545  000EDE  5C2E               	subwf	keyNumber@i,w,c
  1546  000EE0  B0D8               	btfsc	status,0,c
  1547  000EE2  D00B               	goto	l1780
  1548                           
  1549                           ;funciones.c: 11: arreglo[i]=0;
  1550  000EE4  0E13               	movlw	low keyNumber@arreglo
  1551  000EE6  242E               	addwf	keyNumber@i,w,c
  1552  000EE8  6ED9               	movwf	fsr2l,c
  1553  000EEA  0E00               	movlw	high keyNumber@arreglo
  1554  000EEC  202F               	addwfc	keyNumber@i+1,w,c
  1555  000EEE  6EDA               	movwf	fsr2h,c
  1556  000EF0  0E00               	movlw	0
  1557  000EF2  6EDF               	movwf	indf2,c
  1558  000EF4  4A2E               	infsnz	keyNumber@i,f,c
  1559  000EF6  2A2F               	incf	keyNumber@i+1,f,c
  1560  000EF8  D7EF               	goto	l1770
  1561  000EFA                     l1780:
  1562                           
  1563                           ;funciones.c: 15: tecla = KP_Readbutton();
  1564  000EFA  ECE3  F005         	call	_KP_Readbutton	;wreg free
  1565  000EFE  6E2D               	movwf	keyNumber@tecla,c
  1566                           
  1567                           ;funciones.c: 17: if (tecla != '+'){
  1568  000F00  0E2B               	movlw	43
  1569  000F02  182D               	xorwf	keyNumber@tecla,w,c
  1570  000F04  B4D8               	btfsc	status,2,c
  1571  000F06  D019               	goto	l1792
  1572                           
  1573                           ;funciones.c: 18: arreglo[contador]= tecla;
  1574  000F08  0E13               	movlw	low keyNumber@arreglo
  1575  000F0A  242B               	addwf	keyNumber@contador,w,c
  1576  000F0C  6ED9               	movwf	fsr2l,c
  1577  000F0E  0E00               	movlw	high keyNumber@arreglo
  1578  000F10  202C               	addwfc	keyNumber@contador+1,w,c
  1579  000F12  6EDA               	movwf	fsr2h,c
  1580  000F14  C02D  FFDF         	movff	keyNumber@tecla,indf2
  1581                           
  1582                           ;funciones.c: 19: LCD_goto(LCD_01_ADDRESS,2,1);
  1583  000F18  0E02               	movlw	2
  1584  000F1A  6E0C               	movwf	LCD_goto@row,c
  1585  000F1C  0E01               	movlw	1
  1586  000F1E  6E0D               	movwf	LCD_goto@column,c
  1587  000F20  5034               	movf	_LCD_01_ADDRESS,w,c
  1588  000F22  EC53  F008         	call	_LCD_goto
  1589                           
  1590                           ;funciones.c: 20: LCD_puts(LCD_01_ADDRESS, arreglo);
  1591  000F26  0E13               	movlw	low keyNumber@arreglo
  1592  000F28  6E0A               	movwf	LCD_puts@s,c
  1593  000F2A  0E00               	movlw	high keyNumber@arreglo
  1594  000F2C  6E0B               	movwf	LCD_puts@s+1,c
  1595  000F2E  5034               	movf	_LCD_01_ADDRESS,w,c
  1596  000F30  ECC3  F008         	call	_LCD_puts
  1597                           
  1598                           ;funciones.c: 21: contador++;
  1599  000F34  4A2B               	infsnz	keyNumber@contador,f,c
  1600  000F36  2A2C               	incf	keyNumber@contador+1,f,c
  1601                           
  1602                           ;funciones.c: 23: }
  1603  000F38  D7E0               	goto	l1780
  1604  000F3A                     l1792:
  1605                           
  1606                           ;funciones.c: 24: else
  1607                           ;funciones.c: 25: {
  1608                           ;funciones.c: 26: LCD_goto(LCD_01_ADDRESS,2,1);
  1609  000F3A  0E02               	movlw	2
  1610  000F3C  6E0C               	movwf	LCD_goto@row,c
  1611  000F3E  0E01               	movlw	1
  1612  000F40  6E0D               	movwf	LCD_goto@column,c
  1613  000F42  5034               	movf	_LCD_01_ADDRESS,w,c
  1614  000F44  EC53  F008         	call	_LCD_goto
  1615                           
  1616                           ;funciones.c: 27: LCD_puts(LCD_01_ADDRESS, arreglo);
  1617  000F48  0E13               	movlw	low keyNumber@arreglo
  1618  000F4A  6E0A               	movwf	LCD_puts@s,c
  1619  000F4C  0E00               	movlw	high keyNumber@arreglo
  1620  000F4E  6E0B               	movwf	LCD_puts@s+1,c
  1621  000F50  5034               	movf	_LCD_01_ADDRESS,w,c
  1622  000F52  ECC3  F008         	call	_LCD_puts
  1623                           
  1624                           ;funciones.c: 29: }
  1625                           ;funciones.c: 33: }
  1626                           ;funciones.c: 35: number = (unsigned long int)atoi(arreglo);
  1627                           
  1628                           ;funciones.c: 28: break;
  1629  000F56  0E13               	movlw	low keyNumber@arreglo
  1630  000F58  6E07               	movwf	atoi@s,c
  1631  000F5A  0E00               	movlw	high keyNumber@arreglo
  1632  000F5C  6E08               	movwf	atoi@s+1,c
  1633  000F5E  ECFD  F006         	call	_atoi	;wreg free
  1634  000F62  C007  F027         	movff	?_atoi,keyNumber@number
  1635  000F66  C008  F028         	movff	?_atoi+1,keyNumber@number+1
  1636  000F6A  0E00               	movlw	0
  1637  000F6C  BE28               	btfsc	keyNumber@number+1,7,c
  1638  000F6E  0EFF               	movlw	-1
  1639  000F70  6E29               	movwf	keyNumber@number+2,c
  1640  000F72  6E2A               	movwf	keyNumber@number+3,c
  1641                           
  1642                           ;funciones.c: 36: return number;
  1643  000F74  C027  F00F         	movff	keyNumber@number,?_keyNumber
  1644  000F78  C028  F010         	movff	keyNumber@number+1,?_keyNumber+1
  1645  000F7C  C029  F011         	movff	keyNumber@number+2,?_keyNumber+2
  1646  000F80  C02A  F012         	movff	keyNumber@number+3,?_keyNumber+3
  1647  000F84  0012               	return	
  1648  000F86                     __end_of_keyNumber:
  1649                           	opt stack 0
  1650                           tblptru	equ	0xFF8
  1651                           tblptrh	equ	0xFF7
  1652                           tblptrl	equ	0xFF6
  1653                           tablat	equ	0xFF5
  1654                           prodh	equ	0xFF4
  1655                           prodl	equ	0xFF3
  1656                           postinc0	equ	0xFEE
  1657                           wreg	equ	0xFE8
  1658                           indf2	equ	0xFDF
  1659                           postinc2	equ	0xFDE
  1660                           postdec2	equ	0xFDD
  1661                           fsr2h	equ	0xFDA
  1662                           fsr2l	equ	0xFD9
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _atoi *****************
  1666 ;; Defined at:
  1667 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  s               2    6[COMRAM] PTR const unsigned char 
  1670 ;;		 -> keyNumber@arreglo(20), 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;  a               2   11[COMRAM] int 
  1673 ;;  sign            1   10[COMRAM] unsigned char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  2    6[COMRAM] int 
  1676 ;; Registers used:
  1677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1683 ;;      Params:         2       0       0       0       0       0       0       0       0
  1684 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1685 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1686 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1687 ;;Total ram usage:        7 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    1
  1690 ;; This function calls:
  1691 ;;		___wmul
  1692 ;;		_isdigit
  1693 ;; This function is called by:
  1694 ;;		_keyNumber
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text6
  1699  000DFA                     __ptext6:
  1700                           	opt stack 0
  1701  000DFA                     _atoi:
  1702                           	opt stack 27
  1703                           
  1704                           ;incstack = 0
  1705  000DFA  D002               	goto	l1706
  1706  000DFC                     l1704:
  1707  000DFC  4A07               	infsnz	atoi@s,f,c
  1708  000DFE  2A08               	incf	atoi@s+1,f,c
  1709  000E00                     l1706:
  1710  000E00  C007  FFD9         	movff	atoi@s,fsr2l
  1711  000E04  C008  FFDA         	movff	atoi@s+1,fsr2h
  1712  000E08  0E20               	movlw	32
  1713  000E0A  18DE               	xorwf	postinc2,w,c
  1714  000E0C  B4D8               	btfsc	status,2,c
  1715  000E0E  D7F6               	goto	l1704
  1716  000E10  C007  FFD9         	movff	atoi@s,fsr2l
  1717  000E14  C008  FFDA         	movff	atoi@s+1,fsr2h
  1718  000E18  0E09               	movlw	9
  1719  000E1A  18DE               	xorwf	postinc2,w,c
  1720  000E1C  B4D8               	btfsc	status,2,c
  1721  000E1E  D7EE               	goto	l1704
  1722  000E20  0E00               	movlw	0
  1723  000E22  6E0D               	movwf	atoi@a+1,c
  1724  000E24  0E00               	movlw	0
  1725  000E26  6E0C               	movwf	atoi@a,c
  1726  000E28  0E00               	movlw	0
  1727  000E2A  6E0B               	movwf	atoi@sign,c
  1728  000E2C  C007  FFD9         	movff	atoi@s,fsr2l
  1729  000E30  C008  FFDA         	movff	atoi@s+1,fsr2h
  1730  000E34  0E2D               	movlw	45
  1731  000E36  18DE               	xorwf	postinc2,w,c
  1732  000E38  A4D8               	btfss	status,2,c
  1733  000E3A  D002               	goto	l1716
  1734  000E3C  2A0B               	incf	atoi@sign,f,c
  1735  000E3E  D024               	goto	l1722
  1736  000E40                     l1716:
  1737  000E40  C007  FFD9         	movff	atoi@s,fsr2l
  1738  000E44  C008  FFDA         	movff	atoi@s+1,fsr2h
  1739  000E48  0E2B               	movlw	43
  1740  000E4A  18DE               	xorwf	postinc2,w,c
  1741  000E4C  A4D8               	btfss	status,2,c
  1742  000E4E  D01E               	goto	l1724
  1743  000E50  D01B               	goto	l1722
  1744  000E52                     l1720:
  1745  000E52  C00C  F001         	movff	atoi@a,___wmul@multiplier
  1746  000E56  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  1747  000E5A  0E00               	movlw	0
  1748  000E5C  6E04               	movwf	___wmul@multiplicand+1,c
  1749  000E5E  0E0A               	movlw	10
  1750  000E60  6E03               	movwf	___wmul@multiplicand,c
  1751  000E62  ECA1  F009         	call	___wmul	;wreg free
  1752  000E66  C007  FFD9         	movff	atoi@s,fsr2l
  1753  000E6A  C008  FFDA         	movff	atoi@s+1,fsr2h
  1754  000E6E  50DF               	movf	indf2,w,c
  1755  000E70  6E09               	movwf	??_atoi& (0+255),c
  1756  000E72  6A0A               	clrf	(??_atoi+1)& (0+255),c
  1757  000E74  5001               	movf	?___wmul,w,c
  1758  000E76  2609               	addwf	??_atoi,f,c
  1759  000E78  5002               	movf	?___wmul+1,w,c
  1760  000E7A  220A               	addwfc	??_atoi+1,f,c
  1761  000E7C  0ED0               	movlw	208
  1762  000E7E  2409               	addwf	??_atoi,w,c
  1763  000E80  6E0C               	movwf	atoi@a,c
  1764  000E82  0EFF               	movlw	255
  1765  000E84  200A               	addwfc	??_atoi+1,w,c
  1766  000E86  6E0D               	movwf	atoi@a+1,c
  1767  000E88                     l1722:
  1768  000E88  4A07               	infsnz	atoi@s,f,c
  1769  000E8A  2A08               	incf	atoi@s+1,f,c
  1770  000E8C                     l1724:
  1771  000E8C  C007  FFD9         	movff	atoi@s,fsr2l
  1772  000E90  C008  FFDA         	movff	atoi@s+1,fsr2h
  1773  000E94  50DF               	movf	indf2,w,c
  1774  000E96  ECC4  F009         	call	_isdigit
  1775  000E9A  B0D8               	btfsc	status,0,c
  1776  000E9C  D7DA               	goto	l1720
  1777  000E9E  500B               	movf	atoi@sign,w,c
  1778  000EA0  B4D8               	btfsc	status,2,c
  1779  000EA2  D00D               	goto	l403
  1780  000EA4  C00C  F009         	movff	atoi@a,??_atoi
  1781  000EA8  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  1782  000EAC  1E09               	comf	??_atoi,f,c
  1783  000EAE  1E0A               	comf	??_atoi+1,f,c
  1784  000EB0  4A09               	infsnz	??_atoi,f,c
  1785  000EB2  2A0A               	incf	??_atoi+1,f,c
  1786  000EB4  C009  F007         	movff	??_atoi,?_atoi
  1787  000EB8  C00A  F008         	movff	??_atoi+1,?_atoi+1
  1788  000EBC  0012               	return	
  1789  000EBE                     l403:
  1790  000EBE  C00C  F007         	movff	atoi@a,?_atoi
  1791  000EC2  C00D  F008         	movff	atoi@a+1,?_atoi+1
  1792  000EC6  0012               	return		;funcret
  1793  000EC8                     __end_of_atoi:
  1794                           	opt stack 0
  1795                           tblptru	equ	0xFF8
  1796                           tblptrh	equ	0xFF7
  1797                           tblptrl	equ	0xFF6
  1798                           tablat	equ	0xFF5
  1799                           prodh	equ	0xFF4
  1800                           prodl	equ	0xFF3
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           indf2	equ	0xFDF
  1804                           postinc2	equ	0xFDE
  1805                           postdec2	equ	0xFDD
  1806                           fsr2h	equ	0xFDA
  1807                           fsr2l	equ	0xFD9
  1808                           status	equ	0xFD8
  1809                           
  1810 ;; *************** function _isdigit *****************
  1811 ;; Defined at:
  1812 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  c               1    wreg     unsigned char 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  c               1    2[COMRAM] unsigned char 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;		None               void
  1819 ;; Registers used:
  1820 ;;		wreg, status,2, status,0
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1826 ;;      Params:         0       0       0       0       0       0       0       0       0
  1827 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1828 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1829 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1830 ;;Total ram usage:        3 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; This function calls:
  1833 ;;		Nothing
  1834 ;; This function is called by:
  1835 ;;		_atoi
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text7
  1840  001388                     __ptext7:
  1841                           	opt stack 0
  1842  001388                     _isdigit:
  1843                           	opt stack 27
  1844                           
  1845                           ;incstack = 0
  1846                           ;isdigit@c stored from wreg
  1847  001388  6E03               	movwf	isdigit@c,c
  1848  00138A  0E00               	movlw	0
  1849  00138C  6E02               	movwf	_isdigit$825,c
  1850  00138E  0E3A               	movlw	58
  1851  001390  6003               	cpfslt	isdigit@c,c
  1852  001392  D005               	goto	l1570
  1853  001394  0E2F               	movlw	47
  1854  001396  6403               	cpfsgt	isdigit@c,c
  1855  001398  D002               	goto	l1570
  1856  00139A  0E01               	movlw	1
  1857  00139C  6E02               	movwf	_isdigit$825,c
  1858  00139E                     l1570:
  1859  00139E  C002  F001         	movff	_isdigit$825,??_isdigit
  1860  0013A2  3001               	rrcf	??_isdigit,w,c
  1861  0013A4  0012               	return	
  1862  0013A6                     __end_of_isdigit:
  1863                           	opt stack 0
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           prodh	equ	0xFF4
  1869                           prodl	equ	0xFF3
  1870                           postinc0	equ	0xFEE
  1871                           wreg	equ	0xFE8
  1872                           indf2	equ	0xFDF
  1873                           postinc2	equ	0xFDE
  1874                           postdec2	equ	0xFDD
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879 ;; *************** function ___wmul *****************
  1880 ;; Defined at:
  1881 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  multiplier      2    0[COMRAM] unsigned int 
  1884 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;  product         2    4[COMRAM] unsigned int 
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  2    0[COMRAM] unsigned int 
  1889 ;; Registers used:
  1890 ;;		wreg, status,2, status,0, prodl, prodh
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1896 ;;      Params:         4       0       0       0       0       0       0       0       0
  1897 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1898 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1899 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1900 ;;Total ram usage:        6 bytes
  1901 ;; Hardware stack levels used:    1
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_atoi
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           	psect	text8
  1910  001342                     __ptext8:
  1911                           	opt stack 0
  1912  001342                     ___wmul:
  1913                           	opt stack 27
  1914                           
  1915                           ;incstack = 0
  1916  001342  5001               	movf	___wmul@multiplier,w,c
  1917  001344  0203               	mulwf	___wmul@multiplicand,c
  1918  001346  CFF3 F005          	movff	prodl,___wmul@product
  1919  00134A  CFF4 F006          	movff	prodh,___wmul@product+1
  1920  00134E  5001               	movf	___wmul@multiplier,w,c
  1921  001350  0204               	mulwf	___wmul@multiplicand+1,c
  1922  001352  50F3               	movf	prodl,w,c
  1923  001354  2606               	addwf	___wmul@product+1,f,c
  1924  001356  5002               	movf	___wmul@multiplier+1,w,c
  1925  001358  0203               	mulwf	___wmul@multiplicand,c
  1926  00135A  50F3               	movf	prodl,w,c
  1927  00135C  2606               	addwf	___wmul@product+1,f,c
  1928  00135E  C005  F001         	movff	___wmul@product,?___wmul
  1929  001362  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1930  001366  0012               	return	
  1931  001368                     __end_of___wmul:
  1932                           	opt stack 0
  1933                           tblptru	equ	0xFF8
  1934                           tblptrh	equ	0xFF7
  1935                           tblptrl	equ	0xFF6
  1936                           tablat	equ	0xFF5
  1937                           prodh	equ	0xFF4
  1938                           prodl	equ	0xFF3
  1939                           postinc0	equ	0xFEE
  1940                           wreg	equ	0xFE8
  1941                           indf2	equ	0xFDF
  1942                           postinc2	equ	0xFDE
  1943                           postdec2	equ	0xFDD
  1944                           fsr2h	equ	0xFDA
  1945                           fsr2l	equ	0xFD9
  1946                           status	equ	0xFD8
  1947                           
  1948 ;; *************** function _LCD_puts *****************
  1949 ;; Defined at:
  1950 ;;		line 93 in file "i2c_lcd.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;  addr            1    wreg     unsigned char 
  1953 ;;  s               2    9[COMRAM] PTR unsigned char 
  1954 ;;		 -> riksFactors@text(80), STR_6(25), STR_5(12), STR_4(25), 
  1955 ;;		 -> STR_3(12), STR_2(25), STR_1(25), keyNumber@arreglo(20), 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;  addr            1   13[COMRAM] unsigned char 
  1958 ;;  i               2   11[COMRAM] int 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  1    wreg      void 
  1961 ;; Registers used:
  1962 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1968 ;;      Params:         2       0       0       0       0       0       0       0       0
  1969 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1970 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1971 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1972 ;;Total ram usage:        5 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; Hardware stack levels required when called:    4
  1975 ;; This function calls:
  1976 ;;		_LCD_putch
  1977 ;; This function is called by:
  1978 ;;		_keyNumber
  1979 ;;		_riksFactors
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text9
  1984  001186                     __ptext9:
  1985                           	opt stack 0
  1986  001186                     _LCD_puts:
  1987                           	opt stack 24
  1988                           
  1989                           ;incstack = 0
  1990                           ;LCD_puts@addr stored from wreg
  1991  001186  6E0E               	movwf	LCD_puts@addr,c
  1992                           
  1993                           ;i2c_lcd.c: 95: int i=0;
  1994  001188  0E00               	movlw	0
  1995  00118A  6E0D               	movwf	LCD_puts@i+1,c
  1996  00118C  0E00               	movlw	0
  1997  00118E  6E0C               	movwf	LCD_puts@i,c
  1998                           
  1999                           ;i2c_lcd.c: 96: while(*s != 0) LCD_putch(addr, *s++);
  2000  001190  D016               	goto	l1700
  2001  001192                     l1696:
  2002  001192  C00A  FFF6         	movff	LCD_puts@s,tblptrl
  2003  001196  C00B  FFF7         	movff	LCD_puts@s+1,tblptrh
  2004  00119A  6AF8               	clrf	tblptru,c
  2005  00119C  0E07               	movlw	(high __ramtop+-1)
  2006  00119E  64F7               	cpfsgt	tblptrh,c
  2007  0011A0  D003               	bra	u1197
  2008  0011A2  0008               	tblrd		*
  2009  0011A4  50F5               	movf	tablat,w,c
  2010  0011A6  D005               	bra	u1190
  2011  0011A8                     u1197:
  2012  0011A8  CFF6 FFE9          	movff	tblptrl,fsr0l
  2013  0011AC  CFF7 FFEA          	movff	tblptrh,fsr0h
  2014  0011B0  50EF               	movf	indf0,w,c
  2015  0011B2                     u1190:
  2016  0011B2  6E07               	movwf	LCD_putch@data,c
  2017  0011B4  500E               	movf	LCD_puts@addr,w,c
  2018  0011B6  EC50  F009         	call	_LCD_putch
  2019  0011BA  4A0A               	infsnz	LCD_puts@s,f,c
  2020  0011BC  2A0B               	incf	LCD_puts@s+1,f,c
  2021  0011BE                     l1700:
  2022  0011BE  C00A  FFF6         	movff	LCD_puts@s,tblptrl
  2023  0011C2  C00B  FFF7         	movff	LCD_puts@s+1,tblptrh
  2024  0011C6  6AF8               	clrf	tblptru,c
  2025  0011C8  0E07               	movlw	(high __ramtop+-1)
  2026  0011CA  64F7               	cpfsgt	tblptrh,c
  2027  0011CC  D003               	bra	u1207
  2028  0011CE  0008               	tblrd		*
  2029  0011D0  50F5               	movf	tablat,w,c
  2030  0011D2  D005               	bra	u1200
  2031  0011D4                     u1207:
  2032  0011D4  CFF6 FFE9          	movff	tblptrl,fsr0l
  2033  0011D8  CFF7 FFEA          	movff	tblptrh,fsr0h
  2034  0011DC  50EF               	movf	indf0,w,c
  2035  0011DE                     u1200:
  2036  0011DE  0900               	iorlw	0
  2037  0011E0  B4D8               	btfsc	status,2,c
  2038  0011E2  0012               	return	
  2039  0011E4  D7D6               	goto	l1696
  2040  0011E6                     __end_of_LCD_puts:
  2041                           	opt stack 0
  2042                           tblptru	equ	0xFF8
  2043                           tblptrh	equ	0xFF7
  2044                           tblptrl	equ	0xFF6
  2045                           tablat	equ	0xFF5
  2046                           prodh	equ	0xFF4
  2047                           prodl	equ	0xFF3
  2048                           indf0	equ	0xFEF
  2049                           postinc0	equ	0xFEE
  2050                           fsr0h	equ	0xFEA
  2051                           fsr0l	equ	0xFE9
  2052                           wreg	equ	0xFE8
  2053                           indf2	equ	0xFDF
  2054                           postinc2	equ	0xFDE
  2055                           postdec2	equ	0xFDD
  2056                           fsr2h	equ	0xFDA
  2057                           fsr2l	equ	0xFD9
  2058                           status	equ	0xFD8
  2059                           
  2060 ;; *************** function _LCD_putch *****************
  2061 ;; Defined at:
  2062 ;;		line 50 in file "i2c_lcd.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  addr            1    wreg     unsigned char 
  2065 ;;  data            1    6[COMRAM] unsigned char 
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;  addr            1    7[COMRAM] unsigned char 
  2068 ;;  lcddata         1    8[COMRAM] unsigned char 
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  1    wreg      void 
  2071 ;; Registers used:
  2072 ;;		wreg, status,2, status,0, cstack
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2078 ;;      Params:         1       0       0       0       0       0       0       0       0
  2079 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2080 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2081 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2082 ;;Total ram usage:        3 bytes
  2083 ;; Hardware stack levels used:    1
  2084 ;; Hardware stack levels required when called:    3
  2085 ;; This function calls:
  2086 ;;		_I2C_PCF8574_Write
  2087 ;; This function is called by:
  2088 ;;		_LCD_puts
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           	psect	text10
  2093  0012A0                     __ptext10:
  2094                           	opt stack 0
  2095  0012A0                     _LCD_putch:
  2096                           	opt stack 24
  2097                           
  2098                           ;incstack = 0
  2099                           ;LCD_putch@addr stored from wreg
  2100  0012A0  6E08               	movwf	LCD_putch@addr,c
  2101                           
  2102                           ;i2c_lcd.c: 52: unsigned char lcddata;
  2103                           ;i2c_lcd.c: 53: lcddata = (data & 0xF0)|0x08|0x01;
  2104  0012A2  5007               	movf	LCD_putch@data,w,c
  2105  0012A4  0BF0               	andlw	240
  2106  0012A6  0909               	iorlw	9
  2107  0012A8  6E09               	movwf	LCD_putch@lcddata,c
  2108                           
  2109                           ;i2c_lcd.c: 54: I2C_PCF8574_Write(addr,lcddata | 0x04);
  2110  0012AA  5009               	movf	LCD_putch@lcddata,w,c
  2111  0012AC  0904               	iorlw	4
  2112  0012AE  6E03               	movwf	I2C_PCF8574_Write@value,c
  2113  0012B0  5008               	movf	LCD_putch@addr,w,c
  2114  0012B2  ECB4  F009         	call	_I2C_PCF8574_Write
  2115                           
  2116                           ;i2c_lcd.c: 55: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  2117  0012B6  5009               	movf	LCD_putch@lcddata,w,c
  2118  0012B8  0BFB               	andlw	251
  2119  0012BA  6E03               	movwf	I2C_PCF8574_Write@value,c
  2120  0012BC  5008               	movf	LCD_putch@addr,w,c
  2121  0012BE  ECB4  F009         	call	_I2C_PCF8574_Write
  2122                           
  2123                           ;i2c_lcd.c: 56: lcddata = ((data << 4) & 0xF0)|0x08|0x01;
  2124  0012C2  3807               	swapf	LCD_putch@data,w,c
  2125  0012C4  0BF0               	andlw	240
  2126  0012C6  0BF0               	andlw	240
  2127  0012C8  0909               	iorlw	9
  2128  0012CA  6E09               	movwf	LCD_putch@lcddata,c
  2129                           
  2130                           ;i2c_lcd.c: 57: I2C_PCF8574_Write(addr,lcddata | 0x04);
  2131  0012CC  5009               	movf	LCD_putch@lcddata,w,c
  2132  0012CE  0904               	iorlw	4
  2133  0012D0  6E03               	movwf	I2C_PCF8574_Write@value,c
  2134  0012D2  5008               	movf	LCD_putch@addr,w,c
  2135  0012D4  ECB4  F009         	call	_I2C_PCF8574_Write
  2136                           
  2137                           ;i2c_lcd.c: 58: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  2138  0012D8  5009               	movf	LCD_putch@lcddata,w,c
  2139  0012DA  0BFB               	andlw	251
  2140  0012DC  6E03               	movwf	I2C_PCF8574_Write@value,c
  2141  0012DE  5008               	movf	LCD_putch@addr,w,c
  2142  0012E0  ECB4  F009         	call	_I2C_PCF8574_Write
  2143  0012E4  0012               	return		;funcret
  2144  0012E6                     __end_of_LCD_putch:
  2145                           	opt stack 0
  2146                           tblptru	equ	0xFF8
  2147                           tblptrh	equ	0xFF7
  2148                           tblptrl	equ	0xFF6
  2149                           tablat	equ	0xFF5
  2150                           prodh	equ	0xFF4
  2151                           prodl	equ	0xFF3
  2152                           indf0	equ	0xFEF
  2153                           postinc0	equ	0xFEE
  2154                           fsr0h	equ	0xFEA
  2155                           fsr0l	equ	0xFE9
  2156                           wreg	equ	0xFE8
  2157                           indf2	equ	0xFDF
  2158                           postinc2	equ	0xFDE
  2159                           postdec2	equ	0xFDD
  2160                           fsr2h	equ	0xFDA
  2161                           fsr2l	equ	0xFD9
  2162                           status	equ	0xFD8
  2163                           
  2164 ;; *************** function _LCD_goto *****************
  2165 ;; Defined at:
  2166 ;;		line 80 in file "i2c_lcd.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;  addr            1    wreg     unsigned char 
  2169 ;;  row             1   11[COMRAM] unsigned char 
  2170 ;;  column          1   12[COMRAM] unsigned char 
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  addr            1   13[COMRAM] unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, status,2, status,0, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2182 ;;      Params:         2       0       0       0       0       0       0       0       0
  2183 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2185 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2186 ;;Total ram usage:        3 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    4
  2189 ;; This function calls:
  2190 ;;		_LCD_putcmd
  2191 ;; This function is called by:
  2192 ;;		_keyNumber
  2193 ;;		_riksFactors
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text11
  2198  0010A6                     __ptext11:
  2199                           	opt stack 0
  2200  0010A6                     _LCD_goto:
  2201                           	opt stack 24
  2202                           
  2203                           ;incstack = 0
  2204                           ;LCD_goto@addr stored from wreg
  2205  0010A6  6E0E               	movwf	LCD_goto@addr,c
  2206                           
  2207                           ;i2c_lcd.c: 81: switch(row){
  2208  0010A8  D02D               	goto	l1692
  2209  0010AA                     l1680:
  2210  0010AA  500D               	movf	LCD_goto@column,w,c
  2211  0010AC  0F7F               	addlw	127
  2212  0010AE  6E07               	movwf	LCD_putcmd@data,c
  2213  0010B0  0E01               	movlw	1
  2214  0010B2  6E08               	movwf	LCD_putcmd@cmdtype,c
  2215  0010B4  500E               	movf	LCD_goto@addr,w,c
  2216  0010B6  EC22  F009         	call	_LCD_putcmd
  2217  0010BA  0012               	return	
  2218  0010BC                     l1682:
  2219  0010BC  500D               	movf	LCD_goto@column,w,c
  2220  0010BE  0FBF               	addlw	191
  2221  0010C0  6E07               	movwf	LCD_putcmd@data,c
  2222  0010C2  0E01               	movlw	1
  2223  0010C4  6E08               	movwf	LCD_putcmd@cmdtype,c
  2224  0010C6  500E               	movf	LCD_goto@addr,w,c
  2225  0010C8  EC22  F009         	call	_LCD_putcmd
  2226  0010CC  0012               	return	
  2227  0010CE                     l1684:
  2228  0010CE  500D               	movf	LCD_goto@column,w,c
  2229  0010D0  0F93               	addlw	147
  2230  0010D2  6E07               	movwf	LCD_putcmd@data,c
  2231  0010D4  0E01               	movlw	1
  2232  0010D6  6E08               	movwf	LCD_putcmd@cmdtype,c
  2233  0010D8  500E               	movf	LCD_goto@addr,w,c
  2234  0010DA  EC22  F009         	call	_LCD_putcmd
  2235  0010DE  0012               	return	
  2236  0010E0                     l1686:
  2237  0010E0  500D               	movf	LCD_goto@column,w,c
  2238  0010E2  0FD3               	addlw	211
  2239  0010E4  6E07               	movwf	LCD_putcmd@data,c
  2240  0010E6  0E01               	movlw	1
  2241  0010E8  6E08               	movwf	LCD_putcmd@cmdtype,c
  2242  0010EA  500E               	movf	LCD_goto@addr,w,c
  2243  0010EC  EC22  F009         	call	_LCD_putcmd
  2244  0010F0  0012               	return	
  2245  0010F2                     l1688:
  2246  0010F2  500D               	movf	LCD_goto@column,w,c
  2247  0010F4  0F7F               	addlw	127
  2248  0010F6  6E07               	movwf	LCD_putcmd@data,c
  2249  0010F8  0E01               	movlw	1
  2250  0010FA  6E08               	movwf	LCD_putcmd@cmdtype,c
  2251  0010FC  500E               	movf	LCD_goto@addr,w,c
  2252  0010FE  EC22  F009         	call	_LCD_putcmd
  2253                           
  2254                           ;i2c_lcd.c: 87: }
  2255  001102  0012               	return	
  2256  001104                     l1692:
  2257  001104  500C               	movf	LCD_goto@row,w,c
  2258                           
  2259                           ; Switch size 1, requested type "space"
  2260                           ; Number of cases is 4, Range of values is 1 to 4
  2261                           ; switch strategies available:
  2262                           ; Name         Instructions Cycles
  2263                           ; simple_byte           13     7 (average)
  2264                           ;	Chosen strategy is simple_byte
  2265  001106  0A01               	xorlw	1	; case 1
  2266  001108  B4D8               	btfsc	status,2,c
  2267  00110A  D7CF               	goto	l1680
  2268  00110C  0A03               	xorlw	3	; case 2
  2269  00110E  B4D8               	btfsc	status,2,c
  2270  001110  D7D5               	goto	l1682
  2271  001112  0A01               	xorlw	1	; case 3
  2272  001114  B4D8               	btfsc	status,2,c
  2273  001116  D7DB               	goto	l1684
  2274  001118  0A07               	xorlw	7	; case 4
  2275  00111A  B4D8               	btfsc	status,2,c
  2276  00111C  D7E1               	goto	l1686
  2277  00111E  D7E9               	goto	l1688
  2278  001120                     __end_of_LCD_goto:
  2279                           	opt stack 0
  2280                           tblptru	equ	0xFF8
  2281                           tblptrh	equ	0xFF7
  2282                           tblptrl	equ	0xFF6
  2283                           tablat	equ	0xFF5
  2284                           prodh	equ	0xFF4
  2285                           prodl	equ	0xFF3
  2286                           indf0	equ	0xFEF
  2287                           postinc0	equ	0xFEE
  2288                           fsr0h	equ	0xFEA
  2289                           fsr0l	equ	0xFE9
  2290                           wreg	equ	0xFE8
  2291                           indf2	equ	0xFDF
  2292                           postinc2	equ	0xFDE
  2293                           postdec2	equ	0xFDD
  2294                           fsr2h	equ	0xFDA
  2295                           fsr2l	equ	0xFD9
  2296                           status	equ	0xFD8
  2297                           
  2298 ;; *************** function _KP_Readbutton *****************
  2299 ;; Defined at:
  2300 ;;		line 30 in file "KeyPad Library.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;		None
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;  key             1    8[COMRAM] unsigned char 
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  1    wreg      unsigned char 
  2307 ;; Registers used:
  2308 ;;		wreg, status,2, status,0, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2314 ;;      Params:         0       0       0       0       0       0       0       0       0
  2315 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2316 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2317 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2318 ;;Total ram usage:        1 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    1
  2321 ;; This function calls:
  2322 ;;		_KP_scan
  2323 ;; This function is called by:
  2324 ;;		_keyNumber
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           	psect	text12
  2329  000BC6                     __ptext12:
  2330                           	opt stack 0
  2331  000BC6                     _KP_Readbutton:
  2332                           	opt stack 27
  2333                           
  2334                           ;KeyPad Library.c: 32: char key = ',';
  2335                           
  2336                           ;incstack = 0
  2337  000BC6  0E2C               	movlw	44
  2338  000BC8  6E09               	movwf	KP_Readbutton@key,c
  2339                           
  2340                           ;KeyPad Library.c: 33: while(!((key = KP_scan()) == ','))
  2341  000BCA  D08F               	goto	l1672
  2342  000BCC                     l1576:
  2343                           
  2344                           ;KeyPad Library.c: 34: {
  2345                           ;KeyPad Library.c: 35: if(keynum == 1) { return key = '7'; }
  2346  000BCC  0432               	decf	_keynum,w,c
  2347  000BCE  1033               	iorwf	_keynum+1,w,c
  2348  000BD0  A4D8               	btfss	status,2,c
  2349  000BD2  D004               	goto	l1582
  2350  000BD4  0E37               	movlw	55
  2351  000BD6  6E09               	movwf	KP_Readbutton@key,c
  2352  000BD8  5009               	movf	KP_Readbutton@key,w,c
  2353  000BDA  0012               	return	
  2354  000BDC                     l1582:
  2355                           
  2356                           ;KeyPad Library.c: 36: if(keynum == 2) { return key = '8'; }
  2357  000BDC  0E02               	movlw	2
  2358  000BDE  1832               	xorwf	_keynum,w,c
  2359  000BE0  1033               	iorwf	_keynum+1,w,c
  2360  000BE2  A4D8               	btfss	status,2,c
  2361  000BE4  D004               	goto	l1588
  2362  000BE6  0E38               	movlw	56
  2363  000BE8  6E09               	movwf	KP_Readbutton@key,c
  2364  000BEA  5009               	movf	KP_Readbutton@key,w,c
  2365  000BEC  0012               	return	
  2366  000BEE                     l1588:
  2367                           
  2368                           ;KeyPad Library.c: 37: if(keynum == 3) { return key = '9'; }
  2369  000BEE  0E03               	movlw	3
  2370  000BF0  1832               	xorwf	_keynum,w,c
  2371  000BF2  1033               	iorwf	_keynum+1,w,c
  2372  000BF4  A4D8               	btfss	status,2,c
  2373  000BF6  D004               	goto	l1594
  2374  000BF8  0E39               	movlw	57
  2375  000BFA  6E09               	movwf	KP_Readbutton@key,c
  2376  000BFC  5009               	movf	KP_Readbutton@key,w,c
  2377  000BFE  0012               	return	
  2378  000C00                     l1594:
  2379                           
  2380                           ;KeyPad Library.c: 38: if(keynum == 4) { return key = '/'; }
  2381  000C00  0E04               	movlw	4
  2382  000C02  1832               	xorwf	_keynum,w,c
  2383  000C04  1033               	iorwf	_keynum+1,w,c
  2384  000C06  A4D8               	btfss	status,2,c
  2385  000C08  D004               	goto	l1600
  2386  000C0A  0E2F               	movlw	47
  2387  000C0C  6E09               	movwf	KP_Readbutton@key,c
  2388  000C0E  5009               	movf	KP_Readbutton@key,w,c
  2389  000C10  0012               	return	
  2390  000C12                     l1600:
  2391                           
  2392                           ;KeyPad Library.c: 39: if(keynum == 5) { return key = '4'; }
  2393  000C12  0E05               	movlw	5
  2394  000C14  1832               	xorwf	_keynum,w,c
  2395  000C16  1033               	iorwf	_keynum+1,w,c
  2396  000C18  A4D8               	btfss	status,2,c
  2397  000C1A  D004               	goto	l1606
  2398  000C1C  0E34               	movlw	52
  2399  000C1E  6E09               	movwf	KP_Readbutton@key,c
  2400  000C20  5009               	movf	KP_Readbutton@key,w,c
  2401  000C22  0012               	return	
  2402  000C24                     l1606:
  2403                           
  2404                           ;KeyPad Library.c: 40: if(keynum == 6) { return key = '5'; }
  2405  000C24  0E06               	movlw	6
  2406  000C26  1832               	xorwf	_keynum,w,c
  2407  000C28  1033               	iorwf	_keynum+1,w,c
  2408  000C2A  A4D8               	btfss	status,2,c
  2409  000C2C  D004               	goto	l1612
  2410  000C2E  0E35               	movlw	53
  2411  000C30  6E09               	movwf	KP_Readbutton@key,c
  2412  000C32  5009               	movf	KP_Readbutton@key,w,c
  2413  000C34  0012               	return	
  2414  000C36                     l1612:
  2415                           
  2416                           ;KeyPad Library.c: 41: if(keynum == 7) { return key = '6'; }
  2417  000C36  0E07               	movlw	7
  2418  000C38  1832               	xorwf	_keynum,w,c
  2419  000C3A  1033               	iorwf	_keynum+1,w,c
  2420  000C3C  A4D8               	btfss	status,2,c
  2421  000C3E  D004               	goto	l1618
  2422  000C40  0E36               	movlw	54
  2423  000C42  6E09               	movwf	KP_Readbutton@key,c
  2424  000C44  5009               	movf	KP_Readbutton@key,w,c
  2425  000C46  0012               	return	
  2426  000C48                     l1618:
  2427                           
  2428                           ;KeyPad Library.c: 42: if(keynum == 8) { return key = '*'; }
  2429  000C48  0E08               	movlw	8
  2430  000C4A  1832               	xorwf	_keynum,w,c
  2431  000C4C  1033               	iorwf	_keynum+1,w,c
  2432  000C4E  A4D8               	btfss	status,2,c
  2433  000C50  D004               	goto	l1624
  2434  000C52  0E2A               	movlw	42
  2435  000C54  6E09               	movwf	KP_Readbutton@key,c
  2436  000C56  5009               	movf	KP_Readbutton@key,w,c
  2437  000C58  0012               	return	
  2438  000C5A                     l1624:
  2439                           
  2440                           ;KeyPad Library.c: 43: if(keynum == 9) { return key = '1'; }
  2441  000C5A  0E09               	movlw	9
  2442  000C5C  1832               	xorwf	_keynum,w,c
  2443  000C5E  1033               	iorwf	_keynum+1,w,c
  2444  000C60  A4D8               	btfss	status,2,c
  2445  000C62  D004               	goto	l1630
  2446  000C64  0E31               	movlw	49
  2447  000C66  6E09               	movwf	KP_Readbutton@key,c
  2448  000C68  5009               	movf	KP_Readbutton@key,w,c
  2449  000C6A  0012               	return	
  2450  000C6C                     l1630:
  2451                           
  2452                           ;KeyPad Library.c: 44: if(keynum == 10){ return key = '2';}
  2453  000C6C  0E0A               	movlw	10
  2454  000C6E  1832               	xorwf	_keynum,w,c
  2455  000C70  1033               	iorwf	_keynum+1,w,c
  2456  000C72  A4D8               	btfss	status,2,c
  2457  000C74  D004               	goto	l1636
  2458  000C76  0E32               	movlw	50
  2459  000C78  6E09               	movwf	KP_Readbutton@key,c
  2460  000C7A  5009               	movf	KP_Readbutton@key,w,c
  2461  000C7C  0012               	return	
  2462  000C7E                     l1636:
  2463                           
  2464                           ;KeyPad Library.c: 45: if(keynum == 11){ return key = '3';}
  2465  000C7E  0E0B               	movlw	11
  2466  000C80  1832               	xorwf	_keynum,w,c
  2467  000C82  1033               	iorwf	_keynum+1,w,c
  2468  000C84  A4D8               	btfss	status,2,c
  2469  000C86  D004               	goto	l1642
  2470  000C88  0E33               	movlw	51
  2471  000C8A  6E09               	movwf	KP_Readbutton@key,c
  2472  000C8C  5009               	movf	KP_Readbutton@key,w,c
  2473  000C8E  0012               	return	
  2474  000C90                     l1642:
  2475                           
  2476                           ;KeyPad Library.c: 46: if(keynum == 12){ return key = '-';}
  2477  000C90  0E0C               	movlw	12
  2478  000C92  1832               	xorwf	_keynum,w,c
  2479  000C94  1033               	iorwf	_keynum+1,w,c
  2480  000C96  A4D8               	btfss	status,2,c
  2481  000C98  D004               	goto	l1648
  2482  000C9A  0E2D               	movlw	45
  2483  000C9C  6E09               	movwf	KP_Readbutton@key,c
  2484  000C9E  5009               	movf	KP_Readbutton@key,w,c
  2485  000CA0  0012               	return	
  2486  000CA2                     l1648:
  2487                           
  2488                           ;KeyPad Library.c: 47: if(keynum == 13){ return key = 'd';}
  2489  000CA2  0E0D               	movlw	13
  2490  000CA4  1832               	xorwf	_keynum,w,c
  2491  000CA6  1033               	iorwf	_keynum+1,w,c
  2492  000CA8  A4D8               	btfss	status,2,c
  2493  000CAA  D004               	goto	l1654
  2494  000CAC  0E64               	movlw	100
  2495  000CAE  6E09               	movwf	KP_Readbutton@key,c
  2496  000CB0  5009               	movf	KP_Readbutton@key,w,c
  2497  000CB2  0012               	return	
  2498  000CB4                     l1654:
  2499                           
  2500                           ;KeyPad Library.c: 48: if(keynum == 14){ return key = '0';}
  2501  000CB4  0E0E               	movlw	14
  2502  000CB6  1832               	xorwf	_keynum,w,c
  2503  000CB8  1033               	iorwf	_keynum+1,w,c
  2504  000CBA  A4D8               	btfss	status,2,c
  2505  000CBC  D004               	goto	l1660
  2506  000CBE  0E30               	movlw	48
  2507  000CC0  6E09               	movwf	KP_Readbutton@key,c
  2508  000CC2  5009               	movf	KP_Readbutton@key,w,c
  2509  000CC4  0012               	return	
  2510  000CC6                     l1660:
  2511                           
  2512                           ;KeyPad Library.c: 49: if(keynum == 15){ return key = '=';}
  2513  000CC6  0E0F               	movlw	15
  2514  000CC8  1832               	xorwf	_keynum,w,c
  2515  000CCA  1033               	iorwf	_keynum+1,w,c
  2516  000CCC  A4D8               	btfss	status,2,c
  2517  000CCE  D004               	goto	l1666
  2518  000CD0  0E3D               	movlw	61
  2519  000CD2  6E09               	movwf	KP_Readbutton@key,c
  2520  000CD4  5009               	movf	KP_Readbutton@key,w,c
  2521  000CD6  0012               	return	
  2522  000CD8                     l1666:
  2523                           
  2524                           ;KeyPad Library.c: 50: if(keynum == 16){ return key = '+';}
  2525  000CD8  0E10               	movlw	16
  2526  000CDA  1832               	xorwf	_keynum,w,c
  2527  000CDC  1033               	iorwf	_keynum+1,w,c
  2528  000CDE  A4D8               	btfss	status,2,c
  2529  000CE0  D004               	goto	l1672
  2530  000CE2  0E2B               	movlw	43
  2531  000CE4  6E09               	movwf	KP_Readbutton@key,c
  2532  000CE6  5009               	movf	KP_Readbutton@key,w,c
  2533  000CE8  0012               	return	
  2534  000CEA                     l1672:
  2535  000CEA  EC7F  F006         	call	_KP_scan	;wreg free
  2536  000CEE  5001               	movf	?_KP_scan,w,c
  2537  000CF0  6E09               	movwf	KP_Readbutton@key,c
  2538  000CF2  0E2C               	movlw	44
  2539  000CF4  1809               	xorwf	KP_Readbutton@key,w,c
  2540  000CF6  A4D8               	btfss	status,2,c
  2541  000CF8  D769               	goto	l1576
  2542                           
  2543                           ;KeyPad Library.c: 51: }
  2544                           ;KeyPad Library.c: 52: return key;
  2545  000CFA  5009               	movf	KP_Readbutton@key,w,c
  2546  000CFC  0012               	return	
  2547  000CFE                     __end_of_KP_Readbutton:
  2548                           	opt stack 0
  2549                           tblptru	equ	0xFF8
  2550                           tblptrh	equ	0xFF7
  2551                           tblptrl	equ	0xFF6
  2552                           tablat	equ	0xFF5
  2553                           prodh	equ	0xFF4
  2554                           prodl	equ	0xFF3
  2555                           indf0	equ	0xFEF
  2556                           postinc0	equ	0xFEE
  2557                           fsr0h	equ	0xFEA
  2558                           fsr0l	equ	0xFE9
  2559                           wreg	equ	0xFE8
  2560                           indf2	equ	0xFDF
  2561                           postinc2	equ	0xFDE
  2562                           postdec2	equ	0xFDD
  2563                           fsr2h	equ	0xFDA
  2564                           fsr2l	equ	0xFD9
  2565                           status	equ	0xFD8
  2566                           
  2567 ;; *************** function _KP_scan *****************
  2568 ;; Defined at:
  2569 ;;		line 12 in file "KeyPad Library.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;		None
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;  row             2    6[COMRAM] short 
  2574 ;;  press           2    4[COMRAM] short 
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  2    0[COMRAM] int 
  2577 ;; Registers used:
  2578 ;;		wreg, status,2, status,0
  2579 ;; Tracked objects:
  2580 ;;		On entry : 0/0
  2581 ;;		On exit  : 0/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2584 ;;      Params:         2       0       0       0       0       0       0       0       0
  2585 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2586 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2587 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2588 ;;Total ram usage:        8 bytes
  2589 ;; Hardware stack levels used:    1
  2590 ;; This function calls:
  2591 ;;		Nothing
  2592 ;; This function is called by:
  2593 ;;		_KP_Readbutton
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text13
  2598  000CFE                     __ptext13:
  2599                           	opt stack 0
  2600  000CFE                     _KP_scan:
  2601                           	opt stack 27
  2602                           
  2603                           ;KeyPad Library.c: 14: short row,press = 0;
  2604                           
  2605                           ;incstack = 0
  2606  000CFE  0E00               	movlw	0
  2607  000D00  6E06               	movwf	KP_scan@press+1,c
  2608  000D02  0E00               	movlw	0
  2609  000D04  6E05               	movwf	KP_scan@press,c
  2610                           
  2611                           ;KeyPad Library.c: 15: keynum = 0;
  2612  000D06  0E00               	movlw	0
  2613  000D08  6E33               	movwf	_keynum+1,c
  2614  000D0A  0E00               	movlw	0
  2615  000D0C  6E32               	movwf	_keynum,c
  2616                           
  2617                           ;KeyPad Library.c: 16: for(row = 0; row < 4; row++)
  2618  000D0E  0E00               	movlw	0
  2619  000D10  6E08               	movwf	KP_scan@row+1,c
  2620  000D12  0E00               	movlw	0
  2621  000D14  6E07               	movwf	KP_scan@row,c
  2622  000D16  BE08               	btfsc	KP_scan@row+1,7,c
  2623  000D18  D006               	goto	l1478
  2624  000D1A  5008               	movf	KP_scan@row+1,w,c
  2625  000D1C  E165               	bnz	l1526
  2626  000D1E  0E04               	movlw	4
  2627  000D20  5C07               	subwf	KP_scan@row,w,c
  2628  000D22  B0D8               	btfsc	status,0,c
  2629  000D24  D061               	goto	l1526
  2630  000D26                     l1478:
  2631                           
  2632                           ;KeyPad Library.c: 17: {
  2633                           ;KeyPad Library.c: 18: LATD = (0x10<<row);
  2634  000D26  C007  F003         	movff	KP_scan@row,??_KP_scan
  2635  000D2A  0E10               	movlw	16
  2636  000D2C  6E04               	movwf	(??_KP_scan+1)& (0+255),c
  2637  000D2E  2A03               	incf	??_KP_scan,f,c
  2638  000D30  D002               	goto	u884
  2639  000D32                     u885:
  2640  000D32  90D8               	bcf	status,0,c
  2641  000D34  3604               	rlcf	??_KP_scan+1,f,c
  2642  000D36                     u884:
  2643  000D36  2E03               	decfsz	??_KP_scan,f,c
  2644  000D38  D7FC               	goto	u885
  2645  000D3A  5004               	movf	??_KP_scan+1,w,c
  2646  000D3C  6E8C               	movwf	3980,c	;volatile
  2647                           
  2648                           ;KeyPad Library.c: 20: if(PORTDbits.RD0 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD0 == 1); return keynum+=1; press = 1;}
  2649  000D3E  A083               	btfss	3971,0,c	;volatile
  2650  000D40  D010               	goto	l1490
  2651  000D42  0EE4               	movlw	228
  2652  000D44                     u1447:
  2653  000D44  D000               	nop2	
  2654  000D46  D000               	nop2	
  2655  000D48  2EE8               	decfsz	wreg,f,c
  2656  000D4A  D7FC               	bra	u1447
  2657  000D4C  D000               	nop2	
  2658  000D4E  D000               	nop2	
  2659  000D50                     l19:
  2660  000D50  B083               	btfsc	3971,0,c	;volatile
  2661  000D52  D7FE               	goto	l19
  2662  000D54  4A32               	infsnz	_keynum,f,c
  2663  000D56  2A33               	incf	_keynum+1,f,c
  2664  000D58  C032  F001         	movff	_keynum,?_KP_scan
  2665  000D5C  C033  F002         	movff	_keynum+1,?_KP_scan+1
  2666  000D60  0012               	return	
  2667  000D62                     l1490:
  2668                           
  2669                           ;KeyPad Library.c: 21: if(PORTDbits.RD1 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD1 == 1); return keynum+=2; press = 1;}
  2670  000D62  A283               	btfss	3971,1,c	;volatile
  2671  000D64  D012               	goto	l1500
  2672  000D66  0EE4               	movlw	228
  2673  000D68                     u1457:
  2674  000D68  D000               	nop2	
  2675  000D6A  D000               	nop2	
  2676  000D6C  2EE8               	decfsz	wreg,f,c
  2677  000D6E  D7FC               	bra	u1457
  2678  000D70  D000               	nop2	
  2679  000D72  D000               	nop2	
  2680  000D74                     l24:
  2681  000D74  B283               	btfsc	3971,1,c	;volatile
  2682  000D76  D7FE               	goto	l24
  2683  000D78  0E02               	movlw	2
  2684  000D7A  2632               	addwf	_keynum,f,c
  2685  000D7C  0E00               	movlw	0
  2686  000D7E  2233               	addwfc	_keynum+1,f,c
  2687  000D80  C032  F001         	movff	_keynum,?_KP_scan
  2688  000D84  C033  F002         	movff	_keynum+1,?_KP_scan+1
  2689  000D88  0012               	return	
  2690  000D8A                     l1500:
  2691                           
  2692                           ;KeyPad Library.c: 22: if(PORTDbits.RD2 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD2 == 1); return keynum+=3; press = 1;}
  2693  000D8A  A483               	btfss	3971,2,c	;volatile
  2694  000D8C  D012               	goto	l1510
  2695  000D8E  0EE4               	movlw	228
  2696  000D90                     u1467:
  2697  000D90  D000               	nop2	
  2698  000D92  D000               	nop2	
  2699  000D94  2EE8               	decfsz	wreg,f,c
  2700  000D96  D7FC               	bra	u1467
  2701  000D98  D000               	nop2	
  2702  000D9A  D000               	nop2	
  2703  000D9C                     l28:
  2704  000D9C  B483               	btfsc	3971,2,c	;volatile
  2705  000D9E  D7FE               	goto	l28
  2706  000DA0  0E03               	movlw	3
  2707  000DA2  2632               	addwf	_keynum,f,c
  2708  000DA4  0E00               	movlw	0
  2709  000DA6  2233               	addwfc	_keynum+1,f,c
  2710  000DA8  C032  F001         	movff	_keynum,?_KP_scan
  2711  000DAC  C033  F002         	movff	_keynum+1,?_KP_scan+1
  2712  000DB0  0012               	return	
  2713  000DB2                     l1510:
  2714                           
  2715                           ;KeyPad Library.c: 23: if(PORTDbits.RD3 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD3 == 1); return keynum+=4; press = 1;}
  2716  000DB2  A683               	btfss	3971,3,c	;volatile
  2717  000DB4  D012               	goto	l1520
  2718  000DB6  0EE4               	movlw	228
  2719  000DB8                     u1477:
  2720  000DB8  D000               	nop2	
  2721  000DBA  D000               	nop2	
  2722  000DBC  2EE8               	decfsz	wreg,f,c
  2723  000DBE  D7FC               	bra	u1477
  2724  000DC0  D000               	nop2	
  2725  000DC2  D000               	nop2	
  2726  000DC4                     l32:
  2727  000DC4  B683               	btfsc	3971,3,c	;volatile
  2728  000DC6  D7FE               	goto	l32
  2729  000DC8  0E04               	movlw	4
  2730  000DCA  2632               	addwf	_keynum,f,c
  2731  000DCC  0E00               	movlw	0
  2732  000DCE  2233               	addwfc	_keynum+1,f,c
  2733  000DD0  C032  F001         	movff	_keynum,?_KP_scan
  2734  000DD4  C033  F002         	movff	_keynum+1,?_KP_scan+1
  2735  000DD8  0012               	return	
  2736  000DDA                     l1520:
  2737                           
  2738                           ;KeyPad Library.c: 25: keynum +=4;
  2739  000DDA  0E04               	movlw	4
  2740  000DDC  2632               	addwf	_keynum,f,c
  2741  000DDE  0E00               	movlw	0
  2742  000DE0  2233               	addwfc	_keynum+1,f,c
  2743  000DE2  4A07               	infsnz	KP_scan@row,f,c
  2744  000DE4  2A08               	incf	KP_scan@row+1,f,c
  2745  000DE6  D797               	goto	L3
  2746  000DE8                     l1526:
  2747                           
  2748                           ;KeyPad Library.c: 26: }
  2749                           ;KeyPad Library.c: 27: if(press == 0) keynum = 0;
  2750  000DE8  5005               	movf	KP_scan@press,w,c
  2751  000DEA  1006               	iorwf	KP_scan@press+1,w,c
  2752  000DEC  A4D8               	btfss	status,2,c
  2753  000DEE  0012               	return	
  2754  000DF0  0E00               	movlw	0
  2755  000DF2  6E33               	movwf	_keynum+1,c
  2756  000DF4  0E00               	movlw	0
  2757  000DF6  6E32               	movwf	_keynum,c
  2758  000DF8  0012               	return	
  2759  000DFA                     __end_of_KP_scan:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           prodh	equ	0xFF4
  2766                           prodl	equ	0xFF3
  2767                           indf0	equ	0xFEF
  2768                           postinc0	equ	0xFEE
  2769                           fsr0h	equ	0xFEA
  2770                           fsr0l	equ	0xFE9
  2771                           wreg	equ	0xFE8
  2772                           indf2	equ	0xFDF
  2773                           postinc2	equ	0xFDE
  2774                           postdec2	equ	0xFDD
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _OpenI2C *****************
  2780 ;; Defined at:
  2781 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_open.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;  sync_mode       1    wreg     unsigned char 
  2784 ;;  slew            1    0[COMRAM] unsigned char 
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  sync_mode       1    1[COMRAM] unsigned char 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      void 
  2789 ;; Registers used:
  2790 ;;		wreg, status,2, status,0
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2796 ;;      Params:         1       0       0       0       0       0       0       0       0
  2797 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2798 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2799 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2800 ;;Total ram usage:        2 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_main
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text14
  2810  0013A6                     __ptext14:
  2811                           	opt stack 0
  2812  0013A6                     _OpenI2C:
  2813                           	opt stack 30
  2814                           
  2815                           ;incstack = 0
  2816                           ;OpenI2C@sync_mode stored from wreg
  2817  0013A6  6E02               	movwf	OpenI2C@sync_mode,c
  2818  0013A8  0E3F               	movlw	63
  2819  0013AA  16C7               	andwf	4039,f,c	;volatile
  2820  0013AC  0E00               	movlw	0
  2821  0013AE  6EC6               	movwf	4038,c	;volatile
  2822  0013B0  0E00               	movlw	0
  2823  0013B2  6EC5               	movwf	4037,c	;volatile
  2824  0013B4  5002               	movf	OpenI2C@sync_mode,w,c
  2825  0013B6  12C6               	iorwf	4038,f,c	;volatile
  2826  0013B8  5001               	movf	OpenI2C@slew,w,c
  2827  0013BA  12C7               	iorwf	4039,f,c	;volatile
  2828  0013BC  8293               	bsf	3987,1,c	;volatile
  2829  0013BE  8093               	bsf	3987,0,c	;volatile
  2830  0013C0  8AC6               	bsf	4038,5,c	;volatile
  2831  0013C2  0012               	return		;funcret
  2832  0013C4                     __end_of_OpenI2C:
  2833                           	opt stack 0
  2834                           tblptru	equ	0xFF8
  2835                           tblptrh	equ	0xFF7
  2836                           tblptrl	equ	0xFF6
  2837                           tablat	equ	0xFF5
  2838                           prodh	equ	0xFF4
  2839                           prodl	equ	0xFF3
  2840                           indf0	equ	0xFEF
  2841                           postinc0	equ	0xFEE
  2842                           fsr0h	equ	0xFEA
  2843                           fsr0l	equ	0xFE9
  2844                           wreg	equ	0xFE8
  2845                           indf2	equ	0xFDF
  2846                           postinc2	equ	0xFDE
  2847                           postdec2	equ	0xFDD
  2848                           fsr2h	equ	0xFDA
  2849                           fsr2l	equ	0xFD9
  2850                           status	equ	0xFD8
  2851                           
  2852 ;; *************** function _LCD_init *****************
  2853 ;; Defined at:
  2854 ;;		line 63 in file "i2c_lcd.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;  addr            1    wreg     unsigned char 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  addr            1   12[COMRAM] unsigned char 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2, status,0, cstack
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2868 ;;      Params:         0       0       0       0       0       0       0       0       0
  2869 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2870 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2871 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2872 ;;Total ram usage:        2 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    4
  2875 ;; This function calls:
  2876 ;;		_LCD_putcmd
  2877 ;; This function is called by:
  2878 ;;		_main
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text15
  2883  000F86                     __ptext15:
  2884                           	opt stack 0
  2885  000F86                     _LCD_init:
  2886                           	opt stack 26
  2887                           
  2888                           ;incstack = 0
  2889                           ;LCD_init@addr stored from wreg
  2890  000F86  6E0D               	movwf	LCD_init@addr,c
  2891                           
  2892                           ;i2c_lcd.c: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
  2893  000F88  0E34               	movlw	52
  2894  000F8A  6E0C               	movwf	??_LCD_init& (0+255),c
  2895  000F8C  0EF2               	movlw	242
  2896  000F8E                     u1487:
  2897  000F8E  2EE8               	decfsz	wreg,f,c
  2898  000F90  D7FE               	bra	u1487
  2899  000F92  2E0C               	decfsz	??_LCD_init& (0+255),f,c
  2900  000F94  D7FC               	bra	u1487
  2901                           
  2902                           ;i2c_lcd.c: 67: LCD_putcmd(addr, 0x30,0);_delay((unsigned long)((5)*(8000000/4000.0)));
  2903  000F96  0E30               	movlw	48
  2904  000F98  6E07               	movwf	LCD_putcmd@data,c
  2905  000F9A  0E00               	movlw	0
  2906  000F9C  6E08               	movwf	LCD_putcmd@cmdtype,c
  2907  000F9E  500D               	movf	LCD_init@addr,w,c
  2908  000FA0  EC22  F009         	call	_LCD_putcmd
  2909  000FA4  0E0D               	movlw	13
  2910  000FA6  6E0C               	movwf	??_LCD_init& (0+255),c
  2911  000FA8  0EFC               	movlw	252
  2912  000FAA                     u1497:
  2913  000FAA  2EE8               	decfsz	wreg,f,c
  2914  000FAC  D7FE               	bra	u1497
  2915  000FAE  2E0C               	decfsz	??_LCD_init& (0+255),f,c
  2916  000FB0  D7FC               	bra	u1497
  2917                           
  2918                           ;i2c_lcd.c: 68: LCD_putcmd(addr, 0x30,0);
  2919  000FB2  0E30               	movlw	48
  2920  000FB4  6E07               	movwf	LCD_putcmd@data,c
  2921  000FB6  0E00               	movlw	0
  2922  000FB8  6E08               	movwf	LCD_putcmd@cmdtype,c
  2923  000FBA  500D               	movf	LCD_init@addr,w,c
  2924  000FBC  EC22  F009         	call	_LCD_putcmd
  2925                           
  2926                           ;i2c_lcd.c: 69: LCD_putcmd(addr, 0x30,0);
  2927  000FC0  0E30               	movlw	48
  2928  000FC2  6E07               	movwf	LCD_putcmd@data,c
  2929  000FC4  0E00               	movlw	0
  2930  000FC6  6E08               	movwf	LCD_putcmd@cmdtype,c
  2931  000FC8  500D               	movf	LCD_init@addr,w,c
  2932  000FCA  EC22  F009         	call	_LCD_putcmd
  2933                           
  2934                           ;i2c_lcd.c: 70: LCD_putcmd(addr, 0x20,0);
  2935  000FCE  0E20               	movlw	32
  2936  000FD0  6E07               	movwf	LCD_putcmd@data,c
  2937  000FD2  0E00               	movlw	0
  2938  000FD4  6E08               	movwf	LCD_putcmd@cmdtype,c
  2939  000FD6  500D               	movf	LCD_init@addr,w,c
  2940  000FD8  EC22  F009         	call	_LCD_putcmd
  2941                           
  2942                           ;i2c_lcd.c: 71: LCD_putcmd(addr, 0x28,1);
  2943  000FDC  0E28               	movlw	40
  2944  000FDE  6E07               	movwf	LCD_putcmd@data,c
  2945  000FE0  0E01               	movlw	1
  2946  000FE2  6E08               	movwf	LCD_putcmd@cmdtype,c
  2947  000FE4  500D               	movf	LCD_init@addr,w,c
  2948  000FE6  EC22  F009         	call	_LCD_putcmd
  2949                           
  2950                           ;i2c_lcd.c: 72: LCD_putcmd(addr, 0x08,1);
  2951  000FEA  0E08               	movlw	8
  2952  000FEC  6E07               	movwf	LCD_putcmd@data,c
  2953  000FEE  0E01               	movlw	1
  2954  000FF0  6E08               	movwf	LCD_putcmd@cmdtype,c
  2955  000FF2  500D               	movf	LCD_init@addr,w,c
  2956  000FF4  EC22  F009         	call	_LCD_putcmd
  2957                           
  2958                           ;i2c_lcd.c: 73: LCD_putcmd(addr, 0x01,1);
  2959  000FF8  0E01               	movlw	1
  2960  000FFA  6E07               	movwf	LCD_putcmd@data,c
  2961  000FFC  0E01               	movlw	1
  2962  000FFE  6E08               	movwf	LCD_putcmd@cmdtype,c
  2963  001000  500D               	movf	LCD_init@addr,w,c
  2964  001002  EC22  F009         	call	_LCD_putcmd
  2965                           
  2966                           ;i2c_lcd.c: 74: LCD_putcmd(addr, 0x06,1);
  2967  001006  0E06               	movlw	6
  2968  001008  6E07               	movwf	LCD_putcmd@data,c
  2969  00100A  0E01               	movlw	1
  2970  00100C  6E08               	movwf	LCD_putcmd@cmdtype,c
  2971  00100E  500D               	movf	LCD_init@addr,w,c
  2972  001010  EC22  F009         	call	_LCD_putcmd
  2973                           
  2974                           ;i2c_lcd.c: 75: LCD_putcmd(addr, 0x0c,1);
  2975  001014  0E0C               	movlw	12
  2976  001016  6E07               	movwf	LCD_putcmd@data,c
  2977  001018  0E01               	movlw	1
  2978  00101A  6E08               	movwf	LCD_putcmd@cmdtype,c
  2979  00101C  500D               	movf	LCD_init@addr,w,c
  2980  00101E  EC22  F009         	call	_LCD_putcmd
  2981  001022  0012               	return		;funcret
  2982  001024                     __end_of_LCD_init:
  2983                           	opt stack 0
  2984                           tblptru	equ	0xFF8
  2985                           tblptrh	equ	0xFF7
  2986                           tblptrl	equ	0xFF6
  2987                           tablat	equ	0xFF5
  2988                           prodh	equ	0xFF4
  2989                           prodl	equ	0xFF3
  2990                           indf0	equ	0xFEF
  2991                           postinc0	equ	0xFEE
  2992                           fsr0h	equ	0xFEA
  2993                           fsr0l	equ	0xFE9
  2994                           wreg	equ	0xFE8
  2995                           indf2	equ	0xFDF
  2996                           postinc2	equ	0xFDE
  2997                           postdec2	equ	0xFDD
  2998                           fsr2h	equ	0xFDA
  2999                           fsr2l	equ	0xFD9
  3000                           status	equ	0xFD8
  3001                           
  3002 ;; *************** function _LCD_putcmd *****************
  3003 ;; Defined at:
  3004 ;;		line 29 in file "i2c_lcd.c"
  3005 ;; Parameters:    Size  Location     Type
  3006 ;;  addr            1    wreg     unsigned char 
  3007 ;;  data            1    6[COMRAM] unsigned char 
  3008 ;;  cmdtype         1    7[COMRAM] unsigned char 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  addr            1    9[COMRAM] unsigned char 
  3011 ;;  lcddata         1   10[COMRAM] unsigned char 
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  1    wreg      void 
  3014 ;; Registers used:
  3015 ;;		wreg, status,2, status,0, cstack
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3021 ;;      Params:         2       0       0       0       0       0       0       0       0
  3022 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3023 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3024 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3025 ;;Total ram usage:        5 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:    3
  3028 ;; This function calls:
  3029 ;;		_I2C_PCF8574_Write
  3030 ;; This function is called by:
  3031 ;;		_LCD_init
  3032 ;;		_LCD_goto
  3033 ;;		_main
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text16
  3038  001244                     __ptext16:
  3039                           	opt stack 0
  3040  001244                     _LCD_putcmd:
  3041                           	opt stack 24
  3042                           
  3043                           ;incstack = 0
  3044                           ;LCD_putcmd@addr stored from wreg
  3045  001244  6E0A               	movwf	LCD_putcmd@addr,c
  3046                           
  3047                           ;i2c_lcd.c: 31: unsigned char lcddata;
  3048                           ;i2c_lcd.c: 34: lcddata = (data & 0xF0)|0x08;
  3049  001246  5007               	movf	LCD_putcmd@data,w,c
  3050  001248  0BF0               	andlw	240
  3051  00124A  0908               	iorlw	8
  3052  00124C  6E0B               	movwf	LCD_putcmd@lcddata,c
  3053                           
  3054                           ;i2c_lcd.c: 35: I2C_PCF8574_Write(addr,lcddata | 0x04);
  3055  00124E  500B               	movf	LCD_putcmd@lcddata,w,c
  3056  001250  0904               	iorlw	4
  3057  001252  6E03               	movwf	I2C_PCF8574_Write@value,c
  3058  001254  500A               	movf	LCD_putcmd@addr,w,c
  3059  001256  ECB4  F009         	call	_I2C_PCF8574_Write
  3060                           
  3061                           ;i2c_lcd.c: 36: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  3062  00125A  500B               	movf	LCD_putcmd@lcddata,w,c
  3063  00125C  0BFB               	andlw	251
  3064  00125E  6E03               	movwf	I2C_PCF8574_Write@value,c
  3065  001260  500A               	movf	LCD_putcmd@addr,w,c
  3066  001262  ECB4  F009         	call	_I2C_PCF8574_Write
  3067                           
  3068                           ;i2c_lcd.c: 39: if (cmdtype) {
  3069  001266  5008               	movf	LCD_putcmd@cmdtype,w,c
  3070  001268  B4D8               	btfsc	status,2,c
  3071  00126A  D011               	goto	l1544
  3072                           
  3073                           ;i2c_lcd.c: 41: lcddata = ((data << 4) & 0xF0)|0x08;
  3074  00126C  3807               	swapf	LCD_putcmd@data,w,c
  3075  00126E  0BF0               	andlw	240
  3076  001270  0BF0               	andlw	240
  3077  001272  0908               	iorlw	8
  3078  001274  6E0B               	movwf	LCD_putcmd@lcddata,c
  3079                           
  3080                           ;i2c_lcd.c: 42: I2C_PCF8574_Write(addr,lcddata | 0x04);
  3081  001276  500B               	movf	LCD_putcmd@lcddata,w,c
  3082  001278  0904               	iorlw	4
  3083  00127A  6E03               	movwf	I2C_PCF8574_Write@value,c
  3084  00127C  500A               	movf	LCD_putcmd@addr,w,c
  3085  00127E  ECB4  F009         	call	_I2C_PCF8574_Write
  3086                           
  3087                           ;i2c_lcd.c: 43: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  3088  001282  500B               	movf	LCD_putcmd@lcddata,w,c
  3089  001284  0BFB               	andlw	251
  3090  001286  6E03               	movwf	I2C_PCF8574_Write@value,c
  3091  001288  500A               	movf	LCD_putcmd@addr,w,c
  3092  00128A  ECB4  F009         	call	_I2C_PCF8574_Write
  3093  00128E                     l1544:
  3094                           
  3095                           ;i2c_lcd.c: 44: }
  3096                           ;i2c_lcd.c: 45: _delay((unsigned long)((2)*(8000000/4000.0)));
  3097  00128E  0E06               	movlw	6
  3098  001290  6E09               	movwf	??_LCD_putcmd& (0+255),c
  3099  001292  0E30               	movlw	48
  3100  001294                     u1507:
  3101  001294  2EE8               	decfsz	wreg,f,c
  3102  001296  D7FE               	bra	u1507
  3103  001298  2E09               	decfsz	??_LCD_putcmd& (0+255),f,c
  3104  00129A  D7FC               	bra	u1507
  3105  00129C  D000               	nop2	
  3106  00129E  0012               	return		;funcret
  3107  0012A0                     __end_of_LCD_putcmd:
  3108                           	opt stack 0
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           prodh	equ	0xFF4
  3114                           prodl	equ	0xFF3
  3115                           indf0	equ	0xFEF
  3116                           postinc0	equ	0xFEE
  3117                           fsr0h	equ	0xFEA
  3118                           fsr0l	equ	0xFE9
  3119                           wreg	equ	0xFE8
  3120                           indf2	equ	0xFDF
  3121                           postinc2	equ	0xFDE
  3122                           postdec2	equ	0xFDD
  3123                           fsr2h	equ	0xFDA
  3124                           fsr2l	equ	0xFD9
  3125                           status	equ	0xFD8
  3126                           
  3127 ;; *************** function _I2C_PCF8574_Write *****************
  3128 ;; Defined at:
  3129 ;;		line 12 in file "i2c_lcd.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;  addr            1    wreg     unsigned char 
  3132 ;;  value           1    2[COMRAM] unsigned char 
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;  addr            1    5[COMRAM] unsigned char 
  3135 ;;  S               1    4[COMRAM] unsigned char 
  3136 ;;  dummy           1    3[COMRAM] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      unsigned char 
  3139 ;; Registers used:
  3140 ;;		wreg, status,2, status,0, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3146 ;;      Params:         1       0       0       0       0       0       0       0       0
  3147 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3148 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3149 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3150 ;;Total ram usage:        4 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:    2
  3153 ;; This function calls:
  3154 ;;		_WriteI2C
  3155 ;; This function is called by:
  3156 ;;		_LCD_putcmd
  3157 ;;		_LCD_putch
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text17
  3162  001368                     __ptext17:
  3163                           	opt stack 0
  3164  001368                     _I2C_PCF8574_Write:
  3165                           	opt stack 24
  3166                           
  3167                           ;incstack = 0
  3168                           ;I2C_PCF8574_Write@addr stored from wreg
  3169  001368  6E06               	movwf	I2C_PCF8574_Write@addr,c
  3170                           
  3171                           ;i2c_lcd.c: 14: unsigned char S,dummy;
  3172                           ;i2c_lcd.c: 15: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3173  00136A  80C5               	bsf	4037,0,c	;volatile
  3174  00136C                     l70:
  3175  00136C  B0C5               	btfsc	4037,0,c	;volatile
  3176  00136E  D7FE               	goto	l70
  3177                           
  3178                           ;i2c_lcd.c: 16: S = WriteI2C( addr );
  3179  001370  5006               	movf	I2C_PCF8574_Write@addr,w,c
  3180  001372  ECF3  F008         	call	_WriteI2C
  3181  001376  6E05               	movwf	I2C_PCF8574_Write@S,c
  3182                           
  3183                           ;i2c_lcd.c: 21: }
  3184                           ;i2c_lcd.c: 22: S = WriteI2C(value);
  3185                           
  3186                           ;i2c_lcd.c: 20: SSPCON1bits.WCOL=0;
  3187                           
  3188                           ;i2c_lcd.c: 18: {
  3189                           ;i2c_lcd.c: 19: dummy = SSPBUF;
  3190                           
  3191                           ;i2c_lcd.c: 17: if(S == -1)
  3192  001378  5003               	movf	I2C_PCF8574_Write@value,w,c
  3193  00137A  ECF3  F008         	call	_WriteI2C
  3194  00137E  6E05               	movwf	I2C_PCF8574_Write@S,c
  3195                           
  3196                           ;i2c_lcd.c: 23: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3197  001380  84C5               	bsf	4037,2,c	;volatile
  3198  001382                     l74:
  3199  001382  A4C5               	btfss	4037,2,c	;volatile
  3200  001384  0012               	return	
  3201  001386  D7FD               	goto	l74
  3202  001388                     __end_of_I2C_PCF8574_Write:
  3203                           	opt stack 0
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           prodh	equ	0xFF4
  3209                           prodl	equ	0xFF3
  3210                           indf0	equ	0xFEF
  3211                           postinc0	equ	0xFEE
  3212                           fsr0h	equ	0xFEA
  3213                           fsr0l	equ	0xFE9
  3214                           wreg	equ	0xFE8
  3215                           indf2	equ	0xFDF
  3216                           postinc2	equ	0xFDE
  3217                           postdec2	equ	0xFDD
  3218                           fsr2h	equ	0xFDA
  3219                           fsr2l	equ	0xFD9
  3220                           status	equ	0xFD8
  3221                           
  3222 ;; *************** function _WriteI2C *****************
  3223 ;; Defined at:
  3224 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_writ.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;  data_out        1    wreg     unsigned char 
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  data_out        1    1[COMRAM] unsigned char 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  1    wreg      char 
  3231 ;; Registers used:
  3232 ;;		wreg, status,2, status,0, cstack
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3238 ;;      Params:         0       0       0       0       0       0       0       0       0
  3239 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3240 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3241 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3242 ;;Total ram usage:        1 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    1
  3245 ;; This function calls:
  3246 ;;		_IdleI2C
  3247 ;; This function is called by:
  3248 ;;		_I2C_PCF8574_Write
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text18
  3253  0011E6                     __ptext18:
  3254                           	opt stack 0
  3255  0011E6                     _WriteI2C:
  3256                           	opt stack 24
  3257                           
  3258                           ;incstack = 0
  3259                           ;WriteI2C@data_out stored from wreg
  3260  0011E6  6E02               	movwf	WriteI2C@data_out,c
  3261  0011E8  C002  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  3262  0011EC  AEC6               	btfss	4038,7,c	;volatile
  3263  0011EE  D002               	goto	l1426
  3264  0011F0  0EFF               	movlw	255
  3265  0011F2  0012               	return	
  3266  0011F4                     l1426:
  3267  0011F4  50C6               	movf	4038,w,c	;volatile
  3268  0011F6  0B0F               	andlw	15
  3269  0011F8  0A08               	xorlw	8
  3270  0011FA  B4D8               	btfsc	status,2,c
  3271  0011FC  D00F               	goto	l1444
  3272  0011FE  50C6               	movf	4038,w,c	;volatile
  3273  001200  0B0F               	andlw	15
  3274  001202  0A0B               	xorlw	11
  3275  001204  B4D8               	btfsc	status,2,c
  3276  001206  D00A               	goto	l1444
  3277  001208  88C6               	bsf	4038,4,c	;volatile
  3278  00120A                     l217:
  3279  00120A  A69E               	btfss	3998,3,c	;volatile
  3280  00120C  D7FE               	goto	l217
  3281  00120E  A4C7               	btfss	4039,2,c	;volatile
  3282  001210  B0C7               	btfsc	4039,0,c	;volatile
  3283  001212  D002               	goto	l1440
  3284  001214  0EFE               	movlw	254
  3285  001216  0012               	return	
  3286  001218                     l1440:
  3287  001218  0E00               	movlw	0
  3288  00121A  0012               	return	
  3289  00121C                     l1444:
  3290  00121C  50C6               	movf	4038,w,c	;volatile
  3291  00121E  0B0F               	andlw	15
  3292  001220  0A08               	xorlw	8
  3293  001222  B4D8               	btfsc	status,2,c
  3294  001224  D005               	goto	l226
  3295  001226  50C6               	movf	4038,w,c	;volatile
  3296  001228  0B0F               	andlw	15
  3297  00122A  0A0B               	xorlw	11
  3298  00122C  A4D8               	btfss	status,2,c
  3299  00122E  0012               	return	
  3300  001230                     l226:
  3301  001230  B0C7               	btfsc	4039,0,c	;volatile
  3302  001232  D7FE               	goto	l226
  3303  001234  ECE2  F009         	call	_IdleI2C	;wreg free
  3304  001238  ACC5               	btfss	4037,6,c	;volatile
  3305  00123A  D002               	goto	l1458
  3306  00123C  0EFE               	movlw	254
  3307  00123E  0012               	return	
  3308  001240                     l1458:
  3309  001240  0E00               	movlw	0
  3310  001242  0012               	return	
  3311  001244                     __end_of_WriteI2C:
  3312                           	opt stack 0
  3313                           tblptru	equ	0xFF8
  3314                           tblptrh	equ	0xFF7
  3315                           tblptrl	equ	0xFF6
  3316                           tablat	equ	0xFF5
  3317                           prodh	equ	0xFF4
  3318                           prodl	equ	0xFF3
  3319                           indf0	equ	0xFEF
  3320                           postinc0	equ	0xFEE
  3321                           fsr0h	equ	0xFEA
  3322                           fsr0l	equ	0xFE9
  3323                           wreg	equ	0xFE8
  3324                           indf2	equ	0xFDF
  3325                           postinc2	equ	0xFDE
  3326                           postdec2	equ	0xFDD
  3327                           fsr2h	equ	0xFDA
  3328                           fsr2l	equ	0xFD9
  3329                           status	equ	0xFD8
  3330                           
  3331 ;; *************** function _IdleI2C *****************
  3332 ;; Defined at:
  3333 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_idle.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;		None
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      void 
  3340 ;; Registers used:
  3341 ;;		wreg, status,2, status,0
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3347 ;;      Params:         0       0       0       0       0       0       0       0       0
  3348 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3349 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3350 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3351 ;;Total ram usage:        1 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; This function calls:
  3354 ;;		Nothing
  3355 ;; This function is called by:
  3356 ;;		_WriteI2C
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           	psect	text19
  3361  0013C4                     __ptext19:
  3362                           	opt stack 0
  3363  0013C4                     _IdleI2C:
  3364                           	opt stack 24
  3365  0013C4                     l1412:
  3366  0013C4  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
  3367  0013C8  0E1F               	movlw	31
  3368  0013CA  1601               	andwf	??_IdleI2C,f,c
  3369  0013CC  A4D8               	btfss	status,2,c
  3370  0013CE  D7FA               	goto	l1412
  3371  0013D0  A4C7               	btfss	4039,2,c	;volatile
  3372  0013D2  0012               	return	
  3373  0013D4  D7F7               	goto	l1412
  3374  0013D6                     __end_of_IdleI2C:
  3375                           	opt stack 0
  3376                           tblptru	equ	0xFF8
  3377                           tblptrh	equ	0xFF7
  3378                           tblptrl	equ	0xFF6
  3379                           tablat	equ	0xFF5
  3380                           prodh	equ	0xFF4
  3381                           prodl	equ	0xFF3
  3382                           indf0	equ	0xFEF
  3383                           postinc0	equ	0xFEE
  3384                           fsr0h	equ	0xFEA
  3385                           fsr0l	equ	0xFE9
  3386                           wreg	equ	0xFE8
  3387                           indf2	equ	0xFDF
  3388                           postinc2	equ	0xFDE
  3389                           postdec2	equ	0xFDD
  3390                           fsr2h	equ	0xFDA
  3391                           fsr2l	equ	0xFD9
  3392                           status	equ	0xFD8
  3393                           
  3394 ;; *************** function _KP_init *****************
  3395 ;; Defined at:
  3396 ;;		line 6 in file "KeyPad Library.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;		None
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;		None
  3401 ;; Return value:  Size  Location     Type
  3402 ;;                  1    wreg      void 
  3403 ;; Registers used:
  3404 ;;		wreg, status,2
  3405 ;; Tracked objects:
  3406 ;;		On entry : 0/0
  3407 ;;		On exit  : 0/0
  3408 ;;		Unchanged: 0/0
  3409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3410 ;;      Params:         0       0       0       0       0       0       0       0       0
  3411 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3412 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3413 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3414 ;;Total ram usage:        0 bytes
  3415 ;; Hardware stack levels used:    1
  3416 ;; This function calls:
  3417 ;;		Nothing
  3418 ;; This function is called by:
  3419 ;;		_main
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text20
  3424  0013D6                     __ptext20:
  3425                           	opt stack 0
  3426  0013D6                     _KP_init:
  3427                           	opt stack 30
  3428                           
  3429                           ;KeyPad Library.c: 8: TRISD = 0x0F;
  3430                           
  3431                           ;incstack = 0
  3432  0013D6  0E0F               	movlw	15
  3433  0013D8  6E95               	movwf	3989,c	;volatile
  3434                           
  3435                           ;KeyPad Library.c: 9: LATD = 0x00;
  3436  0013DA  0E00               	movlw	0
  3437  0013DC  6E8C               	movwf	3980,c	;volatile
  3438  0013DE  0012               	return		;funcret
  3439  0013E0                     __end_of_KP_init:
  3440                           	opt stack 0
  3441                           tblptru	equ	0xFF8
  3442                           tblptrh	equ	0xFF7
  3443                           tblptrl	equ	0xFF6
  3444                           tablat	equ	0xFF5
  3445                           prodh	equ	0xFF4
  3446                           prodl	equ	0xFF3
  3447                           indf0	equ	0xFEF
  3448                           postinc0	equ	0xFEE
  3449                           fsr0h	equ	0xFEA
  3450                           fsr0l	equ	0xFE9
  3451                           wreg	equ	0xFE8
  3452                           indf2	equ	0xFDF
  3453                           postinc2	equ	0xFDE
  3454                           postdec2	equ	0xFDD
  3455                           fsr2h	equ	0xFDA
  3456                           fsr2l	equ	0xFD9
  3457                           status	equ	0xFD8
  3458                           tblptru	equ	0xFF8
  3459                           tblptrh	equ	0xFF7
  3460                           tblptrl	equ	0xFF6
  3461                           tablat	equ	0xFF5
  3462                           prodh	equ	0xFF4
  3463                           prodl	equ	0xFF3
  3464                           indf0	equ	0xFEF
  3465                           postinc0	equ	0xFEE
  3466                           fsr0h	equ	0xFEA
  3467                           fsr0l	equ	0xFE9
  3468                           wreg	equ	0xFE8
  3469                           indf2	equ	0xFDF
  3470                           postinc2	equ	0xFDE
  3471                           postdec2	equ	0xFDD
  3472                           fsr2h	equ	0xFDA
  3473                           fsr2l	equ	0xFD9
  3474                           status	equ	0xFD8
  3475                           
  3476                           	psect	rparam
  3477  0000                     tblptru	equ	0xFF8
  3478                           tblptrh	equ	0xFF7
  3479                           tblptrl	equ	0xFF6
  3480                           tablat	equ	0xFF5
  3481                           prodh	equ	0xFF4
  3482                           prodl	equ	0xFF3
  3483                           indf0	equ	0xFEF
  3484                           postinc0	equ	0xFEE
  3485                           fsr0h	equ	0xFEA
  3486                           fsr0l	equ	0xFE9
  3487                           wreg	equ	0xFE8
  3488                           indf2	equ	0xFDF
  3489                           postinc2	equ	0xFDE
  3490                           postdec2	equ	0xFDD
  3491                           fsr2h	equ	0xFDA
  3492                           fsr2l	equ	0xFD9
  3493                           status	equ	0xFD8


Data Sizes:
    Strings     70
    Constant    40
    Data        1
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     49      52
    BANK0           160    112     112
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> keyNumber@arreglo(COMRAM[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_7(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> riksFactors@text(BANK0[80]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    LCD_puts@s	PTR unsigned char  size(2) Largest target is 80
		 -> riksFactors@text(BANK0[80]), STR_6(CODE[25]), STR_5(CODE[12]), STR_4(CODE[25]), 
		 -> STR_3(CODE[12]), STR_2(CODE[25]), STR_1(CODE[25]), keyNumber@arreglo(COMRAM[20]), 


Critical Paths under _main in COMRAM

    _riksFactors->_keyNumber
    _sprintf->___llmod
    ___llmod->___lldiv
    _keyNumber->_LCD_goto
    _keyNumber->_LCD_puts
    _atoi->___wmul
    _LCD_puts->_LCD_putch
    _LCD_putch->_I2C_PCF8574_Write
    _LCD_goto->_LCD_putcmd
    _KP_Readbutton->_KP_scan
    _LCD_init->_LCD_putcmd
    _LCD_putcmd->_I2C_PCF8574_Write
    _I2C_PCF8574_Write->_WriteI2C
    _WriteI2C->_IdleI2C

Critical Paths under _main in BANK0

    _main->_riksFactors

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   19442
                                             47 COMRAM     2     2      0
                            _KP_init
                           _LCD_init
                         _LCD_putcmd
                            _OpenI2C
                        _riksFactors
 ---------------------------------------------------------------------------------
 (1) _riksFactors                                        112   112      0   13633
                                              0 BANK0    112   112      0
                           _LCD_goto
                           _LCD_puts
                          _keyNumber
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             33    21     12    1139
                                             22 COMRAM    24    12     12
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     287
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _keyNumber                                           33    29      4    6726
                                             14 COMRAM    33    29      4
                      _KP_Readbutton
                           _LCD_goto
                           _LCD_puts
                               _atoi
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2     647
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _LCD_puts                                             5     3      2    1517
                                              9 COMRAM     5     3      2
                          _LCD_putch
 ---------------------------------------------------------------------------------
 (4) _LCD_putch                                            3     2      1     873
                                              6 COMRAM     3     2      1
                  _I2C_PCF8574_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_goto                                             3     1      2    4145
                                             11 COMRAM     3     1      2
                         _LCD_putcmd
 ---------------------------------------------------------------------------------
 (3) _KP_Readbutton                                        1     1      0     135
                                              8 COMRAM     1     1      0
                            _KP_scan
 ---------------------------------------------------------------------------------
 (4) _KP_scan                                              8     6      2      95
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _OpenI2C                                              2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0    2949
                                             11 COMRAM     2     2      0
                         _LCD_putcmd
 ---------------------------------------------------------------------------------
 (4) _LCD_putcmd                                           5     3      2    2751
                                              6 COMRAM     5     3      2
                  _I2C_PCF8574_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_PCF8574_Write                                    4     3      1     587
                                              2 COMRAM     4     3      1
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (6) _WriteI2C                                             1     1      0      22
                                              1 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (7) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _KP_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KP_init
   _LCD_init
     _LCD_putcmd
       _I2C_PCF8574_Write
         _WriteI2C
           _IdleI2C
   _LCD_putcmd
     _I2C_PCF8574_Write
       _WriteI2C
         _IdleI2C
   _OpenI2C
   _riksFactors
     _LCD_goto
       _LCD_putcmd
         _I2C_PCF8574_Write
           _WriteI2C
             _IdleI2C
     _LCD_puts
       _LCD_putch
         _I2C_PCF8574_Write
           _WriteI2C
             _IdleI2C
     _keyNumber
       _KP_Readbutton
         _KP_scan
       _LCD_goto
         _LCD_putcmd
           _I2C_PCF8574_Write
             _WriteI2C
               _IdleI2C
       _LCD_puts
         _LCD_putch
           _I2C_PCF8574_Write
             _WriteI2C
               _IdleI2C
       _atoi
         ___wmul
         _isdigit
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      50       7       31.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      70       5       70.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     31      34       1       54.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F4      20        0.0%
DATA                 0      0      F4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun May 19 17:29:35 2019

               _SSPSTATbits 000FC7                          l32 0DC4                          l24 0D74  
                        l19 0D50                          l28 0D9C                          l70 136C  
                        l74 1382         ___wmul@multiplicand 0003                         l217 120A  
                       l226 1230                         l403 0EBE                         l175 0A7E  
                       l600 1094                         l610 1174                         u884 0D36  
                       u885 0D32                         wreg 000FE8                 ?_LCD_putcmd 0007  
          KP_Readbutton@key 0009                        l1412 13C4                        l1500 0D8A  
                      l1510 0DB2                        l1440 1218                        l1520 0DDA  
                      l1600 0C12                        l1426 11F4                        l1444 121C  
                      l1612 0C36                        l1700 11BE                        l1526 0DE8  
                      l1630 0C6C                        l1606 0C24                        l1544 128E  
                      l1624 0C5A                        l1720 0E52                        l1704 0DFC  
                      l1458 1240                        l1490 0D62                        l1642 0C90  
                      l1618 0C48                        l1570 139E                        l1722 0E88  
                      l1706 0E00                        l1810 0A46                        l1660 0CC6  
                      l1636 0C7E                        l1724 0E8C                        l1716 0E40  
                      l1740 1056                        l1812 0A4C                        l1804 0A2C  
                      l1478 0D26                        l1654 0CB4                        l1582 0BDC  
                      l1830 0AC6                        l1814 0A50                        l1648 0CA2  
                      l1576 0BCC                        l1672 0CEA                        l1680 10AA  
                      l1736 1046                        l1760 1142                        l1824 0A9E  
                      l1666 0CD8                        l1594 0C00                        l1682 10BC  
                      l1770 0ED8                        l1738 1052                        l1850 0B90  
                      l1842 0AFE                        l1818 0A56                        l1588 0BEE  
                      l1684 10CE                        l1692 1104                        l1780 0EFA  
                      l1748 1086                        l1764 1166                        l1756 1132  
                      l1844 0B0A                        l1852 0BA0                        l1686 10E0  
                      l1758 113E                        l1854 0BB8                        l1688 10F2  
                      l1696 1192                        l1792 0F3A                        l1936 1310  
                      STR_1 0829                        STR_2 0829                        STR_3 0857  
                      STR_4 0829                        STR_5 0863                        STR_6 0829  
                      STR_7 0842                        u1200 11DE                        u1207 11D4  
                      u1190 11B2                        _LATD 000F8C                        u1507 1294  
                      u1197 11A8                        u1447 0D44                        u1457 0D68  
                      u1467 0D90                        u1477 0DB8                        u1487 0F8E  
                      u1497 0FAA                 main@counter 0030            LCD_putch@lcddata 0009  
                      _atoi 0DFA                        _main 12E6  __size_of_I2C_PCF8574_Write 0020  
                      _text 0100                        fsr0h 000FEA                        indf0 000FEF  
                      fsr2h 000FDA                        fsr0l 000FE9                        indf2 000FDF  
                      fsr2l 000FD9             __end_of_KP_init 13E0             __end_of_KP_scan 0DFA  
                      prodh 000FF4                        prodl 000FF3                        start 0000  
           __end_of_IdleI2C 13D6              LCD_goto@column 000D          __size_of_LCD_putch 0046  
              ___param_bank 000000           riksFactors@gender 00B4             __end_of_OpenI2C 13C4  
          __end_of_LCD_init 1024            __end_of_LCD_goto 1120            __end_of_LCD_puts 11E6  
                     ?_atoi 0007                       ?_main 0001             __end_of___lldiv 10A6  
           __end_of___llmod 1186          I2C_PCF8574_Write@S 0005                       _TRISD 000F95  
           __end_of_dpowers 0829             __end_of_isdigit 13A6                       atoi@a 000C  
                     atoi@s 0007                       tablat 000FF5                       status 000FD8  
           __end_of_sprintf 0BC6             __initialization 1316                 LCD_goto@row 000C  
       __size_of_LCD_putcmd 005C                __end_of_atoi 0EC8                __end_of_main 1316  
                    ??_atoi 0009                      ??_main 0030          riksFactors@parents 00BC  
             __activetblptr 000002           __end_of_LCD_putch 12E6            ___llmod@dividend 000E  
          __end_of_WriteI2C 1244                   ??_KP_init 0001                   ??_KP_scan 0003  
              ?_riksFactors 0001                 OpenI2C@slew 0001                   ??_IdleI2C 0001  
                    _SSPBUF 000FC9                   ??_OpenI2C 0002                KP_scan@press 0005  
                    ___wmul 1342                   ??___lldiv 0009                   ??___llmod 0016  
         LCD_putcmd@cmdtype 0008                      _keynum 0032           LCD_putcmd@lcddata 000B  
                    clear_0 132E                __pdataCOMRAM 0034                   ??_isdigit 0001  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8              keyNumber@tecla 002D                   ??_sprintf 0023  
                __accesstop 0060     __end_of__initialization 1338                   ?_LCD_init 0001  
                 ?_LCD_goto 000C                   ?_LCD_puts 000A               ___rparam_used 000001  
              LCD_init@addr 000D                LCD_goto@addr 000E             riksFactors@edad 00C8  
            __pcstackCOMRAM 0001             riksFactors@peso 00CC             riksFactors@text 0060  
            LCD_putcmd@addr 000A              LCD_putcmd@data 0007                   LCD_puts@i 000C  
                 LCD_puts@s 000A                ??_LCD_putcmd 0009         riksFactors@estatura 00B0  
                __pbssBANK1 0100          __size_of_keyNumber 00BE                LCD_puts@addr 000E  
                ??_LCD_init 000C                  ??_LCD_goto 000E                  ??_LCD_puts 000C  
     __end_of_KP_Readbutton 0CFE          __end_of_LCD_putcmd 12A0                     ?___wmul 0001  
       riksFactors@systolic 00C0                   ?_WriteI2C 0001                     _SSPCON1 000FC6  
                   _SSPCON2 000FC5                     _SSPSTAT 000FC7                     _KP_init 13D6  
                   _KP_scan 0CFE                     _IdleI2C 13C4        __size_of_riksFactors 01B2  
                   _OpenI2C 13A6                     __Hparam 0000                     __Lparam 0000  
                   ___lldiv 1024             __size_of___wmul 0026                     ___llmod 1120  
              __psmallconst 0800                     __pcinit 1316                  ??_WriteI2C 0002  
                   __ramtop 0800                     __ptext0 12E6                     __ptext1 0870  
                   __ptext2 0A22                     __ptext3 1120                     __ptext4 1024  
                   __ptext5 0EC8                     __ptext6 0DFA                     __ptext7 1388  
                   __ptext8 1342           __end_of_keyNumber 0F86                     __ptext9 1186  
                   _dpowers 0801                     _isdigit 1388              _LCD_01_ADDRESS 0034  
                   _sprintf 0A22        end_of_initialization 1338                   _LCD_putch 12A0  
             __Lmediumconst 0000             ___lldiv@divisor 0005             ___lldiv@counter 000D  
           keyNumber@number 0027                     postdec2 000FDD      I2C_PCF8574_Write@dummy 0004  
                   postinc0 000FEE                     postinc2 000FDE      I2C_PCF8574_Write@value 0003  
                 _PORTDbits 000F83                   _TRISBbits 000F93                  ?_LCD_putch 0007  
         __size_of_LCD_init 009E           __size_of_LCD_goto 007A           __size_of_LCD_puts 0060  
          riksFactors@smoke 00B8              __end_of___wmul 1368               __pidataCOMRAM 13E0  
       start_initialization 1316        riksFactors@diastolic 00C4            WriteI2C@data_out 0002  
                keyNumber@i 002E             ___llmod@divisor 0012             ___llmod@counter 0016  
                  ??___wmul 0005           __size_of_WriteI2C 005E                 __pbssCOMRAM 0032  
             LCD_putch@addr 0008               LCD_putch@data 0007               __pcstackBANK0 0060  
                  ?_KP_init 0001                    ?_KP_scan 0001                 ??_LCD_putch 0008  
                  ?_IdleI2C 0001                 sprintf@flag 0025                 sprintf@prec 0026  
                  ?_OpenI2C 0001                    ?___lldiv 0001                    ?___llmod 000E  
               __smallconst 0800                    ?_isdigit 0001                   _keyNumber 0EC8  
    __size_of_KP_Readbutton 0138                    ?_sprintf 0017               ??_riksFactors 0030  
            ___wmul@product 0005                    _LCD_init 0F86                    _LCD_goto 10A6  
                  _LCD_puts 1186                    _PIR1bits 000F9E       I2C_PCF8574_Write@addr 0006  
         ___wmul@multiplier 0001                  ?_keyNumber 000F            __size_of_KP_init 000A  
          __size_of_KP_scan 00FC            OpenI2C@sync_mode 0002            __size_of_IdleI2C 0012  
       __end_of_riksFactors 0A22                    __Hrparam 0000            __size_of_OpenI2C 001E  
                  __Lrparam 0000                  KP_scan@row 0007               _KP_Readbutton 0BC6  
          __size_of___lldiv 0082            __size_of___llmod 0066                    _WriteI2C 11E6  
               _isdigit$825 0002                  sprintf@val 0028            __size_of_isdigit 001E  
                  __ptext10 12A0                    __ptext11 10A6                    __ptext20 13D6  
                  __ptext12 0BC6                    __ptext13 0CFE                    __ptext14 13A6  
                  __ptext15 0F86                    __ptext16 1244                    __ptext17 1368  
                  __ptext18 11E6                    __ptext19 13C4            __size_of_sprintf 01A4  
             __size_of_atoi 00CE               __size_of_main 0030           keyNumber@contador 002B  
         _I2C_PCF8574_Write 1368              ?_KP_Readbutton 0001          ?_I2C_PCF8574_Write 0003  
                  atoi@sign 000B         ??_I2C_PCF8574_Write 0004                 ??_keyNumber 0013  
                _LCD_putcmd 1244                    isdigit@c 0003                 _riksFactors 0870  
                 sprintf@ap 002C                   sprintf@sp 0017            ___lldiv@dividend 0001  
 __end_of_I2C_PCF8574_Write 1388            keyNumber@arreglo 0013                    sprintf@c 002E  
                  sprintf@f 0019            ___lldiv@quotient 0009                 _SSPCON1bits 000FC6  
               _SSPCON2bits 000FC5             ??_KP_Readbutton 0009  
