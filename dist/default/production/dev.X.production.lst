

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun May 19 15:17:33 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35  0000                     
    36                           ; Version 1.41
    37                           ; Generated 25/01/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F4550 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	idataCOMRAM
    72  0012C2                     __pidataCOMRAM:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _LCD_01_ADDRESS
    76  0012C2  40                 	db	64
    77                           
    78                           	psect	smallconst
    79  000800                     __psmallconst:
    80                           	opt stack 0
    81  000800  00                 	db	0
    82  000801                     _dpowers:
    83                           	opt stack 0
    84  000801  0001               	dw	1
    85  000803  0000               	dw	0
    86  000805  000A               	dw	10
    87  000807  0000               	dw	0
    88  000809  0064               	dw	100
    89  00080B  0000               	dw	0
    90  00080D  03E8               	dw	1000
    91  00080F  0000               	dw	0
    92  000811  2710               	dw	10000
    93  000813  0000               	dw	0
    94  000815  86A0               	dw	34464
    95  000817  0001               	dw	1
    96  000819  4240               	dw	16960
    97  00081B  000F               	dw	15
    98  00081D  9680               	dw	38528
    99  00081F  0098               	dw	152
   100  000821  E100               	dw	57600
   101  000823  05F5               	dw	1525
   102  000825  CA00               	dw	51712
   103  000827  3B9A               	dw	15258
   104  000829                     __end_of_dpowers:
   105                           	opt stack 0
   106  0000                     _SSPSTATbits	set	4039
   107  0000                     _PIR1bits	set	3998
   108  0000                     _TRISBbits	set	3987
   109  0000                     _SSPCON2	set	4037
   110  0000                     _SSPCON1	set	4038
   111  0000                     _SSPSTAT	set	4039
   112  0000                     _SSPCON1bits	set	4038
   113  0000                     _SSPBUF	set	4041
   114  0000                     _SSPCON2bits	set	4037
   115  0000                     _PORTDbits	set	3971
   116  0000                     _LATD	set	3980
   117  0000                     _TRISD	set	3989
   118  000829                     STR_2:
   119  000829  2D                 	db	45
   120  00082A  2D                 	db	45
   121  00082B  2D                 	db	45
   122  00082C  2D                 	db	45
   123  00082D  2D                 	db	45
   124  00082E  2D                 	db	45
   125  00082F  2D                 	db	45
   126  000830  2D                 	db	45
   127  000831  2D                 	db	45
   128  000832  2D                 	db	45
   129  000833  2D                 	db	45
   130  000834  2D                 	db	45
   131  000835  2D                 	db	45
   132  000836  2D                 	db	45
   133  000837  00                 	db	0
   134  000838  00                 	db	0
   135  000839                     STR_3:
   136  000839  43                 	db	67	;'C'
   137  00083A  61                 	db	97	;'a'
   138  00083B  72                 	db	114	;'r'
   139  00083C  76                 	db	118	;'v'
   140  00083D  61                 	db	97	;'a'
   141  00083E  6A                 	db	106	;'j'
   142  00083F  61                 	db	97	;'a'
   143  000840  6C                 	db	108	;'l'
   144  000841  00                 	db	0
   145  000842  00                 	db	0
   146  000843                     STR_1:
   147  000843  6E                 	db	110	;'n'
   148  000844  75                 	db	117	;'u'
   149  000845  6D                 	db	109	;'m'
   150  000846  3A                 	db	58	;':'
   151  000847  20                 	db	32
   152  000848  25                 	db	37
   153  000849  6C                 	db	108	;'l'
   154  00084A  75                 	db	117	;'u'
   155  00084B  00                 	db	0
   156  00084C  00                 	db	0	; dummy byte at the end
   157  0000                     
   158                           ; #config settings
   159                           
   160                           	psect	cinit
   161  0011F8                     __pcinit:
   162                           	opt stack 0
   163  0011F8                     start_initialization:
   164                           	opt stack 0
   165  0011F8                     __initialization:
   166                           	opt stack 0
   167                           
   168                           ; Initialize objects allocated to COMRAM (1 bytes)
   169                           ; load TBLPTR registers with __pidataCOMRAM
   170  0011F8  0EC2               	movlw	low __pidataCOMRAM
   171  0011FA  6EF6               	movwf	tblptrl,c
   172  0011FC  0E12               	movlw	high __pidataCOMRAM
   173  0011FE  6EF7               	movwf	tblptrh,c
   174  001200  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   175  001202  6EF8               	movwf	tblptru,c
   176  001204  0009               	tblrd		*+	;fetch initializer
   177  001206  CFF5 F048          	movff	tablat,__pdataCOMRAM
   178                           
   179                           ; Clear objects allocated to BANK0 (80 bytes)
   180  00120A  EE00  F060         	lfsr	0,__pbssBANK0
   181  00120E  0E50               	movlw	80
   182  001210                     clear_0:
   183  001210  6AEE               	clrf	postinc0,c
   184  001212  06E8               	decf	wreg,f,c
   185  001214  E1FD               	bnz	clear_0
   186                           
   187                           ; Clear objects allocated to COMRAM (2 bytes)
   188  001216  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   189  001218  6A46               	clrf	__pbssCOMRAM& (0+255),c
   190  00121A                     end_of_initialization:
   191                           	opt stack 0
   192  00121A                     __end_of__initialization:
   193                           	opt stack 0
   194  00121A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   195  00121C  6EF8               	movwf	tblptru,c
   196  00121E  0100               	movlb	0
   197  001220  EFD9  F006         	goto	_main	;jump to C main() function
   198                           tblptru	equ	0xFF8
   199                           tblptrh	equ	0xFF7
   200                           tblptrl	equ	0xFF6
   201                           tablat	equ	0xFF5
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           
   205                           	psect	bssCOMRAM
   206  000046                     __pbssCOMRAM:
   207                           	opt stack 0
   208  000046                     _keynum:
   209                           	opt stack 0
   210  000046                     	ds	2
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           tblptrl	equ	0xFF6
   214                           tablat	equ	0xFF5
   215                           postinc0	equ	0xFEE
   216                           wreg	equ	0xFE8
   217                           
   218                           	psect	dataCOMRAM
   219  000048                     __pdataCOMRAM:
   220                           	opt stack 0
   221  000048                     _LCD_01_ADDRESS:
   222                           	opt stack 0
   223  000048                     	ds	1
   224                           tblptru	equ	0xFF8
   225                           tblptrh	equ	0xFF7
   226                           tblptrl	equ	0xFF6
   227                           tablat	equ	0xFF5
   228                           postinc0	equ	0xFEE
   229                           wreg	equ	0xFE8
   230                           
   231                           	psect	bssBANK0
   232  000060                     __pbssBANK0:
   233                           	opt stack 0
   234  000060                     _text:
   235                           	opt stack 0
   236  000060                     	ds	80
   237                           tblptru	equ	0xFF8
   238                           tblptrh	equ	0xFF7
   239                           tblptrl	equ	0xFF6
   240                           tablat	equ	0xFF5
   241                           postinc0	equ	0xFEE
   242                           wreg	equ	0xFE8
   243                           
   244                           	psect	cstackCOMRAM
   245  000001                     __pcstackCOMRAM:
   246                           	opt stack 0
   247  000001                     ??_IdleI2C:
   248  000001                     ??_isdigit:
   249  000001                     ?_KP_scan:
   250                           	opt stack 0
   251  000001                     ?___wmul:
   252                           	opt stack 0
   253  000001                     ?___lldiv:
   254                           	opt stack 0
   255  000001                     OpenI2C@slew:
   256                           	opt stack 0
   257  000001                     longDelay@time:
   258                           	opt stack 0
   259  000001                     ___wmul@multiplier:
   260                           	opt stack 0
   261  000001                     ___lldiv@dividend:
   262                           	opt stack 0
   263                           
   264                           ; 4 bytes @ 0x0
   265  000001                     	ds	1
   266  000002                     OpenI2C@sync_mode:
   267                           	opt stack 0
   268  000002                     WriteI2C@data_out:
   269                           	opt stack 0
   270  000002                     _isdigit$813:
   271                           	opt stack 0
   272                           
   273                           ; 1 bytes @ 0x1
   274  000002                     	ds	1
   275  000003                     ??_KP_scan:
   276  000003                     ??_longDelay:
   277  000003                     I2C_PCF8574_Write@value:
   278                           	opt stack 0
   279  000003                     isdigit@c:
   280                           	opt stack 0
   281  000003                     ___wmul@multiplicand:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x2
   285  000003                     	ds	1
   286  000004                     I2C_PCF8574_Write@dummy:
   287                           	opt stack 0
   288  000004                     longDelay@i:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x3
   292  000004                     	ds	1
   293  000005                     I2C_PCF8574_Write@S:
   294                           	opt stack 0
   295  000005                     KP_scan@press:
   296                           	opt stack 0
   297  000005                     ___wmul@product:
   298                           	opt stack 0
   299  000005                     ___lldiv@divisor:
   300                           	opt stack 0
   301                           
   302                           ; 4 bytes @ 0x4
   303  000005                     	ds	1
   304  000006                     I2C_PCF8574_Write@addr:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x5
   308  000006                     	ds	1
   309  000007                     ?_atoi:
   310                           	opt stack 0
   311  000007                     LCD_putcmd@data:
   312                           	opt stack 0
   313  000007                     LCD_putch@data:
   314                           	opt stack 0
   315  000007                     KP_scan@row:
   316                           	opt stack 0
   317  000007                     atoi@s:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x6
   321  000007                     	ds	1
   322  000008                     LCD_putcmd@cmdtype:
   323                           	opt stack 0
   324  000008                     LCD_putch@addr:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0x7
   328  000008                     	ds	1
   329  000009                     ??_atoi:
   330  000009                     ??_LCD_putcmd:
   331  000009                     KP_Readbutton@key:
   332                           	opt stack 0
   333  000009                     LCD_putch@lcddata:
   334                           	opt stack 0
   335  000009                     ___lldiv@quotient:
   336                           	opt stack 0
   337                           
   338                           ; 4 bytes @ 0x8
   339  000009                     	ds	1
   340  00000A                     LCD_putcmd@addr:
   341                           	opt stack 0
   342  00000A                     LCD_puts@s:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x9
   346  00000A                     	ds	1
   347  00000B                     LCD_putcmd@lcddata:
   348                           	opt stack 0
   349  00000B                     atoi@sign:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0xA
   353  00000B                     	ds	1
   354  00000C                     ??_LCD_init:
   355  00000C                     LCD_goto@row:
   356                           	opt stack 0
   357  00000C                     LCD_puts@i:
   358                           	opt stack 0
   359  00000C                     atoi@a:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0xB
   363  00000C                     	ds	1
   364  00000D                     LCD_init@addr:
   365                           	opt stack 0
   366  00000D                     LCD_goto@column:
   367                           	opt stack 0
   368  00000D                     ___lldiv@counter:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0xC
   372  00000D                     	ds	1
   373  00000E                     ?___llmod:
   374                           	opt stack 0
   375  00000E                     LCD_goto@addr:
   376                           	opt stack 0
   377  00000E                     LCD_puts@addr:
   378                           	opt stack 0
   379  00000E                     ___llmod@dividend:
   380                           	opt stack 0
   381                           
   382                           ; 4 bytes @ 0xD
   383  00000E                     	ds	1
   384  00000F                     ?_keyNumber:
   385                           	opt stack 0
   386                           
   387                           ; 4 bytes @ 0xE
   388  00000F                     	ds	3
   389  000012                     ___llmod@divisor:
   390                           	opt stack 0
   391                           
   392                           ; 4 bytes @ 0x11
   393  000012                     	ds	1
   394  000013                     keyNumber@arreglo:
   395                           	opt stack 0
   396                           
   397                           ; 20 bytes @ 0x12
   398  000013                     	ds	3
   399  000016                     ___llmod@counter:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x15
   403  000016                     	ds	17
   404  000027                     keyNumber@number:
   405                           	opt stack 0
   406                           
   407                           ; 4 bytes @ 0x26
   408  000027                     	ds	4
   409  00002B                     keyNumber@contador:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x2A
   413  00002B                     	ds	2
   414  00002D                     keyNumber@tecla:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x2C
   418  00002D                     	ds	1
   419  00002E                     keyNumber@i:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x2D
   423  00002E                     	ds	2
   424  000030                     ?_sprintf:
   425                           	opt stack 0
   426  000030                     sprintf@sp:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x2F
   430  000030                     	ds	2
   431  000032                     sprintf@f:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x31
   435  000032                     	ds	6
   436  000038                     ??_sprintf:
   437                           
   438                           ; 1 bytes @ 0x37
   439  000038                     	ds	2
   440  00003A                     sprintf@flag:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x39
   444  00003A                     	ds	1
   445  00003B                     sprintf@prec:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x3A
   449  00003B                     	ds	2
   450  00003D                     sprintf@val:
   451                           	opt stack 0
   452                           
   453                           ; 4 bytes @ 0x3C
   454  00003D                     	ds	4
   455  000041                     sprintf@ap:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x40
   459  000041                     	ds	2
   460  000043                     sprintf@c:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x42
   464  000043                     	ds	1
   465  000044                     main@counter:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x43
   469  000044                     	ds	2
   470                           tblptru	equ	0xFF8
   471                           tblptrh	equ	0xFF7
   472                           tblptrl	equ	0xFF6
   473                           tablat	equ	0xFF5
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           
   477 ;;
   478 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   479 ;;
   480 ;; *************** function _main *****************
   481 ;; Defined at:
   482 ;;		line 21 in file "main.c"
   483 ;; Parameters:    Size  Location     Type
   484 ;;		None
   485 ;; Auto vars:     Size  Location     Type
   486 ;;  counter         2   67[COMRAM] unsigned int 
   487 ;; Return value:  Size  Location     Type
   488 ;;                  1    wreg      void 
   489 ;; Registers used:
   490 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   491 ;; Tracked objects:
   492 ;;		On entry : 0/0
   493 ;;		On exit  : 0/0
   494 ;;		Unchanged: 0/0
   495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   496 ;;      Params:         0       0       0       0       0       0       0       0       0
   497 ;;      Locals:         2       0       0       0       0       0       0       0       0
   498 ;;      Temps:          0       0       0       0       0       0       0       0       0
   499 ;;      Totals:         2       0       0       0       0       0       0       0       0
   500 ;;Total ram usage:        2 bytes
   501 ;; Hardware stack levels required when called:    6
   502 ;; This function calls:
   503 ;;		_KP_init
   504 ;;		_LCD_goto
   505 ;;		_LCD_init
   506 ;;		_LCD_putcmd
   507 ;;		_LCD_puts
   508 ;;		_OpenI2C
   509 ;;		_keyNumber
   510 ;;		_longDelay
   511 ;;		_sprintf
   512 ;; This function is called by:
   513 ;;		Startup code after reset
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           	psect	text0
   518  000DB2                     __ptext0:
   519                           	opt stack 0
   520  000DB2                     _main:
   521                           	opt stack 25
   522                           
   523                           ;main.c: 25: OpenI2C(0b00001000, 0b10000000);
   524                           
   525                           ;incstack = 0
   526  000DB2  0E80               	movlw	128
   527  000DB4  6E01               	movwf	OpenI2C@slew,c
   528  000DB6  0E08               	movlw	8
   529  000DB8  EC44  F009         	call	_OpenI2C
   530                           
   531                           ;main.c: 26: LCD_init(LCD_01_ADDRESS);
   532  000DBC  5048               	movf	_LCD_01_ADDRESS,w,c
   533  000DBE  EC33  F007         	call	_LCD_init
   534                           
   535                           ;main.c: 27: KP_init();
   536  000DC2  EC5C  F009         	call	_KP_init	;wreg free
   537                           
   538                           ;main.c: 30: unsigned int counter = 0;
   539  000DC6  0E00               	movlw	0
   540  000DC8  6E45               	movwf	main@counter+1,c
   541  000DCA  0E00               	movlw	0
   542  000DCC  6E44               	movwf	main@counter,c
   543  000DCE                     l1885:
   544                           
   545                           ;main.c: 33: LCD_putcmd(LCD_01_ADDRESS, 0x01,1);
   546  000DCE  0E01               	movlw	1
   547  000DD0  6E07               	movwf	LCD_putcmd@data,c
   548  000DD2  0E01               	movlw	1
   549  000DD4  6E08               	movwf	LCD_putcmd@cmdtype,c
   550  000DD6  5048               	movf	_LCD_01_ADDRESS,w,c
   551  000DD8  EC92  F008         	call	_LCD_putcmd
   552                           
   553                           ;main.c: 35: sprintf(text, "num: %lu", keyNumber());
   554  000DDC  0E60               	movlw	low _text
   555  000DDE  6E30               	movwf	sprintf@sp,c
   556  000DE0  0E00               	movlw	high _text
   557  000DE2  6E31               	movwf	sprintf@sp+1,c
   558  000DE4  0E43               	movlw	low STR_1
   559  000DE6  6E32               	movwf	sprintf@f,c
   560  000DE8  0E08               	movlw	high STR_1
   561  000DEA  6E33               	movwf	sprintf@f+1,c
   562  000DEC  EC7A  F006         	call	_keyNumber	;wreg free
   563  000DF0  C00F  F034         	movff	?_keyNumber,?_sprintf+4
   564  000DF4  C010  F035         	movff	?_keyNumber+1,?_sprintf+5
   565  000DF8  C011  F036         	movff	?_keyNumber+2,?_sprintf+6
   566  000DFC  C012  F037         	movff	?_keyNumber+3,?_sprintf+7
   567  000E00  EC27  F004         	call	_sprintf	;wreg free
   568                           
   569                           ;main.c: 38: LCD_goto(LCD_01_ADDRESS,2,1);
   570  000E04  0E02               	movlw	2
   571  000E06  6E0C               	movwf	LCD_goto@row,c
   572  000E08  0E01               	movlw	1
   573  000E0A  6E0D               	movwf	LCD_goto@column,c
   574  000E0C  5048               	movf	_LCD_01_ADDRESS,w,c
   575  000E0E  ECC3  F007         	call	_LCD_goto
   576                           
   577                           ;main.c: 39: LCD_puts(LCD_01_ADDRESS,text );
   578  000E12  0E60               	movlw	low _text
   579  000E14  6E0A               	movwf	LCD_puts@s,c
   580  000E16  0E00               	movlw	high _text
   581  000E18  6E0B               	movwf	LCD_puts@s+1,c
   582  000E1A  5048               	movf	_LCD_01_ADDRESS,w,c
   583  000E1C  EC33  F008         	call	_LCD_puts
   584                           
   585                           ;main.c: 40: LCD_goto(LCD_01_ADDRESS,3,1);
   586  000E20  0E03               	movlw	3
   587  000E22  6E0C               	movwf	LCD_goto@row,c
   588  000E24  0E01               	movlw	1
   589  000E26  6E0D               	movwf	LCD_goto@column,c
   590  000E28  5048               	movf	_LCD_01_ADDRESS,w,c
   591  000E2A  ECC3  F007         	call	_LCD_goto
   592                           
   593                           ;main.c: 41: LCD_puts(LCD_01_ADDRESS, "--------------\0");
   594  000E2E  0E29               	movlw	low STR_2
   595  000E30  6E0A               	movwf	LCD_puts@s,c
   596  000E32  0E08               	movlw	high STR_2
   597  000E34  6E0B               	movwf	LCD_puts@s+1,c
   598  000E36  5048               	movf	_LCD_01_ADDRESS,w,c
   599  000E38  EC33  F008         	call	_LCD_puts
   600                           
   601                           ;main.c: 42: LCD_goto(LCD_01_ADDRESS,4,1);
   602  000E3C  0E04               	movlw	4
   603  000E3E  6E0C               	movwf	LCD_goto@row,c
   604  000E40  0E01               	movlw	1
   605  000E42  6E0D               	movwf	LCD_goto@column,c
   606  000E44  5048               	movf	_LCD_01_ADDRESS,w,c
   607  000E46  ECC3  F007         	call	_LCD_goto
   608                           
   609                           ;main.c: 43: LCD_puts(LCD_01_ADDRESS, "Carvajal\0");
   610  000E4A  0E39               	movlw	low STR_3
   611  000E4C  6E0A               	movwf	LCD_puts@s,c
   612  000E4E  0E08               	movlw	high STR_3
   613  000E50  6E0B               	movwf	LCD_puts@s+1,c
   614  000E52  5048               	movf	_LCD_01_ADDRESS,w,c
   615  000E54  EC33  F008         	call	_LCD_puts
   616                           
   617                           ;main.c: 44: longDelay(10);
   618  000E58  0E00               	movlw	0
   619  000E5A  6E02               	movwf	longDelay@time+1,c
   620  000E5C  0E0A               	movlw	10
   621  000E5E  6E01               	movwf	longDelay@time,c
   622  000E60  ECE3  F008         	call	_longDelay	;wreg free
   623  000E64  D7B4               	goto	l1885
   624  000E66                     __end_of_main:
   625                           	opt stack 0
   626                           tblptru	equ	0xFF8
   627                           tblptrh	equ	0xFF7
   628                           tblptrl	equ	0xFF6
   629                           tablat	equ	0xFF5
   630                           postinc0	equ	0xFEE
   631                           wreg	equ	0xFE8
   632                           
   633 ;; *************** function _sprintf *****************
   634 ;; Defined at:
   635 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;  sp              2   47[COMRAM] PTR unsigned char 
   638 ;;		 -> text(80), 
   639 ;;  f               2   49[COMRAM] PTR const unsigned char 
   640 ;;		 -> STR_1(9), 
   641 ;; Auto vars:     Size  Location     Type
   642 ;;  val             4   60[COMRAM] unsigned long 
   643 ;;  tmpval          4    0        struct .
   644 ;;  cp              3    0        PTR const unsigned char 
   645 ;;  ap              2   64[COMRAM] PTR void [1]
   646 ;;		 -> ?_sprintf(2), 
   647 ;;  prec            2   58[COMRAM] int 
   648 ;;  len             2    0        unsigned int 
   649 ;;  c               1   66[COMRAM] char 
   650 ;;  flag            1   57[COMRAM] unsigned char 
   651 ;; Return value:  Size  Location     Type
   652 ;;                  2   47[COMRAM] int 
   653 ;; Registers used:
   654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   660 ;;      Params:         8       0       0       0       0       0       0       0       0
   661 ;;      Locals:        10       0       0       0       0       0       0       0       0
   662 ;;      Temps:          2       0       0       0       0       0       0       0       0
   663 ;;      Totals:        20       0       0       0       0       0       0       0       0
   664 ;;Total ram usage:       20 bytes
   665 ;; Hardware stack levels used:    1
   666 ;; Hardware stack levels required when called:    1
   667 ;; This function calls:
   668 ;;		___lldiv
   669 ;;		___llmod
   670 ;; This function is called by:
   671 ;;		_main
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           	psect	text1
   676  00084E                     __ptext1:
   677                           	opt stack 0
   678  00084E                     _sprintf:
   679                           	opt stack 29
   680                           
   681                           ;doprnt.c: 494: va_list ap;
   682                           ;doprnt.c: 499: signed char c;
   683                           ;doprnt.c: 504: int prec;
   684                           ;doprnt.c: 508: unsigned char flag;
   685                           ;doprnt.c: 523: union {
   686                           ;doprnt.c: 524: unsigned long vd;
   687                           ;doprnt.c: 525: double integ;
   688                           ;doprnt.c: 526: } tmpval;
   689                           ;doprnt.c: 528: unsigned long val;
   690                           ;doprnt.c: 529: unsigned len;
   691                           ;doprnt.c: 530: const char * cp;
   692                           ;doprnt.c: 533: *ap = __va_start();
   693                           
   694                           ;incstack = 0
   695  00084E  0E34               	movlw	low (?_sprintf+4)
   696  000850  6E41               	movwf	sprintf@ap,c
   697  000852  0E00               	movlw	high (?_sprintf+4)
   698  000854  6E42               	movwf	sprintf@ap+1,c
   699                           
   700                           ;doprnt.c: 536: while(c = *f++) {
   701  000856  D0BA               	goto	l1873
   702  000858                     l1825:
   703                           
   704                           ;doprnt.c: 538: if(c != '%')
   705  000858  0E25               	movlw	37
   706  00085A  1843               	xorwf	sprintf@c,w,c
   707  00085C  B4D8               	btfsc	status,2,c
   708  00085E  D009               	goto	l1831
   709                           
   710                           ;doprnt.c: 540: {
   711                           ;doprnt.c: 541: ((*sp++ = (c)));
   712  000860  C030  FFD9         	movff	sprintf@sp,fsr2l
   713  000864  C031  FFDA         	movff	sprintf@sp+1,fsr2h
   714  000868  C043  FFDF         	movff	sprintf@c,indf2
   715  00086C  4A30               	infsnz	sprintf@sp,f,c
   716  00086E  2A31               	incf	sprintf@sp+1,f,c
   717                           
   718                           ;doprnt.c: 542: continue;
   719  000870  D0AD               	goto	l1873
   720  000872                     l1831:
   721                           
   722                           ;doprnt.c: 543: }
   723                           ;doprnt.c: 548: flag = 0;
   724  000872  0E00               	movlw	0
   725  000874  6E3A               	movwf	sprintf@flag,c
   726                           
   727                           ;doprnt.c: 635: switch(c = *f++) {
   728                           
   729                           ;doprnt.c: 633: loop:
   730  000876  D005               	goto	l1839
   731  000878                     l1833:
   732                           
   733                           ;doprnt.c: 643: flag |= 0x10;
   734  000878  883A               	bsf	sprintf@flag,4,c
   735                           
   736                           ;doprnt.c: 644: goto loop;
   737  00087A  D003               	goto	l1839
   738  00087C                     l1835:
   739                           
   740                           ;doprnt.c: 818: flag |= 0xC0;
   741  00087C  0EC0               	movlw	192
   742  00087E  123A               	iorwf	sprintf@flag,f,c
   743                           
   744                           ;doprnt.c: 822: }
   745                           
   746                           ;doprnt.c: 819: break;
   747  000880  D014               	goto	l176
   748  000882                     l1839:
   749  000882  C032  FFF6         	movff	sprintf@f,tblptrl
   750  000886  C033  FFF7         	movff	sprintf@f+1,tblptrh
   751  00088A  4A32               	infsnz	sprintf@f,f,c
   752  00088C  2A33               	incf	sprintf@f+1,f,c
   753  00088E                     	if	0	;tblptru may be non-zero
   754  00088E                     	endif
   755  00088E                     	if	0	;tblptru may be non-zero
   756  00088E                     	endif
   757  00088E  0008               	tblrd		*
   758  000890  CFF5 F043          	movff	tablat,sprintf@c
   759  000894  5043               	movf	sprintf@c,w,c
   760                           
   761                           ; Switch size 1, requested type "space"
   762                           ; Number of cases is 3, Range of values is 0 to 117
   763                           ; switch strategies available:
   764                           ; Name         Instructions Cycles
   765                           ; simple_byte           10     6 (average)
   766                           ;	Chosen strategy is simple_byte
   767  000896  0A00               	xorlw	0	; case 0
   768  000898  B4D8               	btfsc	status,2,c
   769  00089A  D0A4               	goto	l1875
   770  00089C  0A6C               	xorlw	108	; case 108
   771  00089E  B4D8               	btfsc	status,2,c
   772  0008A0  D7EB               	goto	l1833
   773  0008A2  0A19               	xorlw	25	; case 117
   774  0008A4  B4D8               	btfsc	status,2,c
   775  0008A6  D7EA               	goto	l1835
   776  0008A8  D091               	goto	l1873
   777  0008AA                     l176:
   778                           
   779                           ;doprnt.c: 1273: {
   780                           ;doprnt.c: 1281: if(flag & 0x10)
   781  0008AA  A83A               	btfss	sprintf@flag,4,c
   782  0008AC  D00E               	goto	l1845
   783                           
   784                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
   785  0008AE  C041  FFD9         	movff	sprintf@ap,fsr2l
   786  0008B2  C042  FFDA         	movff	sprintf@ap+1,fsr2h
   787  0008B6  CFDE F03D          	movff	postinc2,sprintf@val
   788  0008BA  CFDE F03E          	movff	postinc2,sprintf@val+1
   789  0008BE  CFDE F03F          	movff	postinc2,sprintf@val+2
   790  0008C2  CFDE F040          	movff	postinc2,sprintf@val+3
   791  0008C6  0E04               	movlw	4
   792  0008C8  D00F               	goto	L1
   793  0008CA                     l1845:
   794                           
   795                           ;doprnt.c: 1283: else
   796                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
   797  0008CA  C041  FFD9         	movff	sprintf@ap,fsr2l
   798  0008CE  C042  FFDA         	movff	sprintf@ap+1,fsr2h
   799  0008D2  CFDE F038          	movff	postinc2,??_sprintf
   800  0008D6  CFDD F039          	movff	postdec2,??_sprintf+1
   801  0008DA  C038  F03D         	movff	??_sprintf,sprintf@val
   802  0008DE  C039  F03E         	movff	??_sprintf+1,sprintf@val+1
   803  0008E2  6A3F               	clrf	sprintf@val+2,c
   804  0008E4  6A40               	clrf	sprintf@val+3,c
   805  0008E6  0E02               	movlw	2
   806  0008E8                     L1:
   807  0008E8  2641               	addwf	sprintf@ap,f,c
   808  0008EA  0E00               	movlw	0
   809  0008EC  2242               	addwfc	sprintf@ap+1,f,c
   810                           
   811                           ;doprnt.c: 1287: }
   812                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   813  0008EE  0E01               	movlw	1
   814  0008F0  6E43               	movwf	sprintf@c,c
   815  0008F2                     l1851:
   816  0008F2  0E0A               	movlw	10
   817  0008F4  1843               	xorwf	sprintf@c,w,c
   818  0008F6  B4D8               	btfsc	status,2,c
   819  0008F8  D018               	goto	l1863
   820                           
   821                           ;doprnt.c: 1306: if(val < dpowers[c])
   822  0008FA  5043               	movf	sprintf@c,w,c
   823  0008FC  0D04               	mullw	4
   824  0008FE  0E01               	movlw	low _dpowers
   825  000900  24F3               	addwf	prodl,w,c
   826  000902  6EF6               	movwf	tblptrl,c
   827  000904  0E08               	movlw	high _dpowers
   828  000906  20F4               	addwfc	prodh,w,c
   829  000908  6EF7               	movwf	tblptrh,c
   830  00090A                     	if	0	;There are less than 3 active tblptr bytes
   831  00090A                     	endif
   832  00090A  0009               	tblrd		*+
   833  00090C  50F5               	movf	tablat,w,c
   834  00090E  5C3D               	subwf	sprintf@val,w,c
   835  000910  0009               	tblrd		*+
   836  000912  50F5               	movf	tablat,w,c
   837  000914  583E               	subwfb	sprintf@val+1,w,c
   838  000916  0009               	tblrd		*+
   839  000918  50F5               	movf	tablat,w,c
   840  00091A  583F               	subwfb	sprintf@val+2,w,c
   841  00091C  0009               	tblrd		*+
   842  00091E  50F5               	movf	tablat,w,c
   843  000920  5840               	subwfb	sprintf@val+3,w,c
   844  000922  A0D8               	btfss	status,0,c
   845  000924  D002               	goto	l1863
   846                           
   847                           ;doprnt.c: 1307: break;
   848  000926  2A43               	incf	sprintf@c,f,c
   849  000928  D7E4               	goto	l1851
   850  00092A                     l1863:
   851                           
   852                           ;doprnt.c: 1422: {
   853                           ;doprnt.c: 1469: }
   854                           ;doprnt.c: 1472: prec = c;
   855  00092A  5043               	movf	sprintf@c,w,c
   856  00092C  6E3B               	movwf	sprintf@prec,c
   857  00092E  6A3C               	clrf	sprintf@prec+1,c
   858  000930  BE3B               	btfsc	sprintf@prec,7,c
   859  000932  063C               	decf	sprintf@prec+1,f,c
   860                           
   861                           ;doprnt.c: 1474: while(prec--) {
   862  000934  D043               	goto	l1871
   863  000936                     l1865:
   864                           
   865                           ;doprnt.c: 1478: {
   866                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   867  000936  C03B  F038         	movff	sprintf@prec,??_sprintf
   868  00093A  C03C  F039         	movff	sprintf@prec+1,??_sprintf+1
   869  00093E  90D8               	bcf	status,0,c
   870  000940  3638               	rlcf	??_sprintf,f,c
   871  000942  3639               	rlcf	??_sprintf+1,f,c
   872  000944  90D8               	bcf	status,0,c
   873  000946  3638               	rlcf	??_sprintf,f,c
   874  000948  3639               	rlcf	??_sprintf+1,f,c
   875  00094A  0E01               	movlw	low _dpowers
   876  00094C  2438               	addwf	??_sprintf,w,c
   877  00094E  6EF6               	movwf	tblptrl,c
   878  000950  0E08               	movlw	high _dpowers
   879  000952  2039               	addwfc	??_sprintf+1,w,c
   880  000954  6EF7               	movwf	tblptrh,c
   881  000956                     	if	0	;There are less than 3 active tblptr bytes
   882  000956                     	endif
   883  000956  0009               	tblrd		*+
   884  000958  CFF5 F005          	movff	tablat,___lldiv@divisor
   885  00095C  0009               	tblrd		*+
   886  00095E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
   887  000962  0009               	tblrd		*+
   888  000964  CFF5 F007          	movff	tablat,___lldiv@divisor+2
   889  000968  000A               	tblrd		*-
   890  00096A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
   891  00096E  C03D  F001         	movff	sprintf@val,___lldiv@dividend
   892  000972  C03E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
   893  000976  C03F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
   894  00097A  C040  F004         	movff	sprintf@val+3,___lldiv@dividend+3
   895  00097E  EC82  F007         	call	___lldiv	;wreg free
   896  000982  C001  F00E         	movff	?___lldiv,___llmod@dividend
   897  000986  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
   898  00098A  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
   899  00098E  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
   900  000992  0E0A               	movlw	10
   901  000994  6E12               	movwf	___llmod@divisor,c
   902  000996  0E00               	movlw	0
   903  000998  6E13               	movwf	___llmod@divisor+1,c
   904  00099A  0E00               	movlw	0
   905  00099C  6E14               	movwf	___llmod@divisor+2,c
   906  00099E  0E00               	movlw	0
   907  0009A0  6E15               	movwf	___llmod@divisor+3,c
   908  0009A2  EC00  F008         	call	___llmod	;wreg free
   909  0009A6  500E               	movf	?___llmod,w,c
   910  0009A8  0F30               	addlw	48
   911  0009AA  6E43               	movwf	sprintf@c,c
   912                           
   913                           ;doprnt.c: 1523: }
   914                           ;doprnt.c: 1524: ((*sp++ = (c)));
   915  0009AC  C030  FFD9         	movff	sprintf@sp,fsr2l
   916  0009B0  C031  FFDA         	movff	sprintf@sp+1,fsr2h
   917  0009B4  C043  FFDF         	movff	sprintf@c,indf2
   918  0009B8  4A30               	infsnz	sprintf@sp,f,c
   919  0009BA  2A31               	incf	sprintf@sp+1,f,c
   920  0009BC                     l1871:
   921  0009BC  063B               	decf	sprintf@prec,f,c
   922  0009BE  A0D8               	btfss	status,0,c
   923  0009C0  063C               	decf	sprintf@prec+1,f,c
   924  0009C2  283B               	incf	sprintf@prec,w,c
   925  0009C4  E1B8               	bnz	l1865
   926  0009C6  283C               	incf	sprintf@prec+1,w,c
   927  0009C8  A4D8               	btfss	status,2,c
   928  0009CA  D7B5               	goto	l1865
   929  0009CC                     l1873:
   930  0009CC  C032  FFF6         	movff	sprintf@f,tblptrl
   931  0009D0  C033  FFF7         	movff	sprintf@f+1,tblptrh
   932  0009D4  4A32               	infsnz	sprintf@f,f,c
   933  0009D6  2A33               	incf	sprintf@f+1,f,c
   934  0009D8                     	if	0	;tblptru may be non-zero
   935  0009D8                     	endif
   936  0009D8                     	if	0	;tblptru may be non-zero
   937  0009D8                     	endif
   938  0009D8  0008               	tblrd		*
   939  0009DA  CFF5 F043          	movff	tablat,sprintf@c
   940  0009DE  5043               	movf	sprintf@c,w,c
   941  0009E0  A4D8               	btfss	status,2,c
   942  0009E2  D73A               	goto	l1825
   943  0009E4                     l1875:
   944                           
   945                           ;doprnt.c: 1538: *sp = 0;
   946  0009E4  C030  FFD9         	movff	sprintf@sp,fsr2l
   947  0009E8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
   948  0009EC  0E00               	movlw	0
   949  0009EE  6EDF               	movwf	indf2,c
   950  0009F0  0012               	return	
   951  0009F2                     __end_of_sprintf:
   952                           	opt stack 0
   953                           tblptru	equ	0xFF8
   954                           tblptrh	equ	0xFF7
   955                           tblptrl	equ	0xFF6
   956                           tablat	equ	0xFF5
   957                           prodh	equ	0xFF4
   958                           prodl	equ	0xFF3
   959                           postinc0	equ	0xFEE
   960                           wreg	equ	0xFE8
   961                           indf2	equ	0xFDF
   962                           postinc2	equ	0xFDE
   963                           postdec2	equ	0xFDD
   964                           fsr2h	equ	0xFDA
   965                           fsr2l	equ	0xFD9
   966                           status	equ	0xFD8
   967                           
   968 ;; *************** function ___llmod *****************
   969 ;; Defined at:
   970 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
   971 ;; Parameters:    Size  Location     Type
   972 ;;  dividend        4   13[COMRAM] unsigned long 
   973 ;;  divisor         4   17[COMRAM] unsigned long 
   974 ;; Auto vars:     Size  Location     Type
   975 ;;  counter         1   21[COMRAM] unsigned char 
   976 ;; Return value:  Size  Location     Type
   977 ;;                  4   13[COMRAM] unsigned long 
   978 ;; Registers used:
   979 ;;		wreg, status,2, status,0
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   985 ;;      Params:         8       0       0       0       0       0       0       0       0
   986 ;;      Locals:         1       0       0       0       0       0       0       0       0
   987 ;;      Temps:          0       0       0       0       0       0       0       0       0
   988 ;;      Totals:         9       0       0       0       0       0       0       0       0
   989 ;;Total ram usage:        9 bytes
   990 ;; Hardware stack levels used:    1
   991 ;; This function calls:
   992 ;;		Nothing
   993 ;; This function is called by:
   994 ;;		_sprintf
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text2
   999  001000                     __ptext2:
  1000                           	opt stack 0
  1001  001000                     ___llmod:
  1002                           	opt stack 29
  1003                           
  1004                           ;incstack = 0
  1005  001000  5012               	movf	___llmod@divisor,w,c
  1006  001002  1013               	iorwf	___llmod@divisor+1,w,c
  1007  001004  1014               	iorwf	___llmod@divisor+2,w,c
  1008  001006  1015               	iorwf	___llmod@divisor+3,w,c
  1009  001008  B4D8               	btfsc	status,2,c
  1010  00100A  D024               	goto	l611
  1011  00100C  0E01               	movlw	1
  1012  00100E  6E16               	movwf	___llmod@counter,c
  1013  001010  D006               	goto	l1737
  1014  001012                     l1735:
  1015  001012  90D8               	bcf	status,0,c
  1016  001014  3612               	rlcf	___llmod@divisor,f,c
  1017  001016  3613               	rlcf	___llmod@divisor+1,f,c
  1018  001018  3614               	rlcf	___llmod@divisor+2,f,c
  1019  00101A  3615               	rlcf	___llmod@divisor+3,f,c
  1020  00101C  2A16               	incf	___llmod@counter,f,c
  1021  00101E                     l1737:
  1022  00101E  AE15               	btfss	___llmod@divisor+3,7,c
  1023  001020  D7F8               	goto	l1735
  1024  001022                     l1739:
  1025  001022  5012               	movf	___llmod@divisor,w,c
  1026  001024  5C0E               	subwf	___llmod@dividend,w,c
  1027  001026  5013               	movf	___llmod@divisor+1,w,c
  1028  001028  580F               	subwfb	___llmod@dividend+1,w,c
  1029  00102A  5014               	movf	___llmod@divisor+2,w,c
  1030  00102C  5810               	subwfb	___llmod@dividend+2,w,c
  1031  00102E  5015               	movf	___llmod@divisor+3,w,c
  1032  001030  5811               	subwfb	___llmod@dividend+3,w,c
  1033  001032  A0D8               	btfss	status,0,c
  1034  001034  D008               	goto	l1743
  1035  001036  5012               	movf	___llmod@divisor,w,c
  1036  001038  5E0E               	subwf	___llmod@dividend,f,c
  1037  00103A  5013               	movf	___llmod@divisor+1,w,c
  1038  00103C  5A0F               	subwfb	___llmod@dividend+1,f,c
  1039  00103E  5014               	movf	___llmod@divisor+2,w,c
  1040  001040  5A10               	subwfb	___llmod@dividend+2,f,c
  1041  001042  5015               	movf	___llmod@divisor+3,w,c
  1042  001044  5A11               	subwfb	___llmod@dividend+3,f,c
  1043  001046                     l1743:
  1044  001046  90D8               	bcf	status,0,c
  1045  001048  3215               	rrcf	___llmod@divisor+3,f,c
  1046  00104A  3214               	rrcf	___llmod@divisor+2,f,c
  1047  00104C  3213               	rrcf	___llmod@divisor+1,f,c
  1048  00104E  3212               	rrcf	___llmod@divisor,f,c
  1049  001050  2E16               	decfsz	___llmod@counter,f,c
  1050  001052  D7E7               	goto	l1739
  1051  001054                     l611:
  1052  001054  C00E  F00E         	movff	___llmod@dividend,?___llmod
  1053  001058  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  1054  00105C  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  1055  001060  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  1056  001064  0012               	return		;funcret
  1057  001066                     __end_of___llmod:
  1058                           	opt stack 0
  1059                           tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           prodh	equ	0xFF4
  1064                           prodl	equ	0xFF3
  1065                           postinc0	equ	0xFEE
  1066                           wreg	equ	0xFE8
  1067                           indf2	equ	0xFDF
  1068                           postinc2	equ	0xFDE
  1069                           postdec2	equ	0xFDD
  1070                           fsr2h	equ	0xFDA
  1071                           fsr2l	equ	0xFD9
  1072                           status	equ	0xFD8
  1073                           
  1074 ;; *************** function ___lldiv *****************
  1075 ;; Defined at:
  1076 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;  dividend        4    0[COMRAM] unsigned long 
  1079 ;;  divisor         4    4[COMRAM] unsigned long 
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;  quotient        4    8[COMRAM] unsigned long 
  1082 ;;  counter         1   12[COMRAM] unsigned char 
  1083 ;; Return value:  Size  Location     Type
  1084 ;;                  4    0[COMRAM] unsigned long 
  1085 ;; Registers used:
  1086 ;;		wreg, status,2, status,0
  1087 ;; Tracked objects:
  1088 ;;		On entry : 0/0
  1089 ;;		On exit  : 0/0
  1090 ;;		Unchanged: 0/0
  1091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1092 ;;      Params:         8       0       0       0       0       0       0       0       0
  1093 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1094 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1095 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1096 ;;Total ram usage:       13 bytes
  1097 ;; Hardware stack levels used:    1
  1098 ;; This function calls:
  1099 ;;		Nothing
  1100 ;; This function is called by:
  1101 ;;		_sprintf
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           	psect	text3
  1106  000F04                     __ptext3:
  1107                           	opt stack 0
  1108  000F04                     ___lldiv:
  1109                           	opt stack 29
  1110                           
  1111                           ;incstack = 0
  1112  000F04  0E00               	movlw	0
  1113  000F06  6E09               	movwf	___lldiv@quotient,c
  1114  000F08  0E00               	movlw	0
  1115  000F0A  6E0A               	movwf	___lldiv@quotient+1,c
  1116  000F0C  0E00               	movlw	0
  1117  000F0E  6E0B               	movwf	___lldiv@quotient+2,c
  1118  000F10  0E00               	movlw	0
  1119  000F12  6E0C               	movwf	___lldiv@quotient+3,c
  1120  000F14  5005               	movf	___lldiv@divisor,w,c
  1121  000F16  1006               	iorwf	___lldiv@divisor+1,w,c
  1122  000F18  1007               	iorwf	___lldiv@divisor+2,w,c
  1123  000F1A  1008               	iorwf	___lldiv@divisor+3,w,c
  1124  000F1C  B4D8               	btfsc	status,2,c
  1125  000F1E  D02A               	goto	l601
  1126  000F20  0E01               	movlw	1
  1127  000F22  6E0D               	movwf	___lldiv@counter,c
  1128  000F24  D006               	goto	l1717
  1129  000F26                     l1715:
  1130  000F26  90D8               	bcf	status,0,c
  1131  000F28  3605               	rlcf	___lldiv@divisor,f,c
  1132  000F2A  3606               	rlcf	___lldiv@divisor+1,f,c
  1133  000F2C  3607               	rlcf	___lldiv@divisor+2,f,c
  1134  000F2E  3608               	rlcf	___lldiv@divisor+3,f,c
  1135  000F30  2A0D               	incf	___lldiv@counter,f,c
  1136  000F32                     l1717:
  1137  000F32  AE08               	btfss	___lldiv@divisor+3,7,c
  1138  000F34  D7F8               	goto	l1715
  1139  000F36                     l1719:
  1140  000F36  90D8               	bcf	status,0,c
  1141  000F38  3609               	rlcf	___lldiv@quotient,f,c
  1142  000F3A  360A               	rlcf	___lldiv@quotient+1,f,c
  1143  000F3C  360B               	rlcf	___lldiv@quotient+2,f,c
  1144  000F3E  360C               	rlcf	___lldiv@quotient+3,f,c
  1145  000F40  5005               	movf	___lldiv@divisor,w,c
  1146  000F42  5C01               	subwf	___lldiv@dividend,w,c
  1147  000F44  5006               	movf	___lldiv@divisor+1,w,c
  1148  000F46  5802               	subwfb	___lldiv@dividend+1,w,c
  1149  000F48  5007               	movf	___lldiv@divisor+2,w,c
  1150  000F4A  5803               	subwfb	___lldiv@dividend+2,w,c
  1151  000F4C  5008               	movf	___lldiv@divisor+3,w,c
  1152  000F4E  5804               	subwfb	___lldiv@dividend+3,w,c
  1153  000F50  A0D8               	btfss	status,0,c
  1154  000F52  D009               	goto	l1727
  1155  000F54  5005               	movf	___lldiv@divisor,w,c
  1156  000F56  5E01               	subwf	___lldiv@dividend,f,c
  1157  000F58  5006               	movf	___lldiv@divisor+1,w,c
  1158  000F5A  5A02               	subwfb	___lldiv@dividend+1,f,c
  1159  000F5C  5007               	movf	___lldiv@divisor+2,w,c
  1160  000F5E  5A03               	subwfb	___lldiv@dividend+2,f,c
  1161  000F60  5008               	movf	___lldiv@divisor+3,w,c
  1162  000F62  5A04               	subwfb	___lldiv@dividend+3,f,c
  1163  000F64  8009               	bsf	___lldiv@quotient,0,c
  1164  000F66                     l1727:
  1165  000F66  90D8               	bcf	status,0,c
  1166  000F68  3208               	rrcf	___lldiv@divisor+3,f,c
  1167  000F6A  3207               	rrcf	___lldiv@divisor+2,f,c
  1168  000F6C  3206               	rrcf	___lldiv@divisor+1,f,c
  1169  000F6E  3205               	rrcf	___lldiv@divisor,f,c
  1170  000F70  2E0D               	decfsz	___lldiv@counter,f,c
  1171  000F72  D7E1               	goto	l1719
  1172  000F74                     l601:
  1173  000F74  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1174  000F78  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1175  000F7C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1176  000F80  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1177  000F84  0012               	return		;funcret
  1178  000F86                     __end_of___lldiv:
  1179                           	opt stack 0
  1180                           tblptru	equ	0xFF8
  1181                           tblptrh	equ	0xFF7
  1182                           tblptrl	equ	0xFF6
  1183                           tablat	equ	0xFF5
  1184                           prodh	equ	0xFF4
  1185                           prodl	equ	0xFF3
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           indf2	equ	0xFDF
  1189                           postinc2	equ	0xFDE
  1190                           postdec2	equ	0xFDD
  1191                           fsr2h	equ	0xFDA
  1192                           fsr2l	equ	0xFD9
  1193                           status	equ	0xFD8
  1194                           
  1195 ;; *************** function _longDelay *****************
  1196 ;; Defined at:
  1197 ;;		line 16 in file "main.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  time            2    0[COMRAM] int 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  i               2    3[COMRAM] int 
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  1    wreg      void 
  1204 ;; Registers used:
  1205 ;;		wreg, status,2, status,0
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1211 ;;      Params:         2       0       0       0       0       0       0       0       0
  1212 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1213 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1214 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1215 ;;Total ram usage:        5 bytes
  1216 ;; Hardware stack levels used:    1
  1217 ;; This function calls:
  1218 ;;		Nothing
  1219 ;; This function is called by:
  1220 ;;		_main
  1221 ;; This function uses a non-reentrant model
  1222 ;;
  1223                           
  1224                           	psect	text4
  1225  0011C6                     __ptext4:
  1226                           	opt stack 0
  1227  0011C6                     _longDelay:
  1228                           	opt stack 30
  1229                           
  1230                           ;main.c: 17: for (int i = 0 ; i < time; i++) _delay((unsigned long)((50)*(8000000/4000.0
      +                          )));
  1231                           
  1232                           ;incstack = 0
  1233  0011C6  0E00               	movlw	0
  1234  0011C8  6E05               	movwf	longDelay@i+1,c
  1235  0011CA  0E00               	movlw	0
  1236  0011CC  6E04               	movwf	longDelay@i,c
  1237  0011CE  D009               	goto	l128
  1238  0011D0                     l1773:
  1239  0011D0  0E82               	movlw	130
  1240  0011D2  6E03               	movwf	??_longDelay& (0+255),c
  1241  0011D4  0EDE               	movlw	222
  1242  0011D6                     u1457:
  1243  0011D6  2EE8               	decfsz	wreg,f,c
  1244  0011D8  D7FE               	bra	u1457
  1245  0011DA  2E03               	decfsz	??_longDelay& (0+255),f,c
  1246  0011DC  D7FC               	bra	u1457
  1247  0011DE  4A04               	infsnz	longDelay@i,f,c
  1248  0011E0  2A05               	incf	longDelay@i+1,f,c
  1249  0011E2                     l128:
  1250  0011E2  5001               	movf	longDelay@time,w,c
  1251  0011E4  5C04               	subwf	longDelay@i,w,c
  1252  0011E6  5005               	movf	longDelay@i+1,w,c
  1253  0011E8  0A80               	xorlw	128
  1254  0011EA  6E03               	movwf	??_longDelay& (0+255),c
  1255  0011EC  5002               	movf	longDelay@time+1,w,c
  1256  0011EE  0A80               	xorlw	128
  1257  0011F0  5803               	subwfb	??_longDelay& (0+255),w,c
  1258  0011F2  B0D8               	btfsc	status,0,c
  1259  0011F4  0012               	return	
  1260  0011F6  D7EC               	goto	l1773
  1261  0011F8                     __end_of_longDelay:
  1262                           	opt stack 0
  1263                           tblptru	equ	0xFF8
  1264                           tblptrh	equ	0xFF7
  1265                           tblptrl	equ	0xFF6
  1266                           tablat	equ	0xFF5
  1267                           prodh	equ	0xFF4
  1268                           prodl	equ	0xFF3
  1269                           postinc0	equ	0xFEE
  1270                           wreg	equ	0xFE8
  1271                           indf2	equ	0xFDF
  1272                           postinc2	equ	0xFDE
  1273                           postdec2	equ	0xFDD
  1274                           fsr2h	equ	0xFDA
  1275                           fsr2l	equ	0xFD9
  1276                           status	equ	0xFD8
  1277                           
  1278 ;; *************** function _keyNumber *****************
  1279 ;; Defined at:
  1280 ;;		line 5 in file "funciones.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;		None
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;  arreglo        20   18[COMRAM] unsigned char [20]
  1285 ;;  number          4   38[COMRAM] unsigned long 
  1286 ;;  i               2   45[COMRAM] unsigned int 
  1287 ;;  contador        2   42[COMRAM] unsigned int 
  1288 ;;  tecla           1   44[COMRAM] unsigned char 
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  4   14[COMRAM] unsigned long 
  1291 ;; Registers used:
  1292 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1298 ;;      Params:         4       0       0       0       0       0       0       0       0
  1299 ;;      Locals:        29       0       0       0       0       0       0       0       0
  1300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1301 ;;      Totals:        33       0       0       0       0       0       0       0       0
  1302 ;;Total ram usage:       33 bytes
  1303 ;; Hardware stack levels used:    1
  1304 ;; Hardware stack levels required when called:    5
  1305 ;; This function calls:
  1306 ;;		_KP_Readbutton
  1307 ;;		_LCD_goto
  1308 ;;		_LCD_puts
  1309 ;;		_atoi
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text5
  1316  000CF4                     __ptext5:
  1317                           	opt stack 0
  1318  000CF4                     _keyNumber:
  1319                           	opt stack 25
  1320                           
  1321                           ;funciones.c: 6: unsigned char arreglo[20];
  1322                           ;funciones.c: 7: unsigned int contador =0,i=0;
  1323                           
  1324                           ;incstack = 0
  1325  000CF4  0E00               	movlw	0
  1326  000CF6  6E2C               	movwf	keyNumber@contador+1,c
  1327  000CF8  0E00               	movlw	0
  1328  000CFA  6E2B               	movwf	keyNumber@contador,c
  1329  000CFC  0E00               	movlw	0
  1330  000CFE  6E2F               	movwf	keyNumber@i+1,c
  1331  000D00  0E00               	movlw	0
  1332  000D02  6E2E               	movwf	keyNumber@i,c
  1333  000D04                     l1791:
  1334  000D04  502F               	movf	keyNumber@i+1,w,c
  1335  000D06  E10F               	bnz	l1801
  1336  000D08  0E0A               	movlw	10
  1337  000D0A  5C2E               	subwf	keyNumber@i,w,c
  1338  000D0C  B0D8               	btfsc	status,0,c
  1339  000D0E  D00B               	goto	l1801
  1340                           
  1341                           ;funciones.c: 10: arreglo[i]=0;
  1342  000D10  0E13               	movlw	low keyNumber@arreglo
  1343  000D12  242E               	addwf	keyNumber@i,w,c
  1344  000D14  6ED9               	movwf	fsr2l,c
  1345  000D16  0E00               	movlw	high keyNumber@arreglo
  1346  000D18  202F               	addwfc	keyNumber@i+1,w,c
  1347  000D1A  6EDA               	movwf	fsr2h,c
  1348  000D1C  0E00               	movlw	0
  1349  000D1E  6EDF               	movwf	indf2,c
  1350  000D20  4A2E               	infsnz	keyNumber@i,f,c
  1351  000D22  2A2F               	incf	keyNumber@i+1,f,c
  1352  000D24  D7EF               	goto	l1791
  1353  000D26                     l1801:
  1354                           
  1355                           ;funciones.c: 14: tecla = KP_Readbutton();
  1356  000D26  ECF9  F004         	call	_KP_Readbutton	;wreg free
  1357  000D2A  6E2D               	movwf	keyNumber@tecla,c
  1358                           
  1359                           ;funciones.c: 16: if (tecla != '+'){
  1360  000D2C  0E2B               	movlw	43
  1361  000D2E  182D               	xorwf	keyNumber@tecla,w,c
  1362  000D30  B4D8               	btfsc	status,2,c
  1363  000D32  D019               	goto	l1813
  1364                           
  1365                           ;funciones.c: 17: arreglo[contador]= tecla;
  1366  000D34  0E13               	movlw	low keyNumber@arreglo
  1367  000D36  242B               	addwf	keyNumber@contador,w,c
  1368  000D38  6ED9               	movwf	fsr2l,c
  1369  000D3A  0E00               	movlw	high keyNumber@arreglo
  1370  000D3C  202C               	addwfc	keyNumber@contador+1,w,c
  1371  000D3E  6EDA               	movwf	fsr2h,c
  1372  000D40  C02D  FFDF         	movff	keyNumber@tecla,indf2
  1373                           
  1374                           ;funciones.c: 18: LCD_goto(LCD_01_ADDRESS,1,1);
  1375  000D44  0E01               	movlw	1
  1376  000D46  6E0C               	movwf	LCD_goto@row,c
  1377  000D48  0E01               	movlw	1
  1378  000D4A  6E0D               	movwf	LCD_goto@column,c
  1379  000D4C  5048               	movf	_LCD_01_ADDRESS,w,c
  1380  000D4E  ECC3  F007         	call	_LCD_goto
  1381                           
  1382                           ;funciones.c: 19: LCD_puts(LCD_01_ADDRESS, arreglo);
  1383  000D52  0E13               	movlw	low keyNumber@arreglo
  1384  000D54  6E0A               	movwf	LCD_puts@s,c
  1385  000D56  0E00               	movlw	high keyNumber@arreglo
  1386  000D58  6E0B               	movwf	LCD_puts@s+1,c
  1387  000D5A  5048               	movf	_LCD_01_ADDRESS,w,c
  1388  000D5C  EC33  F008         	call	_LCD_puts
  1389                           
  1390                           ;funciones.c: 20: contador++;
  1391  000D60  4A2B               	infsnz	keyNumber@contador,f,c
  1392  000D62  2A2C               	incf	keyNumber@contador+1,f,c
  1393                           
  1394                           ;funciones.c: 22: }
  1395  000D64  D7E0               	goto	l1801
  1396  000D66                     l1813:
  1397                           
  1398                           ;funciones.c: 23: else
  1399                           ;funciones.c: 24: {
  1400                           ;funciones.c: 25: LCD_goto(LCD_01_ADDRESS,1,1);
  1401  000D66  0E01               	movlw	1
  1402  000D68  6E0C               	movwf	LCD_goto@row,c
  1403  000D6A  0E01               	movlw	1
  1404  000D6C  6E0D               	movwf	LCD_goto@column,c
  1405  000D6E  5048               	movf	_LCD_01_ADDRESS,w,c
  1406  000D70  ECC3  F007         	call	_LCD_goto
  1407                           
  1408                           ;funciones.c: 26: LCD_puts(LCD_01_ADDRESS, arreglo);
  1409  000D74  0E13               	movlw	low keyNumber@arreglo
  1410  000D76  6E0A               	movwf	LCD_puts@s,c
  1411  000D78  0E00               	movlw	high keyNumber@arreglo
  1412  000D7A  6E0B               	movwf	LCD_puts@s+1,c
  1413  000D7C  5048               	movf	_LCD_01_ADDRESS,w,c
  1414  000D7E  EC33  F008         	call	_LCD_puts
  1415                           
  1416                           ;funciones.c: 28: }
  1417                           ;funciones.c: 32: }
  1418                           ;funciones.c: 34: number = (unsigned long int)atoi(arreglo);
  1419                           
  1420                           ;funciones.c: 27: break;
  1421  000D82  0E13               	movlw	low keyNumber@arreglo
  1422  000D84  6E07               	movwf	atoi@s,c
  1423  000D86  0E00               	movlw	high keyNumber@arreglo
  1424  000D88  6E08               	movwf	atoi@s+1,c
  1425  000D8A  EC13  F006         	call	_atoi	;wreg free
  1426  000D8E  C007  F027         	movff	?_atoi,keyNumber@number
  1427  000D92  C008  F028         	movff	?_atoi+1,keyNumber@number+1
  1428  000D96  0E00               	movlw	0
  1429  000D98  BE28               	btfsc	keyNumber@number+1,7,c
  1430  000D9A  0EFF               	movlw	-1
  1431  000D9C  6E29               	movwf	keyNumber@number+2,c
  1432  000D9E  6E2A               	movwf	keyNumber@number+3,c
  1433                           
  1434                           ;funciones.c: 35: return number;
  1435  000DA0  C027  F00F         	movff	keyNumber@number,?_keyNumber
  1436  000DA4  C028  F010         	movff	keyNumber@number+1,?_keyNumber+1
  1437  000DA8  C029  F011         	movff	keyNumber@number+2,?_keyNumber+2
  1438  000DAC  C02A  F012         	movff	keyNumber@number+3,?_keyNumber+3
  1439  000DB0  0012               	return	
  1440  000DB2                     __end_of_keyNumber:
  1441                           	opt stack 0
  1442                           tblptru	equ	0xFF8
  1443                           tblptrh	equ	0xFF7
  1444                           tblptrl	equ	0xFF6
  1445                           tablat	equ	0xFF5
  1446                           prodh	equ	0xFF4
  1447                           prodl	equ	0xFF3
  1448                           postinc0	equ	0xFEE
  1449                           wreg	equ	0xFE8
  1450                           indf2	equ	0xFDF
  1451                           postinc2	equ	0xFDE
  1452                           postdec2	equ	0xFDD
  1453                           fsr2h	equ	0xFDA
  1454                           fsr2l	equ	0xFD9
  1455                           status	equ	0xFD8
  1456                           
  1457 ;; *************** function _atoi *****************
  1458 ;; Defined at:
  1459 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  s               2    6[COMRAM] PTR const unsigned char 
  1462 ;;		 -> keyNumber@arreglo(20), 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  a               2   11[COMRAM] int 
  1465 ;;  sign            1   10[COMRAM] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  2    6[COMRAM] int 
  1468 ;; Registers used:
  1469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1475 ;;      Params:         2       0       0       0       0       0       0       0       0
  1476 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1477 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1478 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1479 ;;Total ram usage:        7 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    1
  1482 ;; This function calls:
  1483 ;;		___wmul
  1484 ;;		_isdigit
  1485 ;; This function is called by:
  1486 ;;		_keyNumber
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text6
  1491  000C26                     __ptext6:
  1492                           	opt stack 0
  1493  000C26                     _atoi:
  1494                           	opt stack 28
  1495                           
  1496                           ;incstack = 0
  1497  000C26  D002               	goto	l1685
  1498  000C28                     l1683:
  1499  000C28  4A07               	infsnz	atoi@s,f,c
  1500  000C2A  2A08               	incf	atoi@s+1,f,c
  1501  000C2C                     l1685:
  1502  000C2C  C007  FFD9         	movff	atoi@s,fsr2l
  1503  000C30  C008  FFDA         	movff	atoi@s+1,fsr2h
  1504  000C34  0E20               	movlw	32
  1505  000C36  18DE               	xorwf	postinc2,w,c
  1506  000C38  B4D8               	btfsc	status,2,c
  1507  000C3A  D7F6               	goto	l1683
  1508  000C3C  C007  FFD9         	movff	atoi@s,fsr2l
  1509  000C40  C008  FFDA         	movff	atoi@s+1,fsr2h
  1510  000C44  0E09               	movlw	9
  1511  000C46  18DE               	xorwf	postinc2,w,c
  1512  000C48  B4D8               	btfsc	status,2,c
  1513  000C4A  D7EE               	goto	l1683
  1514  000C4C  0E00               	movlw	0
  1515  000C4E  6E0D               	movwf	atoi@a+1,c
  1516  000C50  0E00               	movlw	0
  1517  000C52  6E0C               	movwf	atoi@a,c
  1518  000C54  0E00               	movlw	0
  1519  000C56  6E0B               	movwf	atoi@sign,c
  1520  000C58  C007  FFD9         	movff	atoi@s,fsr2l
  1521  000C5C  C008  FFDA         	movff	atoi@s+1,fsr2h
  1522  000C60  0E2D               	movlw	45
  1523  000C62  18DE               	xorwf	postinc2,w,c
  1524  000C64  A4D8               	btfss	status,2,c
  1525  000C66  D002               	goto	l1695
  1526  000C68  2A0B               	incf	atoi@sign,f,c
  1527  000C6A  D024               	goto	l1701
  1528  000C6C                     l1695:
  1529  000C6C  C007  FFD9         	movff	atoi@s,fsr2l
  1530  000C70  C008  FFDA         	movff	atoi@s+1,fsr2h
  1531  000C74  0E2B               	movlw	43
  1532  000C76  18DE               	xorwf	postinc2,w,c
  1533  000C78  A4D8               	btfss	status,2,c
  1534  000C7A  D01E               	goto	l1703
  1535  000C7C  D01B               	goto	l1701
  1536  000C7E                     l1699:
  1537  000C7E  C00C  F001         	movff	atoi@a,___wmul@multiplier
  1538  000C82  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  1539  000C86  0E00               	movlw	0
  1540  000C88  6E04               	movwf	___wmul@multiplicand+1,c
  1541  000C8A  0E0A               	movlw	10
  1542  000C8C  6E03               	movwf	___wmul@multiplicand,c
  1543  000C8E  EC12  F009         	call	___wmul	;wreg free
  1544  000C92  C007  FFD9         	movff	atoi@s,fsr2l
  1545  000C96  C008  FFDA         	movff	atoi@s+1,fsr2h
  1546  000C9A  50DF               	movf	indf2,w,c
  1547  000C9C  6E09               	movwf	??_atoi& (0+255),c
  1548  000C9E  6A0A               	clrf	(??_atoi+1)& (0+255),c
  1549  000CA0  5001               	movf	?___wmul,w,c
  1550  000CA2  2609               	addwf	??_atoi,f,c
  1551  000CA4  5002               	movf	?___wmul+1,w,c
  1552  000CA6  220A               	addwfc	??_atoi+1,f,c
  1553  000CA8  0ED0               	movlw	208
  1554  000CAA  2409               	addwf	??_atoi,w,c
  1555  000CAC  6E0C               	movwf	atoi@a,c
  1556  000CAE  0EFF               	movlw	255
  1557  000CB0  200A               	addwfc	??_atoi+1,w,c
  1558  000CB2  6E0D               	movwf	atoi@a+1,c
  1559  000CB4                     l1701:
  1560  000CB4  4A07               	infsnz	atoi@s,f,c
  1561  000CB6  2A08               	incf	atoi@s+1,f,c
  1562  000CB8                     l1703:
  1563  000CB8  C007  FFD9         	movff	atoi@s,fsr2l
  1564  000CBC  C008  FFDA         	movff	atoi@s+1,fsr2h
  1565  000CC0  50DF               	movf	indf2,w,c
  1566  000CC2  EC35  F009         	call	_isdigit
  1567  000CC6  B0D8               	btfsc	status,0,c
  1568  000CC8  D7DA               	goto	l1699
  1569  000CCA  500B               	movf	atoi@sign,w,c
  1570  000CCC  B4D8               	btfsc	status,2,c
  1571  000CCE  D00D               	goto	l404
  1572  000CD0  C00C  F009         	movff	atoi@a,??_atoi
  1573  000CD4  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  1574  000CD8  1E09               	comf	??_atoi,f,c
  1575  000CDA  1E0A               	comf	??_atoi+1,f,c
  1576  000CDC  4A09               	infsnz	??_atoi,f,c
  1577  000CDE  2A0A               	incf	??_atoi+1,f,c
  1578  000CE0  C009  F007         	movff	??_atoi,?_atoi
  1579  000CE4  C00A  F008         	movff	??_atoi+1,?_atoi+1
  1580  000CE8  0012               	return	
  1581  000CEA                     l404:
  1582  000CEA  C00C  F007         	movff	atoi@a,?_atoi
  1583  000CEE  C00D  F008         	movff	atoi@a+1,?_atoi+1
  1584  000CF2  0012               	return		;funcret
  1585  000CF4                     __end_of_atoi:
  1586                           	opt stack 0
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           prodh	equ	0xFF4
  1592                           prodl	equ	0xFF3
  1593                           postinc0	equ	0xFEE
  1594                           wreg	equ	0xFE8
  1595                           indf2	equ	0xFDF
  1596                           postinc2	equ	0xFDE
  1597                           postdec2	equ	0xFDD
  1598                           fsr2h	equ	0xFDA
  1599                           fsr2l	equ	0xFD9
  1600                           status	equ	0xFD8
  1601                           
  1602 ;; *************** function _isdigit *****************
  1603 ;; Defined at:
  1604 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  c               1    wreg     unsigned char 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  c               1    2[COMRAM] unsigned char 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;		None               void
  1611 ;; Registers used:
  1612 ;;		wreg, status,2, status,0
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1618 ;;      Params:         0       0       0       0       0       0       0       0       0
  1619 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1620 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1621 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1622 ;;Total ram usage:        3 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; This function calls:
  1625 ;;		Nothing
  1626 ;; This function is called by:
  1627 ;;		_atoi
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text7
  1632  00126A                     __ptext7:
  1633                           	opt stack 0
  1634  00126A                     _isdigit:
  1635                           	opt stack 28
  1636                           
  1637                           ;incstack = 0
  1638                           ;isdigit@c stored from wreg
  1639  00126A  6E03               	movwf	isdigit@c,c
  1640  00126C  0E00               	movlw	0
  1641  00126E  6E02               	movwf	_isdigit$813,c
  1642  001270  0E3A               	movlw	58
  1643  001272  6003               	cpfslt	isdigit@c,c
  1644  001274  D005               	goto	l1549
  1645  001276  0E2F               	movlw	47
  1646  001278  6403               	cpfsgt	isdigit@c,c
  1647  00127A  D002               	goto	l1549
  1648  00127C  0E01               	movlw	1
  1649  00127E  6E02               	movwf	_isdigit$813,c
  1650  001280                     l1549:
  1651  001280  C002  F001         	movff	_isdigit$813,??_isdigit
  1652  001284  3001               	rrcf	??_isdigit,w,c
  1653  001286  0012               	return	
  1654  001288                     __end_of_isdigit:
  1655                           	opt stack 0
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           prodh	equ	0xFF4
  1661                           prodl	equ	0xFF3
  1662                           postinc0	equ	0xFEE
  1663                           wreg	equ	0xFE8
  1664                           indf2	equ	0xFDF
  1665                           postinc2	equ	0xFDE
  1666                           postdec2	equ	0xFDD
  1667                           fsr2h	equ	0xFDA
  1668                           fsr2l	equ	0xFD9
  1669                           status	equ	0xFD8
  1670                           
  1671 ;; *************** function ___wmul *****************
  1672 ;; Defined at:
  1673 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;  multiplier      2    0[COMRAM] unsigned int 
  1676 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;  product         2    4[COMRAM] unsigned int 
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  2    0[COMRAM] unsigned int 
  1681 ;; Registers used:
  1682 ;;		wreg, status,2, status,0, prodl, prodh
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1688 ;;      Params:         4       0       0       0       0       0       0       0       0
  1689 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1690 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1691 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1692 ;;Total ram usage:        6 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; This function calls:
  1695 ;;		Nothing
  1696 ;; This function is called by:
  1697 ;;		_atoi
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           	psect	text8
  1702  001224                     __ptext8:
  1703                           	opt stack 0
  1704  001224                     ___wmul:
  1705                           	opt stack 28
  1706                           
  1707                           ;incstack = 0
  1708  001224  5001               	movf	___wmul@multiplier,w,c
  1709  001226  0203               	mulwf	___wmul@multiplicand,c
  1710  001228  CFF3 F005          	movff	prodl,___wmul@product
  1711  00122C  CFF4 F006          	movff	prodh,___wmul@product+1
  1712  001230  5001               	movf	___wmul@multiplier,w,c
  1713  001232  0204               	mulwf	___wmul@multiplicand+1,c
  1714  001234  50F3               	movf	prodl,w,c
  1715  001236  2606               	addwf	___wmul@product+1,f,c
  1716  001238  5002               	movf	___wmul@multiplier+1,w,c
  1717  00123A  0203               	mulwf	___wmul@multiplicand,c
  1718  00123C  50F3               	movf	prodl,w,c
  1719  00123E  2606               	addwf	___wmul@product+1,f,c
  1720  001240  C005  F001         	movff	___wmul@product,?___wmul
  1721  001244  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1722  001248  0012               	return	
  1723  00124A                     __end_of___wmul:
  1724                           	opt stack 0
  1725                           tblptru	equ	0xFF8
  1726                           tblptrh	equ	0xFF7
  1727                           tblptrl	equ	0xFF6
  1728                           tablat	equ	0xFF5
  1729                           prodh	equ	0xFF4
  1730                           prodl	equ	0xFF3
  1731                           postinc0	equ	0xFEE
  1732                           wreg	equ	0xFE8
  1733                           indf2	equ	0xFDF
  1734                           postinc2	equ	0xFDE
  1735                           postdec2	equ	0xFDD
  1736                           fsr2h	equ	0xFDA
  1737                           fsr2l	equ	0xFD9
  1738                           status	equ	0xFD8
  1739                           
  1740 ;; *************** function _LCD_puts *****************
  1741 ;; Defined at:
  1742 ;;		line 93 in file "i2c_lcd.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;  addr            1    wreg     unsigned char 
  1745 ;;  s               2    9[COMRAM] PTR unsigned char 
  1746 ;;		 -> keyNumber@arreglo(20), STR_3(10), STR_2(16), text(80), 
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;  addr            1   13[COMRAM] unsigned char 
  1749 ;;  i               2   11[COMRAM] int 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1759 ;;      Params:         2       0       0       0       0       0       0       0       0
  1760 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1761 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1762 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1763 ;;Total ram usage:        5 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    4
  1766 ;; This function calls:
  1767 ;;		_LCD_putch
  1768 ;; This function is called by:
  1769 ;;		_main
  1770 ;;		_keyNumber
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text9
  1775  001066                     __ptext9:
  1776                           	opt stack 0
  1777  001066                     _LCD_puts:
  1778                           	opt stack 25
  1779                           
  1780                           ;incstack = 0
  1781                           ;LCD_puts@addr stored from wreg
  1782  001066  6E0E               	movwf	LCD_puts@addr,c
  1783                           
  1784                           ;i2c_lcd.c: 95: int i=0;
  1785  001068  0E00               	movlw	0
  1786  00106A  6E0D               	movwf	LCD_puts@i+1,c
  1787  00106C  0E00               	movlw	0
  1788  00106E  6E0C               	movwf	LCD_puts@i,c
  1789                           
  1790                           ;i2c_lcd.c: 96: while(*s != 0) LCD_putch(addr, *s++);
  1791  001070  D016               	goto	l1679
  1792  001072                     l1675:
  1793  001072  C00A  FFF6         	movff	LCD_puts@s,tblptrl
  1794  001076  C00B  FFF7         	movff	LCD_puts@s+1,tblptrh
  1795  00107A  6AF8               	clrf	tblptru,c
  1796  00107C  0E07               	movlw	(high __ramtop+-1)
  1797  00107E  64F7               	cpfsgt	tblptrh,c
  1798  001080  D003               	bra	u1197
  1799  001082  0008               	tblrd		*
  1800  001084  50F5               	movf	tablat,w,c
  1801  001086  D005               	bra	u1190
  1802  001088                     u1197:
  1803  001088  CFF6 FFE9          	movff	tblptrl,fsr0l
  1804  00108C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1805  001090  50EF               	movf	indf0,w,c
  1806  001092                     u1190:
  1807  001092  6E07               	movwf	LCD_putch@data,c
  1808  001094  500E               	movf	LCD_puts@addr,w,c
  1809  001096  ECC0  F008         	call	_LCD_putch
  1810  00109A  4A0A               	infsnz	LCD_puts@s,f,c
  1811  00109C  2A0B               	incf	LCD_puts@s+1,f,c
  1812  00109E                     l1679:
  1813  00109E  C00A  FFF6         	movff	LCD_puts@s,tblptrl
  1814  0010A2  C00B  FFF7         	movff	LCD_puts@s+1,tblptrh
  1815  0010A6  6AF8               	clrf	tblptru,c
  1816  0010A8  0E07               	movlw	(high __ramtop+-1)
  1817  0010AA  64F7               	cpfsgt	tblptrh,c
  1818  0010AC  D003               	bra	u1207
  1819  0010AE  0008               	tblrd		*
  1820  0010B0  50F5               	movf	tablat,w,c
  1821  0010B2  D005               	bra	u1200
  1822  0010B4                     u1207:
  1823  0010B4  CFF6 FFE9          	movff	tblptrl,fsr0l
  1824  0010B8  CFF7 FFEA          	movff	tblptrh,fsr0h
  1825  0010BC  50EF               	movf	indf0,w,c
  1826  0010BE                     u1200:
  1827  0010BE  0900               	iorlw	0
  1828  0010C0  B4D8               	btfsc	status,2,c
  1829  0010C2  0012               	return	
  1830  0010C4  D7D6               	goto	l1675
  1831  0010C6                     __end_of_LCD_puts:
  1832                           	opt stack 0
  1833                           tblptru	equ	0xFF8
  1834                           tblptrh	equ	0xFF7
  1835                           tblptrl	equ	0xFF6
  1836                           tablat	equ	0xFF5
  1837                           prodh	equ	0xFF4
  1838                           prodl	equ	0xFF3
  1839                           indf0	equ	0xFEF
  1840                           postinc0	equ	0xFEE
  1841                           fsr0h	equ	0xFEA
  1842                           fsr0l	equ	0xFE9
  1843                           wreg	equ	0xFE8
  1844                           indf2	equ	0xFDF
  1845                           postinc2	equ	0xFDE
  1846                           postdec2	equ	0xFDD
  1847                           fsr2h	equ	0xFDA
  1848                           fsr2l	equ	0xFD9
  1849                           status	equ	0xFD8
  1850                           
  1851 ;; *************** function _LCD_putch *****************
  1852 ;; Defined at:
  1853 ;;		line 50 in file "i2c_lcd.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;  addr            1    wreg     unsigned char 
  1856 ;;  data            1    6[COMRAM] unsigned char 
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  addr            1    7[COMRAM] unsigned char 
  1859 ;;  lcddata         1    8[COMRAM] unsigned char 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1869 ;;      Params:         1       0       0       0       0       0       0       0       0
  1870 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1871 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1872 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1873 ;;Total ram usage:        3 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    3
  1876 ;; This function calls:
  1877 ;;		_I2C_PCF8574_Write
  1878 ;; This function is called by:
  1879 ;;		_LCD_puts
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text10
  1884  001180                     __ptext10:
  1885                           	opt stack 0
  1886  001180                     _LCD_putch:
  1887                           	opt stack 25
  1888                           
  1889                           ;incstack = 0
  1890                           ;LCD_putch@addr stored from wreg
  1891  001180  6E08               	movwf	LCD_putch@addr,c
  1892                           
  1893                           ;i2c_lcd.c: 52: unsigned char lcddata;
  1894                           ;i2c_lcd.c: 53: lcddata = (data & 0xF0)|0x08|0x01;
  1895  001182  5007               	movf	LCD_putch@data,w,c
  1896  001184  0BF0               	andlw	240
  1897  001186  0909               	iorlw	9
  1898  001188  6E09               	movwf	LCD_putch@lcddata,c
  1899                           
  1900                           ;i2c_lcd.c: 54: I2C_PCF8574_Write(addr,lcddata | 0x04);
  1901  00118A  5009               	movf	LCD_putch@lcddata,w,c
  1902  00118C  0904               	iorlw	4
  1903  00118E  6E03               	movwf	I2C_PCF8574_Write@value,c
  1904  001190  5008               	movf	LCD_putch@addr,w,c
  1905  001192  EC25  F009         	call	_I2C_PCF8574_Write
  1906                           
  1907                           ;i2c_lcd.c: 55: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  1908  001196  5009               	movf	LCD_putch@lcddata,w,c
  1909  001198  0BFB               	andlw	251
  1910  00119A  6E03               	movwf	I2C_PCF8574_Write@value,c
  1911  00119C  5008               	movf	LCD_putch@addr,w,c
  1912  00119E  EC25  F009         	call	_I2C_PCF8574_Write
  1913                           
  1914                           ;i2c_lcd.c: 56: lcddata = ((data << 4) & 0xF0)|0x08|0x01;
  1915  0011A2  3807               	swapf	LCD_putch@data,w,c
  1916  0011A4  0BF0               	andlw	240
  1917  0011A6  0BF0               	andlw	240
  1918  0011A8  0909               	iorlw	9
  1919  0011AA  6E09               	movwf	LCD_putch@lcddata,c
  1920                           
  1921                           ;i2c_lcd.c: 57: I2C_PCF8574_Write(addr,lcddata | 0x04);
  1922  0011AC  5009               	movf	LCD_putch@lcddata,w,c
  1923  0011AE  0904               	iorlw	4
  1924  0011B0  6E03               	movwf	I2C_PCF8574_Write@value,c
  1925  0011B2  5008               	movf	LCD_putch@addr,w,c
  1926  0011B4  EC25  F009         	call	_I2C_PCF8574_Write
  1927                           
  1928                           ;i2c_lcd.c: 58: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  1929  0011B8  5009               	movf	LCD_putch@lcddata,w,c
  1930  0011BA  0BFB               	andlw	251
  1931  0011BC  6E03               	movwf	I2C_PCF8574_Write@value,c
  1932  0011BE  5008               	movf	LCD_putch@addr,w,c
  1933  0011C0  EC25  F009         	call	_I2C_PCF8574_Write
  1934  0011C4  0012               	return		;funcret
  1935  0011C6                     __end_of_LCD_putch:
  1936                           	opt stack 0
  1937                           tblptru	equ	0xFF8
  1938                           tblptrh	equ	0xFF7
  1939                           tblptrl	equ	0xFF6
  1940                           tablat	equ	0xFF5
  1941                           prodh	equ	0xFF4
  1942                           prodl	equ	0xFF3
  1943                           indf0	equ	0xFEF
  1944                           postinc0	equ	0xFEE
  1945                           fsr0h	equ	0xFEA
  1946                           fsr0l	equ	0xFE9
  1947                           wreg	equ	0xFE8
  1948                           indf2	equ	0xFDF
  1949                           postinc2	equ	0xFDE
  1950                           postdec2	equ	0xFDD
  1951                           fsr2h	equ	0xFDA
  1952                           fsr2l	equ	0xFD9
  1953                           status	equ	0xFD8
  1954                           
  1955 ;; *************** function _LCD_goto *****************
  1956 ;; Defined at:
  1957 ;;		line 80 in file "i2c_lcd.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;  addr            1    wreg     unsigned char 
  1960 ;;  row             1   11[COMRAM] unsigned char 
  1961 ;;  column          1   12[COMRAM] unsigned char 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  addr            1   13[COMRAM] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1973 ;;      Params:         2       0       0       0       0       0       0       0       0
  1974 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1976 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1977 ;;Total ram usage:        3 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    4
  1980 ;; This function calls:
  1981 ;;		_LCD_putcmd
  1982 ;; This function is called by:
  1983 ;;		_main
  1984 ;;		_keyNumber
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text11
  1989  000F86                     __ptext11:
  1990                           	opt stack 0
  1991  000F86                     _LCD_goto:
  1992                           	opt stack 25
  1993                           
  1994                           ;incstack = 0
  1995                           ;LCD_goto@addr stored from wreg
  1996  000F86  6E0E               	movwf	LCD_goto@addr,c
  1997                           
  1998                           ;i2c_lcd.c: 81: switch(row){
  1999  000F88  D02D               	goto	l1671
  2000  000F8A                     l1659:
  2001  000F8A  500D               	movf	LCD_goto@column,w,c
  2002  000F8C  0F7F               	addlw	127
  2003  000F8E  6E07               	movwf	LCD_putcmd@data,c
  2004  000F90  0E01               	movlw	1
  2005  000F92  6E08               	movwf	LCD_putcmd@cmdtype,c
  2006  000F94  500E               	movf	LCD_goto@addr,w,c
  2007  000F96  EC92  F008         	call	_LCD_putcmd
  2008  000F9A  0012               	return	
  2009  000F9C                     l1661:
  2010  000F9C  500D               	movf	LCD_goto@column,w,c
  2011  000F9E  0FBF               	addlw	191
  2012  000FA0  6E07               	movwf	LCD_putcmd@data,c
  2013  000FA2  0E01               	movlw	1
  2014  000FA4  6E08               	movwf	LCD_putcmd@cmdtype,c
  2015  000FA6  500E               	movf	LCD_goto@addr,w,c
  2016  000FA8  EC92  F008         	call	_LCD_putcmd
  2017  000FAC  0012               	return	
  2018  000FAE                     l1663:
  2019  000FAE  500D               	movf	LCD_goto@column,w,c
  2020  000FB0  0F93               	addlw	147
  2021  000FB2  6E07               	movwf	LCD_putcmd@data,c
  2022  000FB4  0E01               	movlw	1
  2023  000FB6  6E08               	movwf	LCD_putcmd@cmdtype,c
  2024  000FB8  500E               	movf	LCD_goto@addr,w,c
  2025  000FBA  EC92  F008         	call	_LCD_putcmd
  2026  000FBE  0012               	return	
  2027  000FC0                     l1665:
  2028  000FC0  500D               	movf	LCD_goto@column,w,c
  2029  000FC2  0FD3               	addlw	211
  2030  000FC4  6E07               	movwf	LCD_putcmd@data,c
  2031  000FC6  0E01               	movlw	1
  2032  000FC8  6E08               	movwf	LCD_putcmd@cmdtype,c
  2033  000FCA  500E               	movf	LCD_goto@addr,w,c
  2034  000FCC  EC92  F008         	call	_LCD_putcmd
  2035  000FD0  0012               	return	
  2036  000FD2                     l1667:
  2037  000FD2  500D               	movf	LCD_goto@column,w,c
  2038  000FD4  0F7F               	addlw	127
  2039  000FD6  6E07               	movwf	LCD_putcmd@data,c
  2040  000FD8  0E01               	movlw	1
  2041  000FDA  6E08               	movwf	LCD_putcmd@cmdtype,c
  2042  000FDC  500E               	movf	LCD_goto@addr,w,c
  2043  000FDE  EC92  F008         	call	_LCD_putcmd
  2044                           
  2045                           ;i2c_lcd.c: 87: }
  2046  000FE2  0012               	return	
  2047  000FE4                     l1671:
  2048  000FE4  500C               	movf	LCD_goto@row,w,c
  2049                           
  2050                           ; Switch size 1, requested type "space"
  2051                           ; Number of cases is 4, Range of values is 1 to 4
  2052                           ; switch strategies available:
  2053                           ; Name         Instructions Cycles
  2054                           ; simple_byte           13     7 (average)
  2055                           ;	Chosen strategy is simple_byte
  2056  000FE6  0A01               	xorlw	1	; case 1
  2057  000FE8  B4D8               	btfsc	status,2,c
  2058  000FEA  D7CF               	goto	l1659
  2059  000FEC  0A03               	xorlw	3	; case 2
  2060  000FEE  B4D8               	btfsc	status,2,c
  2061  000FF0  D7D5               	goto	l1661
  2062  000FF2  0A01               	xorlw	1	; case 3
  2063  000FF4  B4D8               	btfsc	status,2,c
  2064  000FF6  D7DB               	goto	l1663
  2065  000FF8  0A07               	xorlw	7	; case 4
  2066  000FFA  B4D8               	btfsc	status,2,c
  2067  000FFC  D7E1               	goto	l1665
  2068  000FFE  D7E9               	goto	l1667
  2069  001000                     __end_of_LCD_goto:
  2070                           	opt stack 0
  2071                           tblptru	equ	0xFF8
  2072                           tblptrh	equ	0xFF7
  2073                           tblptrl	equ	0xFF6
  2074                           tablat	equ	0xFF5
  2075                           prodh	equ	0xFF4
  2076                           prodl	equ	0xFF3
  2077                           indf0	equ	0xFEF
  2078                           postinc0	equ	0xFEE
  2079                           fsr0h	equ	0xFEA
  2080                           fsr0l	equ	0xFE9
  2081                           wreg	equ	0xFE8
  2082                           indf2	equ	0xFDF
  2083                           postinc2	equ	0xFDE
  2084                           postdec2	equ	0xFDD
  2085                           fsr2h	equ	0xFDA
  2086                           fsr2l	equ	0xFD9
  2087                           status	equ	0xFD8
  2088                           
  2089 ;; *************** function _KP_Readbutton *****************
  2090 ;; Defined at:
  2091 ;;		line 30 in file "KeyPad Library.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;		None
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;  key             1    8[COMRAM] unsigned char 
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  1    wreg      unsigned char 
  2098 ;; Registers used:
  2099 ;;		wreg, status,2, status,0, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2105 ;;      Params:         0       0       0       0       0       0       0       0       0
  2106 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2107 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2108 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2109 ;;Total ram usage:        1 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:    1
  2112 ;; This function calls:
  2113 ;;		_KP_scan
  2114 ;; This function is called by:
  2115 ;;		_keyNumber
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           	psect	text12
  2120  0009F2                     __ptext12:
  2121                           	opt stack 0
  2122  0009F2                     _KP_Readbutton:
  2123                           	opt stack 28
  2124                           
  2125                           ;KeyPad Library.c: 32: char key = ',';
  2126                           
  2127                           ;incstack = 0
  2128  0009F2  0E2C               	movlw	44
  2129  0009F4  6E09               	movwf	KP_Readbutton@key,c
  2130                           
  2131                           ;KeyPad Library.c: 33: while(!((key = KP_scan()) == ','))
  2132  0009F6  D08F               	goto	l1651
  2133  0009F8                     l1555:
  2134                           
  2135                           ;KeyPad Library.c: 34: {
  2136                           ;KeyPad Library.c: 35: if(keynum == 1) { return key = '7'; }
  2137  0009F8  0446               	decf	_keynum,w,c
  2138  0009FA  1047               	iorwf	_keynum+1,w,c
  2139  0009FC  A4D8               	btfss	status,2,c
  2140  0009FE  D004               	goto	l1561
  2141  000A00  0E37               	movlw	55
  2142  000A02  6E09               	movwf	KP_Readbutton@key,c
  2143  000A04  5009               	movf	KP_Readbutton@key,w,c
  2144  000A06  0012               	return	
  2145  000A08                     l1561:
  2146                           
  2147                           ;KeyPad Library.c: 36: if(keynum == 2) { return key = '8'; }
  2148  000A08  0E02               	movlw	2
  2149  000A0A  1846               	xorwf	_keynum,w,c
  2150  000A0C  1047               	iorwf	_keynum+1,w,c
  2151  000A0E  A4D8               	btfss	status,2,c
  2152  000A10  D004               	goto	l1567
  2153  000A12  0E38               	movlw	56
  2154  000A14  6E09               	movwf	KP_Readbutton@key,c
  2155  000A16  5009               	movf	KP_Readbutton@key,w,c
  2156  000A18  0012               	return	
  2157  000A1A                     l1567:
  2158                           
  2159                           ;KeyPad Library.c: 37: if(keynum == 3) { return key = '9'; }
  2160  000A1A  0E03               	movlw	3
  2161  000A1C  1846               	xorwf	_keynum,w,c
  2162  000A1E  1047               	iorwf	_keynum+1,w,c
  2163  000A20  A4D8               	btfss	status,2,c
  2164  000A22  D004               	goto	l1573
  2165  000A24  0E39               	movlw	57
  2166  000A26  6E09               	movwf	KP_Readbutton@key,c
  2167  000A28  5009               	movf	KP_Readbutton@key,w,c
  2168  000A2A  0012               	return	
  2169  000A2C                     l1573:
  2170                           
  2171                           ;KeyPad Library.c: 38: if(keynum == 4) { return key = '/'; }
  2172  000A2C  0E04               	movlw	4
  2173  000A2E  1846               	xorwf	_keynum,w,c
  2174  000A30  1047               	iorwf	_keynum+1,w,c
  2175  000A32  A4D8               	btfss	status,2,c
  2176  000A34  D004               	goto	l1579
  2177  000A36  0E2F               	movlw	47
  2178  000A38  6E09               	movwf	KP_Readbutton@key,c
  2179  000A3A  5009               	movf	KP_Readbutton@key,w,c
  2180  000A3C  0012               	return	
  2181  000A3E                     l1579:
  2182                           
  2183                           ;KeyPad Library.c: 39: if(keynum == 5) { return key = '4'; }
  2184  000A3E  0E05               	movlw	5
  2185  000A40  1846               	xorwf	_keynum,w,c
  2186  000A42  1047               	iorwf	_keynum+1,w,c
  2187  000A44  A4D8               	btfss	status,2,c
  2188  000A46  D004               	goto	l1585
  2189  000A48  0E34               	movlw	52
  2190  000A4A  6E09               	movwf	KP_Readbutton@key,c
  2191  000A4C  5009               	movf	KP_Readbutton@key,w,c
  2192  000A4E  0012               	return	
  2193  000A50                     l1585:
  2194                           
  2195                           ;KeyPad Library.c: 40: if(keynum == 6) { return key = '5'; }
  2196  000A50  0E06               	movlw	6
  2197  000A52  1846               	xorwf	_keynum,w,c
  2198  000A54  1047               	iorwf	_keynum+1,w,c
  2199  000A56  A4D8               	btfss	status,2,c
  2200  000A58  D004               	goto	l1591
  2201  000A5A  0E35               	movlw	53
  2202  000A5C  6E09               	movwf	KP_Readbutton@key,c
  2203  000A5E  5009               	movf	KP_Readbutton@key,w,c
  2204  000A60  0012               	return	
  2205  000A62                     l1591:
  2206                           
  2207                           ;KeyPad Library.c: 41: if(keynum == 7) { return key = '6'; }
  2208  000A62  0E07               	movlw	7
  2209  000A64  1846               	xorwf	_keynum,w,c
  2210  000A66  1047               	iorwf	_keynum+1,w,c
  2211  000A68  A4D8               	btfss	status,2,c
  2212  000A6A  D004               	goto	l1597
  2213  000A6C  0E36               	movlw	54
  2214  000A6E  6E09               	movwf	KP_Readbutton@key,c
  2215  000A70  5009               	movf	KP_Readbutton@key,w,c
  2216  000A72  0012               	return	
  2217  000A74                     l1597:
  2218                           
  2219                           ;KeyPad Library.c: 42: if(keynum == 8) { return key = '*'; }
  2220  000A74  0E08               	movlw	8
  2221  000A76  1846               	xorwf	_keynum,w,c
  2222  000A78  1047               	iorwf	_keynum+1,w,c
  2223  000A7A  A4D8               	btfss	status,2,c
  2224  000A7C  D004               	goto	l1603
  2225  000A7E  0E2A               	movlw	42
  2226  000A80  6E09               	movwf	KP_Readbutton@key,c
  2227  000A82  5009               	movf	KP_Readbutton@key,w,c
  2228  000A84  0012               	return	
  2229  000A86                     l1603:
  2230                           
  2231                           ;KeyPad Library.c: 43: if(keynum == 9) { return key = '1'; }
  2232  000A86  0E09               	movlw	9
  2233  000A88  1846               	xorwf	_keynum,w,c
  2234  000A8A  1047               	iorwf	_keynum+1,w,c
  2235  000A8C  A4D8               	btfss	status,2,c
  2236  000A8E  D004               	goto	l1609
  2237  000A90  0E31               	movlw	49
  2238  000A92  6E09               	movwf	KP_Readbutton@key,c
  2239  000A94  5009               	movf	KP_Readbutton@key,w,c
  2240  000A96  0012               	return	
  2241  000A98                     l1609:
  2242                           
  2243                           ;KeyPad Library.c: 44: if(keynum == 10){ return key = '2';}
  2244  000A98  0E0A               	movlw	10
  2245  000A9A  1846               	xorwf	_keynum,w,c
  2246  000A9C  1047               	iorwf	_keynum+1,w,c
  2247  000A9E  A4D8               	btfss	status,2,c
  2248  000AA0  D004               	goto	l1615
  2249  000AA2  0E32               	movlw	50
  2250  000AA4  6E09               	movwf	KP_Readbutton@key,c
  2251  000AA6  5009               	movf	KP_Readbutton@key,w,c
  2252  000AA8  0012               	return	
  2253  000AAA                     l1615:
  2254                           
  2255                           ;KeyPad Library.c: 45: if(keynum == 11){ return key = '3';}
  2256  000AAA  0E0B               	movlw	11
  2257  000AAC  1846               	xorwf	_keynum,w,c
  2258  000AAE  1047               	iorwf	_keynum+1,w,c
  2259  000AB0  A4D8               	btfss	status,2,c
  2260  000AB2  D004               	goto	l1621
  2261  000AB4  0E33               	movlw	51
  2262  000AB6  6E09               	movwf	KP_Readbutton@key,c
  2263  000AB8  5009               	movf	KP_Readbutton@key,w,c
  2264  000ABA  0012               	return	
  2265  000ABC                     l1621:
  2266                           
  2267                           ;KeyPad Library.c: 46: if(keynum == 12){ return key = '-';}
  2268  000ABC  0E0C               	movlw	12
  2269  000ABE  1846               	xorwf	_keynum,w,c
  2270  000AC0  1047               	iorwf	_keynum+1,w,c
  2271  000AC2  A4D8               	btfss	status,2,c
  2272  000AC4  D004               	goto	l1627
  2273  000AC6  0E2D               	movlw	45
  2274  000AC8  6E09               	movwf	KP_Readbutton@key,c
  2275  000ACA  5009               	movf	KP_Readbutton@key,w,c
  2276  000ACC  0012               	return	
  2277  000ACE                     l1627:
  2278                           
  2279                           ;KeyPad Library.c: 47: if(keynum == 13){ return key = 'd';}
  2280  000ACE  0E0D               	movlw	13
  2281  000AD0  1846               	xorwf	_keynum,w,c
  2282  000AD2  1047               	iorwf	_keynum+1,w,c
  2283  000AD4  A4D8               	btfss	status,2,c
  2284  000AD6  D004               	goto	l1633
  2285  000AD8  0E64               	movlw	100
  2286  000ADA  6E09               	movwf	KP_Readbutton@key,c
  2287  000ADC  5009               	movf	KP_Readbutton@key,w,c
  2288  000ADE  0012               	return	
  2289  000AE0                     l1633:
  2290                           
  2291                           ;KeyPad Library.c: 48: if(keynum == 14){ return key = '0';}
  2292  000AE0  0E0E               	movlw	14
  2293  000AE2  1846               	xorwf	_keynum,w,c
  2294  000AE4  1047               	iorwf	_keynum+1,w,c
  2295  000AE6  A4D8               	btfss	status,2,c
  2296  000AE8  D004               	goto	l1639
  2297  000AEA  0E30               	movlw	48
  2298  000AEC  6E09               	movwf	KP_Readbutton@key,c
  2299  000AEE  5009               	movf	KP_Readbutton@key,w,c
  2300  000AF0  0012               	return	
  2301  000AF2                     l1639:
  2302                           
  2303                           ;KeyPad Library.c: 49: if(keynum == 15){ return key = '=';}
  2304  000AF2  0E0F               	movlw	15
  2305  000AF4  1846               	xorwf	_keynum,w,c
  2306  000AF6  1047               	iorwf	_keynum+1,w,c
  2307  000AF8  A4D8               	btfss	status,2,c
  2308  000AFA  D004               	goto	l1645
  2309  000AFC  0E3D               	movlw	61
  2310  000AFE  6E09               	movwf	KP_Readbutton@key,c
  2311  000B00  5009               	movf	KP_Readbutton@key,w,c
  2312  000B02  0012               	return	
  2313  000B04                     l1645:
  2314                           
  2315                           ;KeyPad Library.c: 50: if(keynum == 16){ return key = '+';}
  2316  000B04  0E10               	movlw	16
  2317  000B06  1846               	xorwf	_keynum,w,c
  2318  000B08  1047               	iorwf	_keynum+1,w,c
  2319  000B0A  A4D8               	btfss	status,2,c
  2320  000B0C  D004               	goto	l1651
  2321  000B0E  0E2B               	movlw	43
  2322  000B10  6E09               	movwf	KP_Readbutton@key,c
  2323  000B12  5009               	movf	KP_Readbutton@key,w,c
  2324  000B14  0012               	return	
  2325  000B16                     l1651:
  2326  000B16  EC95  F005         	call	_KP_scan	;wreg free
  2327  000B1A  5001               	movf	?_KP_scan,w,c
  2328  000B1C  6E09               	movwf	KP_Readbutton@key,c
  2329  000B1E  0E2C               	movlw	44
  2330  000B20  1809               	xorwf	KP_Readbutton@key,w,c
  2331  000B22  A4D8               	btfss	status,2,c
  2332  000B24  D769               	goto	l1555
  2333                           
  2334                           ;KeyPad Library.c: 51: }
  2335                           ;KeyPad Library.c: 52: return key;
  2336  000B26  5009               	movf	KP_Readbutton@key,w,c
  2337  000B28  0012               	return	
  2338  000B2A                     __end_of_KP_Readbutton:
  2339                           	opt stack 0
  2340                           tblptru	equ	0xFF8
  2341                           tblptrh	equ	0xFF7
  2342                           tblptrl	equ	0xFF6
  2343                           tablat	equ	0xFF5
  2344                           prodh	equ	0xFF4
  2345                           prodl	equ	0xFF3
  2346                           indf0	equ	0xFEF
  2347                           postinc0	equ	0xFEE
  2348                           fsr0h	equ	0xFEA
  2349                           fsr0l	equ	0xFE9
  2350                           wreg	equ	0xFE8
  2351                           indf2	equ	0xFDF
  2352                           postinc2	equ	0xFDE
  2353                           postdec2	equ	0xFDD
  2354                           fsr2h	equ	0xFDA
  2355                           fsr2l	equ	0xFD9
  2356                           status	equ	0xFD8
  2357                           
  2358 ;; *************** function _KP_scan *****************
  2359 ;; Defined at:
  2360 ;;		line 12 in file "KeyPad Library.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;		None
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  row             2    6[COMRAM] short 
  2365 ;;  press           2    4[COMRAM] short 
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  2    0[COMRAM] int 
  2368 ;; Registers used:
  2369 ;;		wreg, status,2, status,0
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2375 ;;      Params:         2       0       0       0       0       0       0       0       0
  2376 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2377 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2378 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2379 ;;Total ram usage:        8 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; This function calls:
  2382 ;;		Nothing
  2383 ;; This function is called by:
  2384 ;;		_KP_Readbutton
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text13
  2389  000B2A                     __ptext13:
  2390                           	opt stack 0
  2391  000B2A                     _KP_scan:
  2392                           	opt stack 28
  2393                           
  2394                           ;KeyPad Library.c: 14: short row,press = 0;
  2395                           
  2396                           ;incstack = 0
  2397  000B2A  0E00               	movlw	0
  2398  000B2C  6E06               	movwf	KP_scan@press+1,c
  2399  000B2E  0E00               	movlw	0
  2400  000B30  6E05               	movwf	KP_scan@press,c
  2401                           
  2402                           ;KeyPad Library.c: 15: keynum = 0;
  2403  000B32  0E00               	movlw	0
  2404  000B34  6E47               	movwf	_keynum+1,c
  2405  000B36  0E00               	movlw	0
  2406  000B38  6E46               	movwf	_keynum,c
  2407                           
  2408                           ;KeyPad Library.c: 16: for(row = 0; row < 4; row++)
  2409  000B3A  0E00               	movlw	0
  2410  000B3C  6E08               	movwf	KP_scan@row+1,c
  2411  000B3E  0E00               	movlw	0
  2412  000B40  6E07               	movwf	KP_scan@row,c
  2413  000B42  BE08               	btfsc	KP_scan@row+1,7,c
  2414  000B44  D006               	goto	l1457
  2415  000B46  5008               	movf	KP_scan@row+1,w,c
  2416  000B48  E165               	bnz	l1505
  2417  000B4A  0E04               	movlw	4
  2418  000B4C  5C07               	subwf	KP_scan@row,w,c
  2419  000B4E  B0D8               	btfsc	status,0,c
  2420  000B50  D061               	goto	l1505
  2421  000B52                     l1457:
  2422                           
  2423                           ;KeyPad Library.c: 17: {
  2424                           ;KeyPad Library.c: 18: LATD = (0x10<<row);
  2425  000B52  C007  F003         	movff	KP_scan@row,??_KP_scan
  2426  000B56  0E10               	movlw	16
  2427  000B58  6E04               	movwf	(??_KP_scan+1)& (0+255),c
  2428  000B5A  2A03               	incf	??_KP_scan,f,c
  2429  000B5C  D002               	goto	u884
  2430  000B5E                     u885:
  2431  000B5E  90D8               	bcf	status,0,c
  2432  000B60  3604               	rlcf	??_KP_scan+1,f,c
  2433  000B62                     u884:
  2434  000B62  2E03               	decfsz	??_KP_scan,f,c
  2435  000B64  D7FC               	goto	u885
  2436  000B66  5004               	movf	??_KP_scan+1,w,c
  2437  000B68  6E8C               	movwf	3980,c	;volatile
  2438                           
  2439                           ;KeyPad Library.c: 20: if(PORTDbits.RD0 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD0 == 1); return keynum+=1; press = 1;}
  2440  000B6A  A083               	btfss	3971,0,c	;volatile
  2441  000B6C  D010               	goto	l1469
  2442  000B6E  0EE4               	movlw	228
  2443  000B70                     u1467:
  2444  000B70  D000               	nop2	
  2445  000B72  D000               	nop2	
  2446  000B74  2EE8               	decfsz	wreg,f,c
  2447  000B76  D7FC               	bra	u1467
  2448  000B78  D000               	nop2	
  2449  000B7A  D000               	nop2	
  2450  000B7C                     l19:
  2451  000B7C  B083               	btfsc	3971,0,c	;volatile
  2452  000B7E  D7FE               	goto	l19
  2453  000B80  4A46               	infsnz	_keynum,f,c
  2454  000B82  2A47               	incf	_keynum+1,f,c
  2455  000B84  C046  F001         	movff	_keynum,?_KP_scan
  2456  000B88  C047  F002         	movff	_keynum+1,?_KP_scan+1
  2457  000B8C  0012               	return	
  2458  000B8E                     l1469:
  2459                           
  2460                           ;KeyPad Library.c: 21: if(PORTDbits.RD1 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD1 == 1); return keynum+=2; press = 1;}
  2461  000B8E  A283               	btfss	3971,1,c	;volatile
  2462  000B90  D012               	goto	l1479
  2463  000B92  0EE4               	movlw	228
  2464  000B94                     u1477:
  2465  000B94  D000               	nop2	
  2466  000B96  D000               	nop2	
  2467  000B98  2EE8               	decfsz	wreg,f,c
  2468  000B9A  D7FC               	bra	u1477
  2469  000B9C  D000               	nop2	
  2470  000B9E  D000               	nop2	
  2471  000BA0                     l24:
  2472  000BA0  B283               	btfsc	3971,1,c	;volatile
  2473  000BA2  D7FE               	goto	l24
  2474  000BA4  0E02               	movlw	2
  2475  000BA6  2646               	addwf	_keynum,f,c
  2476  000BA8  0E00               	movlw	0
  2477  000BAA  2247               	addwfc	_keynum+1,f,c
  2478  000BAC  C046  F001         	movff	_keynum,?_KP_scan
  2479  000BB0  C047  F002         	movff	_keynum+1,?_KP_scan+1
  2480  000BB4  0012               	return	
  2481  000BB6                     l1479:
  2482                           
  2483                           ;KeyPad Library.c: 22: if(PORTDbits.RD2 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD2 == 1); return keynum+=3; press = 1;}
  2484  000BB6  A483               	btfss	3971,2,c	;volatile
  2485  000BB8  D012               	goto	l1489
  2486  000BBA  0EE4               	movlw	228
  2487  000BBC                     u1487:
  2488  000BBC  D000               	nop2	
  2489  000BBE  D000               	nop2	
  2490  000BC0  2EE8               	decfsz	wreg,f,c
  2491  000BC2  D7FC               	bra	u1487
  2492  000BC4  D000               	nop2	
  2493  000BC6  D000               	nop2	
  2494  000BC8                     l28:
  2495  000BC8  B483               	btfsc	3971,2,c	;volatile
  2496  000BCA  D7FE               	goto	l28
  2497  000BCC  0E03               	movlw	3
  2498  000BCE  2646               	addwf	_keynum,f,c
  2499  000BD0  0E00               	movlw	0
  2500  000BD2  2247               	addwfc	_keynum+1,f,c
  2501  000BD4  C046  F001         	movff	_keynum,?_KP_scan
  2502  000BD8  C047  F002         	movff	_keynum+1,?_KP_scan+1
  2503  000BDC  0012               	return	
  2504  000BDE                     l1489:
  2505                           
  2506                           ;KeyPad Library.c: 23: if(PORTDbits.RD3 == 1){ _delay((unsigned long)((800)*(8000000/400
      +                          0000.0))); while(PORTDbits.RD3 == 1); return keynum+=4; press = 1;}
  2507  000BDE  A683               	btfss	3971,3,c	;volatile
  2508  000BE0  D012               	goto	l1499
  2509  000BE2  0EE4               	movlw	228
  2510  000BE4                     u1497:
  2511  000BE4  D000               	nop2	
  2512  000BE6  D000               	nop2	
  2513  000BE8  2EE8               	decfsz	wreg,f,c
  2514  000BEA  D7FC               	bra	u1497
  2515  000BEC  D000               	nop2	
  2516  000BEE  D000               	nop2	
  2517  000BF0                     l32:
  2518  000BF0  B683               	btfsc	3971,3,c	;volatile
  2519  000BF2  D7FE               	goto	l32
  2520  000BF4  0E04               	movlw	4
  2521  000BF6  2646               	addwf	_keynum,f,c
  2522  000BF8  0E00               	movlw	0
  2523  000BFA  2247               	addwfc	_keynum+1,f,c
  2524  000BFC  C046  F001         	movff	_keynum,?_KP_scan
  2525  000C00  C047  F002         	movff	_keynum+1,?_KP_scan+1
  2526  000C04  0012               	return	
  2527  000C06                     l1499:
  2528                           
  2529                           ;KeyPad Library.c: 25: keynum +=4;
  2530  000C06  0E04               	movlw	4
  2531  000C08  2646               	addwf	_keynum,f,c
  2532  000C0A  0E00               	movlw	0
  2533  000C0C  2247               	addwfc	_keynum+1,f,c
  2534  000C0E  4A07               	infsnz	KP_scan@row,f,c
  2535  000C10  2A08               	incf	KP_scan@row+1,f,c
  2536  000C12  D797               	goto	L3
  2537  000C14                     l1505:
  2538                           
  2539                           ;KeyPad Library.c: 26: }
  2540                           ;KeyPad Library.c: 27: if(press == 0) keynum = 0;
  2541  000C14  5005               	movf	KP_scan@press,w,c
  2542  000C16  1006               	iorwf	KP_scan@press+1,w,c
  2543  000C18  A4D8               	btfss	status,2,c
  2544  000C1A  0012               	return	
  2545  000C1C  0E00               	movlw	0
  2546  000C1E  6E47               	movwf	_keynum+1,c
  2547  000C20  0E00               	movlw	0
  2548  000C22  6E46               	movwf	_keynum,c
  2549  000C24  0012               	return	
  2550  000C26                     __end_of_KP_scan:
  2551                           	opt stack 0
  2552                           tblptru	equ	0xFF8
  2553                           tblptrh	equ	0xFF7
  2554                           tblptrl	equ	0xFF6
  2555                           tablat	equ	0xFF5
  2556                           prodh	equ	0xFF4
  2557                           prodl	equ	0xFF3
  2558                           indf0	equ	0xFEF
  2559                           postinc0	equ	0xFEE
  2560                           fsr0h	equ	0xFEA
  2561                           fsr0l	equ	0xFE9
  2562                           wreg	equ	0xFE8
  2563                           indf2	equ	0xFDF
  2564                           postinc2	equ	0xFDE
  2565                           postdec2	equ	0xFDD
  2566                           fsr2h	equ	0xFDA
  2567                           fsr2l	equ	0xFD9
  2568                           status	equ	0xFD8
  2569                           
  2570 ;; *************** function _OpenI2C *****************
  2571 ;; Defined at:
  2572 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_open.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;  sync_mode       1    wreg     unsigned char 
  2575 ;;  slew            1    0[COMRAM] unsigned char 
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;  sync_mode       1    1[COMRAM] unsigned char 
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      void 
  2580 ;; Registers used:
  2581 ;;		wreg, status,2, status,0
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2587 ;;      Params:         1       0       0       0       0       0       0       0       0
  2588 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2589 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2590 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2591 ;;Total ram usage:        2 bytes
  2592 ;; Hardware stack levels used:    1
  2593 ;; This function calls:
  2594 ;;		Nothing
  2595 ;; This function is called by:
  2596 ;;		_main
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           	psect	text14
  2601  001288                     __ptext14:
  2602                           	opt stack 0
  2603  001288                     _OpenI2C:
  2604                           	opt stack 30
  2605                           
  2606                           ;incstack = 0
  2607                           ;OpenI2C@sync_mode stored from wreg
  2608  001288  6E02               	movwf	OpenI2C@sync_mode,c
  2609  00128A  0E3F               	movlw	63
  2610  00128C  16C7               	andwf	4039,f,c	;volatile
  2611  00128E  0E00               	movlw	0
  2612  001290  6EC6               	movwf	4038,c	;volatile
  2613  001292  0E00               	movlw	0
  2614  001294  6EC5               	movwf	4037,c	;volatile
  2615  001296  5002               	movf	OpenI2C@sync_mode,w,c
  2616  001298  12C6               	iorwf	4038,f,c	;volatile
  2617  00129A  5001               	movf	OpenI2C@slew,w,c
  2618  00129C  12C7               	iorwf	4039,f,c	;volatile
  2619  00129E  8293               	bsf	3987,1,c	;volatile
  2620  0012A0  8093               	bsf	3987,0,c	;volatile
  2621  0012A2  8AC6               	bsf	4038,5,c	;volatile
  2622  0012A4  0012               	return		;funcret
  2623  0012A6                     __end_of_OpenI2C:
  2624                           	opt stack 0
  2625                           tblptru	equ	0xFF8
  2626                           tblptrh	equ	0xFF7
  2627                           tblptrl	equ	0xFF6
  2628                           tablat	equ	0xFF5
  2629                           prodh	equ	0xFF4
  2630                           prodl	equ	0xFF3
  2631                           indf0	equ	0xFEF
  2632                           postinc0	equ	0xFEE
  2633                           fsr0h	equ	0xFEA
  2634                           fsr0l	equ	0xFE9
  2635                           wreg	equ	0xFE8
  2636                           indf2	equ	0xFDF
  2637                           postinc2	equ	0xFDE
  2638                           postdec2	equ	0xFDD
  2639                           fsr2h	equ	0xFDA
  2640                           fsr2l	equ	0xFD9
  2641                           status	equ	0xFD8
  2642                           
  2643 ;; *************** function _LCD_init *****************
  2644 ;; Defined at:
  2645 ;;		line 63 in file "i2c_lcd.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;  addr            1    wreg     unsigned char 
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;  addr            1   12[COMRAM] unsigned char 
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      void 
  2652 ;; Registers used:
  2653 ;;		wreg, status,2, status,0, cstack
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2659 ;;      Params:         0       0       0       0       0       0       0       0       0
  2660 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2661 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2662 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2663 ;;Total ram usage:        2 bytes
  2664 ;; Hardware stack levels used:    1
  2665 ;; Hardware stack levels required when called:    4
  2666 ;; This function calls:
  2667 ;;		_LCD_putcmd
  2668 ;; This function is called by:
  2669 ;;		_main
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           	psect	text15
  2674  000E66                     __ptext15:
  2675                           	opt stack 0
  2676  000E66                     _LCD_init:
  2677                           	opt stack 26
  2678                           
  2679                           ;incstack = 0
  2680                           ;LCD_init@addr stored from wreg
  2681  000E66  6E0D               	movwf	LCD_init@addr,c
  2682                           
  2683                           ;i2c_lcd.c: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
  2684  000E68  0E34               	movlw	52
  2685  000E6A  6E0C               	movwf	??_LCD_init& (0+255),c
  2686  000E6C  0EF2               	movlw	242
  2687  000E6E                     u1507:
  2688  000E6E  2EE8               	decfsz	wreg,f,c
  2689  000E70  D7FE               	bra	u1507
  2690  000E72  2E0C               	decfsz	??_LCD_init& (0+255),f,c
  2691  000E74  D7FC               	bra	u1507
  2692                           
  2693                           ;i2c_lcd.c: 67: LCD_putcmd(addr, 0x30,0);_delay((unsigned long)((5)*(8000000/4000.0)));
  2694  000E76  0E30               	movlw	48
  2695  000E78  6E07               	movwf	LCD_putcmd@data,c
  2696  000E7A  0E00               	movlw	0
  2697  000E7C  6E08               	movwf	LCD_putcmd@cmdtype,c
  2698  000E7E  500D               	movf	LCD_init@addr,w,c
  2699  000E80  EC92  F008         	call	_LCD_putcmd
  2700  000E84  0E0D               	movlw	13
  2701  000E86  6E0C               	movwf	??_LCD_init& (0+255),c
  2702  000E88  0EFC               	movlw	252
  2703  000E8A                     u1517:
  2704  000E8A  2EE8               	decfsz	wreg,f,c
  2705  000E8C  D7FE               	bra	u1517
  2706  000E8E  2E0C               	decfsz	??_LCD_init& (0+255),f,c
  2707  000E90  D7FC               	bra	u1517
  2708                           
  2709                           ;i2c_lcd.c: 68: LCD_putcmd(addr, 0x30,0);
  2710  000E92  0E30               	movlw	48
  2711  000E94  6E07               	movwf	LCD_putcmd@data,c
  2712  000E96  0E00               	movlw	0
  2713  000E98  6E08               	movwf	LCD_putcmd@cmdtype,c
  2714  000E9A  500D               	movf	LCD_init@addr,w,c
  2715  000E9C  EC92  F008         	call	_LCD_putcmd
  2716                           
  2717                           ;i2c_lcd.c: 69: LCD_putcmd(addr, 0x30,0);
  2718  000EA0  0E30               	movlw	48
  2719  000EA2  6E07               	movwf	LCD_putcmd@data,c
  2720  000EA4  0E00               	movlw	0
  2721  000EA6  6E08               	movwf	LCD_putcmd@cmdtype,c
  2722  000EA8  500D               	movf	LCD_init@addr,w,c
  2723  000EAA  EC92  F008         	call	_LCD_putcmd
  2724                           
  2725                           ;i2c_lcd.c: 70: LCD_putcmd(addr, 0x20,0);
  2726  000EAE  0E20               	movlw	32
  2727  000EB0  6E07               	movwf	LCD_putcmd@data,c
  2728  000EB2  0E00               	movlw	0
  2729  000EB4  6E08               	movwf	LCD_putcmd@cmdtype,c
  2730  000EB6  500D               	movf	LCD_init@addr,w,c
  2731  000EB8  EC92  F008         	call	_LCD_putcmd
  2732                           
  2733                           ;i2c_lcd.c: 71: LCD_putcmd(addr, 0x28,1);
  2734  000EBC  0E28               	movlw	40
  2735  000EBE  6E07               	movwf	LCD_putcmd@data,c
  2736  000EC0  0E01               	movlw	1
  2737  000EC2  6E08               	movwf	LCD_putcmd@cmdtype,c
  2738  000EC4  500D               	movf	LCD_init@addr,w,c
  2739  000EC6  EC92  F008         	call	_LCD_putcmd
  2740                           
  2741                           ;i2c_lcd.c: 72: LCD_putcmd(addr, 0x08,1);
  2742  000ECA  0E08               	movlw	8
  2743  000ECC  6E07               	movwf	LCD_putcmd@data,c
  2744  000ECE  0E01               	movlw	1
  2745  000ED0  6E08               	movwf	LCD_putcmd@cmdtype,c
  2746  000ED2  500D               	movf	LCD_init@addr,w,c
  2747  000ED4  EC92  F008         	call	_LCD_putcmd
  2748                           
  2749                           ;i2c_lcd.c: 73: LCD_putcmd(addr, 0x01,1);
  2750  000ED8  0E01               	movlw	1
  2751  000EDA  6E07               	movwf	LCD_putcmd@data,c
  2752  000EDC  0E01               	movlw	1
  2753  000EDE  6E08               	movwf	LCD_putcmd@cmdtype,c
  2754  000EE0  500D               	movf	LCD_init@addr,w,c
  2755  000EE2  EC92  F008         	call	_LCD_putcmd
  2756                           
  2757                           ;i2c_lcd.c: 74: LCD_putcmd(addr, 0x06,1);
  2758  000EE6  0E06               	movlw	6
  2759  000EE8  6E07               	movwf	LCD_putcmd@data,c
  2760  000EEA  0E01               	movlw	1
  2761  000EEC  6E08               	movwf	LCD_putcmd@cmdtype,c
  2762  000EEE  500D               	movf	LCD_init@addr,w,c
  2763  000EF0  EC92  F008         	call	_LCD_putcmd
  2764                           
  2765                           ;i2c_lcd.c: 75: LCD_putcmd(addr, 0x0c,1);
  2766  000EF4  0E0C               	movlw	12
  2767  000EF6  6E07               	movwf	LCD_putcmd@data,c
  2768  000EF8  0E01               	movlw	1
  2769  000EFA  6E08               	movwf	LCD_putcmd@cmdtype,c
  2770  000EFC  500D               	movf	LCD_init@addr,w,c
  2771  000EFE  EC92  F008         	call	_LCD_putcmd
  2772  000F02  0012               	return		;funcret
  2773  000F04                     __end_of_LCD_init:
  2774                           	opt stack 0
  2775                           tblptru	equ	0xFF8
  2776                           tblptrh	equ	0xFF7
  2777                           tblptrl	equ	0xFF6
  2778                           tablat	equ	0xFF5
  2779                           prodh	equ	0xFF4
  2780                           prodl	equ	0xFF3
  2781                           indf0	equ	0xFEF
  2782                           postinc0	equ	0xFEE
  2783                           fsr0h	equ	0xFEA
  2784                           fsr0l	equ	0xFE9
  2785                           wreg	equ	0xFE8
  2786                           indf2	equ	0xFDF
  2787                           postinc2	equ	0xFDE
  2788                           postdec2	equ	0xFDD
  2789                           fsr2h	equ	0xFDA
  2790                           fsr2l	equ	0xFD9
  2791                           status	equ	0xFD8
  2792                           
  2793 ;; *************** function _LCD_putcmd *****************
  2794 ;; Defined at:
  2795 ;;		line 29 in file "i2c_lcd.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;  addr            1    wreg     unsigned char 
  2798 ;;  data            1    6[COMRAM] unsigned char 
  2799 ;;  cmdtype         1    7[COMRAM] unsigned char 
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;  addr            1    9[COMRAM] unsigned char 
  2802 ;;  lcddata         1   10[COMRAM] unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, status,2, status,0, cstack
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2812 ;;      Params:         2       0       0       0       0       0       0       0       0
  2813 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2814 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2815 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2816 ;;Total ram usage:        5 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    3
  2819 ;; This function calls:
  2820 ;;		_I2C_PCF8574_Write
  2821 ;; This function is called by:
  2822 ;;		_LCD_init
  2823 ;;		_LCD_goto
  2824 ;;		_main
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text16
  2829  001124                     __ptext16:
  2830                           	opt stack 0
  2831  001124                     _LCD_putcmd:
  2832                           	opt stack 25
  2833                           
  2834                           ;incstack = 0
  2835                           ;LCD_putcmd@addr stored from wreg
  2836  001124  6E0A               	movwf	LCD_putcmd@addr,c
  2837                           
  2838                           ;i2c_lcd.c: 31: unsigned char lcddata;
  2839                           ;i2c_lcd.c: 34: lcddata = (data & 0xF0)|0x08;
  2840  001126  5007               	movf	LCD_putcmd@data,w,c
  2841  001128  0BF0               	andlw	240
  2842  00112A  0908               	iorlw	8
  2843  00112C  6E0B               	movwf	LCD_putcmd@lcddata,c
  2844                           
  2845                           ;i2c_lcd.c: 35: I2C_PCF8574_Write(addr,lcddata | 0x04);
  2846  00112E  500B               	movf	LCD_putcmd@lcddata,w,c
  2847  001130  0904               	iorlw	4
  2848  001132  6E03               	movwf	I2C_PCF8574_Write@value,c
  2849  001134  500A               	movf	LCD_putcmd@addr,w,c
  2850  001136  EC25  F009         	call	_I2C_PCF8574_Write
  2851                           
  2852                           ;i2c_lcd.c: 36: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  2853  00113A  500B               	movf	LCD_putcmd@lcddata,w,c
  2854  00113C  0BFB               	andlw	251
  2855  00113E  6E03               	movwf	I2C_PCF8574_Write@value,c
  2856  001140  500A               	movf	LCD_putcmd@addr,w,c
  2857  001142  EC25  F009         	call	_I2C_PCF8574_Write
  2858                           
  2859                           ;i2c_lcd.c: 39: if (cmdtype) {
  2860  001146  5008               	movf	LCD_putcmd@cmdtype,w,c
  2861  001148  B4D8               	btfsc	status,2,c
  2862  00114A  D011               	goto	l1523
  2863                           
  2864                           ;i2c_lcd.c: 41: lcddata = ((data << 4) & 0xF0)|0x08;
  2865  00114C  3807               	swapf	LCD_putcmd@data,w,c
  2866  00114E  0BF0               	andlw	240
  2867  001150  0BF0               	andlw	240
  2868  001152  0908               	iorlw	8
  2869  001154  6E0B               	movwf	LCD_putcmd@lcddata,c
  2870                           
  2871                           ;i2c_lcd.c: 42: I2C_PCF8574_Write(addr,lcddata | 0x04);
  2872  001156  500B               	movf	LCD_putcmd@lcddata,w,c
  2873  001158  0904               	iorlw	4
  2874  00115A  6E03               	movwf	I2C_PCF8574_Write@value,c
  2875  00115C  500A               	movf	LCD_putcmd@addr,w,c
  2876  00115E  EC25  F009         	call	_I2C_PCF8574_Write
  2877                           
  2878                           ;i2c_lcd.c: 43: I2C_PCF8574_Write(addr,lcddata & ~0x04);
  2879  001162  500B               	movf	LCD_putcmd@lcddata,w,c
  2880  001164  0BFB               	andlw	251
  2881  001166  6E03               	movwf	I2C_PCF8574_Write@value,c
  2882  001168  500A               	movf	LCD_putcmd@addr,w,c
  2883  00116A  EC25  F009         	call	_I2C_PCF8574_Write
  2884  00116E                     l1523:
  2885                           
  2886                           ;i2c_lcd.c: 44: }
  2887                           ;i2c_lcd.c: 45: _delay((unsigned long)((2)*(8000000/4000.0)));
  2888  00116E  0E06               	movlw	6
  2889  001170  6E09               	movwf	??_LCD_putcmd& (0+255),c
  2890  001172  0E30               	movlw	48
  2891  001174                     u1527:
  2892  001174  2EE8               	decfsz	wreg,f,c
  2893  001176  D7FE               	bra	u1527
  2894  001178  2E09               	decfsz	??_LCD_putcmd& (0+255),f,c
  2895  00117A  D7FC               	bra	u1527
  2896  00117C  D000               	nop2	
  2897  00117E  0012               	return		;funcret
  2898  001180                     __end_of_LCD_putcmd:
  2899                           	opt stack 0
  2900                           tblptru	equ	0xFF8
  2901                           tblptrh	equ	0xFF7
  2902                           tblptrl	equ	0xFF6
  2903                           tablat	equ	0xFF5
  2904                           prodh	equ	0xFF4
  2905                           prodl	equ	0xFF3
  2906                           indf0	equ	0xFEF
  2907                           postinc0	equ	0xFEE
  2908                           fsr0h	equ	0xFEA
  2909                           fsr0l	equ	0xFE9
  2910                           wreg	equ	0xFE8
  2911                           indf2	equ	0xFDF
  2912                           postinc2	equ	0xFDE
  2913                           postdec2	equ	0xFDD
  2914                           fsr2h	equ	0xFDA
  2915                           fsr2l	equ	0xFD9
  2916                           status	equ	0xFD8
  2917                           
  2918 ;; *************** function _I2C_PCF8574_Write *****************
  2919 ;; Defined at:
  2920 ;;		line 12 in file "i2c_lcd.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;  addr            1    wreg     unsigned char 
  2923 ;;  value           1    2[COMRAM] unsigned char 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;  addr            1    5[COMRAM] unsigned char 
  2926 ;;  S               1    4[COMRAM] unsigned char 
  2927 ;;  dummy           1    3[COMRAM] unsigned char 
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  1    wreg      unsigned char 
  2930 ;; Registers used:
  2931 ;;		wreg, status,2, status,0, cstack
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2937 ;;      Params:         1       0       0       0       0       0       0       0       0
  2938 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2939 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2940 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2941 ;;Total ram usage:        4 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; Hardware stack levels required when called:    2
  2944 ;; This function calls:
  2945 ;;		_WriteI2C
  2946 ;; This function is called by:
  2947 ;;		_LCD_putcmd
  2948 ;;		_LCD_putch
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text17
  2953  00124A                     __ptext17:
  2954                           	opt stack 0
  2955  00124A                     _I2C_PCF8574_Write:
  2956                           	opt stack 25
  2957                           
  2958                           ;incstack = 0
  2959                           ;I2C_PCF8574_Write@addr stored from wreg
  2960  00124A  6E06               	movwf	I2C_PCF8574_Write@addr,c
  2961                           
  2962                           ;i2c_lcd.c: 14: unsigned char S,dummy;
  2963                           ;i2c_lcd.c: 15: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  2964  00124C  80C5               	bsf	4037,0,c	;volatile
  2965  00124E                     l70:
  2966  00124E  B0C5               	btfsc	4037,0,c	;volatile
  2967  001250  D7FE               	goto	l70
  2968                           
  2969                           ;i2c_lcd.c: 16: S = WriteI2C( addr );
  2970  001252  5006               	movf	I2C_PCF8574_Write@addr,w,c
  2971  001254  EC63  F008         	call	_WriteI2C
  2972  001258  6E05               	movwf	I2C_PCF8574_Write@S,c
  2973                           
  2974                           ;i2c_lcd.c: 21: }
  2975                           ;i2c_lcd.c: 22: S = WriteI2C(value);
  2976                           
  2977                           ;i2c_lcd.c: 20: SSPCON1bits.WCOL=0;
  2978                           
  2979                           ;i2c_lcd.c: 18: {
  2980                           ;i2c_lcd.c: 19: dummy = SSPBUF;
  2981                           
  2982                           ;i2c_lcd.c: 17: if(S == -1)
  2983  00125A  5003               	movf	I2C_PCF8574_Write@value,w,c
  2984  00125C  EC63  F008         	call	_WriteI2C
  2985  001260  6E05               	movwf	I2C_PCF8574_Write@S,c
  2986                           
  2987                           ;i2c_lcd.c: 23: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  2988  001262  84C5               	bsf	4037,2,c	;volatile
  2989  001264                     l74:
  2990  001264  A4C5               	btfss	4037,2,c	;volatile
  2991  001266  0012               	return	
  2992  001268  D7FD               	goto	l74
  2993  00126A                     __end_of_I2C_PCF8574_Write:
  2994                           	opt stack 0
  2995                           tblptru	equ	0xFF8
  2996                           tblptrh	equ	0xFF7
  2997                           tblptrl	equ	0xFF6
  2998                           tablat	equ	0xFF5
  2999                           prodh	equ	0xFF4
  3000                           prodl	equ	0xFF3
  3001                           indf0	equ	0xFEF
  3002                           postinc0	equ	0xFEE
  3003                           fsr0h	equ	0xFEA
  3004                           fsr0l	equ	0xFE9
  3005                           wreg	equ	0xFE8
  3006                           indf2	equ	0xFDF
  3007                           postinc2	equ	0xFDE
  3008                           postdec2	equ	0xFDD
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8
  3012                           
  3013 ;; *************** function _WriteI2C *****************
  3014 ;; Defined at:
  3015 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_writ.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  data_out        1    wreg     unsigned char 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  data_out        1    1[COMRAM] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  1    wreg      char 
  3022 ;; Registers used:
  3023 ;;		wreg, status,2, status,0, cstack
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3029 ;;      Params:         0       0       0       0       0       0       0       0       0
  3030 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3032 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3033 ;;Total ram usage:        1 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    1
  3036 ;; This function calls:
  3037 ;;		_IdleI2C
  3038 ;; This function is called by:
  3039 ;;		_I2C_PCF8574_Write
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           	psect	text18
  3044  0010C6                     __ptext18:
  3045                           	opt stack 0
  3046  0010C6                     _WriteI2C:
  3047                           	opt stack 25
  3048                           
  3049                           ;incstack = 0
  3050                           ;WriteI2C@data_out stored from wreg
  3051  0010C6  6E02               	movwf	WriteI2C@data_out,c
  3052  0010C8  C002  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  3053  0010CC  AEC6               	btfss	4038,7,c	;volatile
  3054  0010CE  D002               	goto	l1405
  3055  0010D0  0EFF               	movlw	255
  3056  0010D2  0012               	return	
  3057  0010D4                     l1405:
  3058  0010D4  50C6               	movf	4038,w,c	;volatile
  3059  0010D6  0B0F               	andlw	15
  3060  0010D8  0A08               	xorlw	8
  3061  0010DA  B4D8               	btfsc	status,2,c
  3062  0010DC  D00F               	goto	l1423
  3063  0010DE  50C6               	movf	4038,w,c	;volatile
  3064  0010E0  0B0F               	andlw	15
  3065  0010E2  0A0B               	xorlw	11
  3066  0010E4  B4D8               	btfsc	status,2,c
  3067  0010E6  D00A               	goto	l1423
  3068  0010E8  88C6               	bsf	4038,4,c	;volatile
  3069  0010EA                     l218:
  3070  0010EA  A69E               	btfss	3998,3,c	;volatile
  3071  0010EC  D7FE               	goto	l218
  3072  0010EE  A4C7               	btfss	4039,2,c	;volatile
  3073  0010F0  B0C7               	btfsc	4039,0,c	;volatile
  3074  0010F2  D002               	goto	l1419
  3075  0010F4  0EFE               	movlw	254
  3076  0010F6  0012               	return	
  3077  0010F8                     l1419:
  3078  0010F8  0E00               	movlw	0
  3079  0010FA  0012               	return	
  3080  0010FC                     l1423:
  3081  0010FC  50C6               	movf	4038,w,c	;volatile
  3082  0010FE  0B0F               	andlw	15
  3083  001100  0A08               	xorlw	8
  3084  001102  B4D8               	btfsc	status,2,c
  3085  001104  D005               	goto	l227
  3086  001106  50C6               	movf	4038,w,c	;volatile
  3087  001108  0B0F               	andlw	15
  3088  00110A  0A0B               	xorlw	11
  3089  00110C  A4D8               	btfss	status,2,c
  3090  00110E  0012               	return	
  3091  001110                     l227:
  3092  001110  B0C7               	btfsc	4039,0,c	;volatile
  3093  001112  D7FE               	goto	l227
  3094  001114  EC53  F009         	call	_IdleI2C	;wreg free
  3095  001118  ACC5               	btfss	4037,6,c	;volatile
  3096  00111A  D002               	goto	l1437
  3097  00111C  0EFE               	movlw	254
  3098  00111E  0012               	return	
  3099  001120                     l1437:
  3100  001120  0E00               	movlw	0
  3101  001122  0012               	return	
  3102  001124                     __end_of_WriteI2C:
  3103                           	opt stack 0
  3104                           tblptru	equ	0xFF8
  3105                           tblptrh	equ	0xFF7
  3106                           tblptrl	equ	0xFF6
  3107                           tablat	equ	0xFF5
  3108                           prodh	equ	0xFF4
  3109                           prodl	equ	0xFF3
  3110                           indf0	equ	0xFEF
  3111                           postinc0	equ	0xFEE
  3112                           fsr0h	equ	0xFEA
  3113                           fsr0l	equ	0xFE9
  3114                           wreg	equ	0xFE8
  3115                           indf2	equ	0xFDF
  3116                           postinc2	equ	0xFDE
  3117                           postdec2	equ	0xFDD
  3118                           fsr2h	equ	0xFDA
  3119                           fsr2l	equ	0xFD9
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function _IdleI2C *****************
  3123 ;; Defined at:
  3124 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_idle.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, status,2, status,0
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3138 ;;      Params:         0       0       0       0       0       0       0       0       0
  3139 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3140 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3141 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3142 ;;Total ram usage:        1 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; This function calls:
  3145 ;;		Nothing
  3146 ;; This function is called by:
  3147 ;;		_WriteI2C
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text19
  3152  0012A6                     __ptext19:
  3153                           	opt stack 0
  3154  0012A6                     _IdleI2C:
  3155                           	opt stack 25
  3156  0012A6                     l1391:
  3157  0012A6  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
  3158  0012AA  0E1F               	movlw	31
  3159  0012AC  1601               	andwf	??_IdleI2C,f,c
  3160  0012AE  A4D8               	btfss	status,2,c
  3161  0012B0  D7FA               	goto	l1391
  3162  0012B2  A4C7               	btfss	4039,2,c	;volatile
  3163  0012B4  0012               	return	
  3164  0012B6  D7F7               	goto	l1391
  3165  0012B8                     __end_of_IdleI2C:
  3166                           	opt stack 0
  3167                           tblptru	equ	0xFF8
  3168                           tblptrh	equ	0xFF7
  3169                           tblptrl	equ	0xFF6
  3170                           tablat	equ	0xFF5
  3171                           prodh	equ	0xFF4
  3172                           prodl	equ	0xFF3
  3173                           indf0	equ	0xFEF
  3174                           postinc0	equ	0xFEE
  3175                           fsr0h	equ	0xFEA
  3176                           fsr0l	equ	0xFE9
  3177                           wreg	equ	0xFE8
  3178                           indf2	equ	0xFDF
  3179                           postinc2	equ	0xFDE
  3180                           postdec2	equ	0xFDD
  3181                           fsr2h	equ	0xFDA
  3182                           fsr2l	equ	0xFD9
  3183                           status	equ	0xFD8
  3184                           
  3185 ;; *************** function _KP_init *****************
  3186 ;; Defined at:
  3187 ;;		line 6 in file "KeyPad Library.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;		None
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;		None
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      void 
  3194 ;; Registers used:
  3195 ;;		wreg, status,2
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3201 ;;      Params:         0       0       0       0       0       0       0       0       0
  3202 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3204 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3205 ;;Total ram usage:        0 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_main
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text20
  3215  0012B8                     __ptext20:
  3216                           	opt stack 0
  3217  0012B8                     _KP_init:
  3218                           	opt stack 30
  3219                           
  3220                           ;KeyPad Library.c: 8: TRISD = 0x0F;
  3221                           
  3222                           ;incstack = 0
  3223  0012B8  0E0F               	movlw	15
  3224  0012BA  6E95               	movwf	3989,c	;volatile
  3225                           
  3226                           ;KeyPad Library.c: 9: LATD = 0x00;
  3227  0012BC  0E00               	movlw	0
  3228  0012BE  6E8C               	movwf	3980,c	;volatile
  3229  0012C0  0012               	return		;funcret
  3230  0012C2                     __end_of_KP_init:
  3231                           	opt stack 0
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           prodh	equ	0xFF4
  3237                           prodl	equ	0xFF3
  3238                           indf0	equ	0xFEF
  3239                           postinc0	equ	0xFEE
  3240                           fsr0h	equ	0xFEA
  3241                           fsr0l	equ	0xFE9
  3242                           wreg	equ	0xFE8
  3243                           indf2	equ	0xFDF
  3244                           postinc2	equ	0xFDE
  3245                           postdec2	equ	0xFDD
  3246                           fsr2h	equ	0xFDA
  3247                           fsr2l	equ	0xFD9
  3248                           status	equ	0xFD8
  3249                           tblptru	equ	0xFF8
  3250                           tblptrh	equ	0xFF7
  3251                           tblptrl	equ	0xFF6
  3252                           tablat	equ	0xFF5
  3253                           prodh	equ	0xFF4
  3254                           prodl	equ	0xFF3
  3255                           indf0	equ	0xFEF
  3256                           postinc0	equ	0xFEE
  3257                           fsr0h	equ	0xFEA
  3258                           fsr0l	equ	0xFE9
  3259                           wreg	equ	0xFE8
  3260                           indf2	equ	0xFDF
  3261                           postinc2	equ	0xFDE
  3262                           postdec2	equ	0xFDD
  3263                           fsr2h	equ	0xFDA
  3264                           fsr2l	equ	0xFD9
  3265                           status	equ	0xFD8
  3266                           
  3267                           	psect	rparam
  3268  0000                     tblptru	equ	0xFF8
  3269                           tblptrh	equ	0xFF7
  3270                           tblptrl	equ	0xFF6
  3271                           tablat	equ	0xFF5
  3272                           prodh	equ	0xFF4
  3273                           prodl	equ	0xFF3
  3274                           indf0	equ	0xFEF
  3275                           postinc0	equ	0xFEE
  3276                           fsr0h	equ	0xFEA
  3277                           fsr0l	equ	0xFE9
  3278                           wreg	equ	0xFE8
  3279                           indf2	equ	0xFDF
  3280                           postinc2	equ	0xFDE
  3281                           postdec2	equ	0xFDD
  3282                           fsr2h	equ	0xFDA
  3283                           fsr2l	equ	0xFD9
  3284                           status	equ	0xFD8


Data Sizes:
    Strings     35
    Constant    40
    Data        1
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      72
    BANK0           160      0      80
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> keyNumber@arreglo(COMRAM[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> text(BANK0[80]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    LCD_puts@s	PTR unsigned char  size(2) Largest target is 80
		 -> keyNumber@arreglo(COMRAM[20]), STR_3(CODE[10]), STR_2(CODE[16]), text(BANK0[80]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_keyNumber
    ___llmod->___lldiv
    _keyNumber->_LCD_goto
    _keyNumber->_LCD_puts
    _atoi->___wmul
    _LCD_puts->_LCD_putch
    _LCD_putch->_I2C_PCF8574_Write
    _LCD_goto->_LCD_putcmd
    _KP_Readbutton->_KP_scan
    _LCD_init->_LCD_putcmd
    _LCD_putcmd->_I2C_PCF8574_Write
    _I2C_PCF8574_Write->_WriteI2C
    _WriteI2C->_IdleI2C

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   17910
                                             67 COMRAM     2     2      0
                            _KP_init
                           _LCD_goto
                           _LCD_init
                         _LCD_putcmd
                           _LCD_puts
                            _OpenI2C
                          _keyNumber
                          _longDelay
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    21      8    1139
                                             47 COMRAM    20    12      8
                            ___lldiv
                            ___llmod
                          _keyNumber (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     287
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _longDelay                                            5     3      2     110
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _keyNumber                                           33    29      4    5958
                                             14 COMRAM    33    29      4
                      _KP_Readbutton
                           _LCD_goto
                           _LCD_puts
                               _atoi
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     647
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCD_puts                                             5     3      2    1261
                                              9 COMRAM     5     3      2
                          _LCD_putch
 ---------------------------------------------------------------------------------
 (3) _LCD_putch                                            3     2      1     873
                                              6 COMRAM     3     2      1
                  _I2C_PCF8574_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_goto                                             3     1      2    3633
                                             11 COMRAM     3     1      2
                         _LCD_putcmd
 ---------------------------------------------------------------------------------
 (2) _KP_Readbutton                                        1     1      0     135
                                              8 COMRAM     1     1      0
                            _KP_scan
 ---------------------------------------------------------------------------------
 (3) _KP_scan                                              8     6      2      95
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _OpenI2C                                              2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0    2949
                                             11 COMRAM     2     2      0
                         _LCD_putcmd
 ---------------------------------------------------------------------------------
 (3) _LCD_putcmd                                           5     3      2    2751
                                              6 COMRAM     5     3      2
                  _I2C_PCF8574_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_PCF8574_Write                                    4     3      1     587
                                              2 COMRAM     4     3      1
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (5) _WriteI2C                                             1     1      0      22
                                              1 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (6) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _KP_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KP_init
   _LCD_goto
     _LCD_putcmd
       _I2C_PCF8574_Write
         _WriteI2C
           _IdleI2C
   _LCD_init
     _LCD_putcmd
       _I2C_PCF8574_Write
         _WriteI2C
           _IdleI2C
   _LCD_putcmd
     _I2C_PCF8574_Write
       _WriteI2C
         _IdleI2C
   _LCD_puts
     _LCD_putch
       _I2C_PCF8574_Write
         _WriteI2C
           _IdleI2C
   _OpenI2C
   _keyNumber
     _KP_Readbutton
       _KP_scan
     _LCD_goto
       _LCD_putcmd
         _I2C_PCF8574_Write
           _WriteI2C
             _IdleI2C
     _LCD_puts
       _LCD_putch
         _I2C_PCF8574_Write
           _WriteI2C
             _IdleI2C
     _atoi
       ___wmul
       _isdigit
   _longDelay
   _sprintf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _keyNumber (ARG)
       _KP_Readbutton
         _KP_scan
       _LCD_goto
         _LCD_putcmd
           _I2C_PCF8574_Write
             _WriteI2C
               _IdleI2C
       _LCD_puts
         _LCD_putch
           _I2C_PCF8574_Write
             _WriteI2C
               _IdleI2C
       _atoi
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      50       5       50.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      48       1       75.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      98      20        0.0%
DATA                 0      0      98       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun May 19 15:17:33 2019

               _SSPSTATbits 000FC7                          l32 0BF0                          l24 0BA0  
                        l19 0B7C                          l28 0BC8                          l70 124E  
                        l74 1264         ___wmul@multiplicand 0003                         l128 11E2  
                       l218 10EA                         l227 1110                         l404 0CEA  
                       l176 08AA                         l601 0F74                         l611 1054  
                       u884 0B62                         u885 0B5E                         wreg 000FE8  
               ?_LCD_putcmd 0007            KP_Readbutton@key 0009                        l1405 10D4  
                      l1423 10FC                        l1505 0C14                        l1419 10F8  
                      l1523 116E                        l1603 0A86                        l1437 1120  
                      l1621 0ABC                        l1701 0CB4                        l1391 12A6  
                      l1615 0AAA                        l1703 0CB8                        l1457 0B52  
                      l1633 0AE0                        l1609 0A98                        l1561 0A08  
                      l1801 0D26                        l1627 0ACE                        l1555 09F8  
                      l1651 0B16                        l1715 0F26                        l1469 0B8E  
                      l1645 0B04                        l1573 0A2C                        l1661 0F9C  
                      l1549 1280                        l1813 0D66                        l1717 0F32  
                      l1479 0BB6                        l1639 0AF2                        l1591 0A62  
                      l1567 0A1A                        l1663 0FAE                        l1671 0FE4  
                      l1727 0F66                        l1719 0F36                        l1743 1046  
                      l1735 1012                        l1831 0872                        l1489 0BDE  
                      l1585 0A50                        l1665 0FC0                        l1737 101E  
                      l1833 0878                        l1825 0858                        l1499 0C06  
                      l1579 0A3E                        l1667 0FD2                        l1659 0F8A  
                      l1675 1072                        l1683 0C28                        l1739 1022  
                      l1851 08F2                        l1835 087C                        l1597 0A74  
                      l1685 0C2C                        l1773 11D0                        l1845 08CA  
                      l1679 109E                        l1695 0C6C                        l1791 0D04  
                      l1871 09BC                        l1863 092A                        l1839 0882  
                      l1865 0936                        l1873 09CC                        l1699 0C7E  
                      l1875 09E4                        l1885 0DCE                        STR_1 0843  
                      STR_2 0829                        STR_3 0839                        u1200 10BE  
                      u1207 10B4                        u1190 1092                        _LATD 000F8C  
                      u1507 0E6E                        u1517 0E8A                        u1197 1088  
                      u1527 1174                        u1457 11D6                        u1467 0B70  
                      u1477 0B94                        u1487 0BBC                        u1497 0BE4  
               main@counter 0044            LCD_putch@lcddata 0009                        _atoi 0C26  
                      _main 0DB2               longDelay@time 0001  __size_of_I2C_PCF8574_Write 0020  
                      _text 0060                        fsr0h 000FEA                        indf0 000FEF  
                      fsr2h 000FDA                        fsr0l 000FE9                        indf2 000FDF  
                      fsr2l 000FD9             __end_of_KP_init 12C2             __end_of_KP_scan 0C26  
                      prodh 000FF4                        prodl 000FF3                        start 0000  
           __end_of_IdleI2C 12B8              LCD_goto@column 000D          __size_of_LCD_putch 0046  
              ___param_bank 000000             __end_of_OpenI2C 12A6            __end_of_LCD_init 0F04  
          __end_of_LCD_goto 1000            __end_of_LCD_puts 10C6                       ?_atoi 0007  
                     ?_main 0001             __end_of___lldiv 0F86             __end_of___llmod 1066  
        I2C_PCF8574_Write@S 0005                       _TRISD 000F95             __end_of_dpowers 0829  
           __end_of_isdigit 1288                       atoi@a 000C                       atoi@s 0007  
                     tablat 000FF5                       status 000FD8             __end_of_sprintf 09F2  
           __initialization 11F8                 LCD_goto@row 000C         __size_of_LCD_putcmd 005C  
              __end_of_atoi 0CF4                __end_of_main 0E66                      ??_atoi 0009  
                    ??_main 0044               __activetblptr 000002           __end_of_LCD_putch 11C6  
          ___llmod@dividend 000E            __end_of_WriteI2C 1124                   ??_KP_init 0001  
                 ??_KP_scan 0003                 OpenI2C@slew 0001                   ??_IdleI2C 0001  
                    _SSPBUF 000FC9                   ??_OpenI2C 0002                KP_scan@press 0005  
                    ___wmul 1224                   ??___lldiv 0009                   ??___llmod 0016  
         LCD_putcmd@cmdtype 0008                      _keynum 0046           LCD_putcmd@lcddata 000B  
                    clear_0 1210                __pdataCOMRAM 0048                   ??_isdigit 0001  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8              keyNumber@tecla 002D                   ??_sprintf 0038  
                __accesstop 0060     __end_of__initialization 121A                   ?_LCD_init 0001  
                 ?_LCD_goto 000C                   ?_LCD_puts 000A               ___rparam_used 000001  
              LCD_init@addr 000D                LCD_goto@addr 000E              __pcstackCOMRAM 0001  
            LCD_putcmd@addr 000A              LCD_putcmd@data 0007                   LCD_puts@i 000C  
                 LCD_puts@s 000A                ??_LCD_putcmd 0009                  __pbssBANK0 0060  
        __size_of_keyNumber 00BE                LCD_puts@addr 000E                  ??_LCD_init 000C  
                ??_LCD_goto 000E                  ??_LCD_puts 000C          __size_of_longDelay 0032  
     __end_of_KP_Readbutton 0B2A          __end_of_LCD_putcmd 1180                     ?___wmul 0001  
                 ?_WriteI2C 0001                     _SSPCON1 000FC6                     _SSPCON2 000FC5  
                   _SSPSTAT 000FC7                     _KP_init 12B8                     _KP_scan 0B2A  
                   _IdleI2C 12A6                     _OpenI2C 1288                     __Hparam 0000  
                   __Lparam 0000                     ___lldiv 0F04             __size_of___wmul 0026  
                   ___llmod 1000                __psmallconst 0800                     __pcinit 11F8  
                ??_WriteI2C 0002                     __ramtop 0800                     __ptext0 0DB2  
                   __ptext1 084E                     __ptext2 1000                     __ptext3 0F04  
                   __ptext4 11C6                     __ptext5 0CF4                     __ptext6 0C26  
                   __ptext7 126A                     __ptext8 1224           __end_of_keyNumber 0DB2  
                   __ptext9 1066                     _dpowers 0801                     _isdigit 126A  
            _LCD_01_ADDRESS 0048           __end_of_longDelay 11F8                     _sprintf 084E  
      end_of_initialization 121A                   _LCD_putch 1180               __Lmediumconst 0000  
           ___lldiv@divisor 0005             ___lldiv@counter 000D             keyNumber@number 0027  
                   postdec2 000FDD      I2C_PCF8574_Write@dummy 0004                     postinc0 000FEE  
                   postinc2 000FDE      I2C_PCF8574_Write@value 0003                   _PORTDbits 000F83  
                 _TRISBbits 000F93                  ?_LCD_putch 0007           __size_of_LCD_init 009E  
         __size_of_LCD_goto 007A           __size_of_LCD_puts 0060              __end_of___wmul 124A  
             __pidataCOMRAM 12C2         start_initialization 11F8            WriteI2C@data_out 0002  
                keyNumber@i 002E             ___llmod@divisor 0012             ___llmod@counter 0016  
                  ??___wmul 0005           __size_of_WriteI2C 005E                 __pbssCOMRAM 0046  
             LCD_putch@addr 0008               LCD_putch@data 0007                  longDelay@i 0004  
                  ?_KP_init 0001                    ?_KP_scan 0001                 ??_LCD_putch 0008  
                  ?_IdleI2C 0001                 sprintf@flag 003A                 sprintf@prec 003B  
                  ?_OpenI2C 0001                    ?___lldiv 0001                    ?___llmod 000E  
               __smallconst 0800                    ?_isdigit 0001                   _keyNumber 0CF4  
    __size_of_KP_Readbutton 0138                    ?_sprintf 0030                   _longDelay 11C6  
            ___wmul@product 0005                    _LCD_init 0E66                    _LCD_goto 0F86  
                  _LCD_puts 1066                    _PIR1bits 000F9E       I2C_PCF8574_Write@addr 0006  
         ___wmul@multiplier 0001                  ?_keyNumber 000F                  ?_longDelay 0001  
          __size_of_KP_init 000A            __size_of_KP_scan 00FC            OpenI2C@sync_mode 0002  
          __size_of_IdleI2C 0012                    __Hrparam 0000            __size_of_OpenI2C 001E  
                  __Lrparam 0000                  KP_scan@row 0007               _KP_Readbutton 09F2  
          __size_of___lldiv 0082            __size_of___llmod 0066                    _WriteI2C 10C6  
               _isdigit$813 0002                  sprintf@val 003D            __size_of_isdigit 001E  
                  __ptext10 1180                    __ptext11 0F86                    __ptext20 12B8  
                  __ptext12 09F2                    __ptext13 0B2A                    __ptext14 1288  
                  __ptext15 0E66                    __ptext16 1124                    __ptext17 124A  
                  __ptext18 10C6                    __ptext19 12A6            __size_of_sprintf 01A4  
             __size_of_atoi 00CE               __size_of_main 00B4           keyNumber@contador 002B  
         _I2C_PCF8574_Write 124A              ?_KP_Readbutton 0001          ?_I2C_PCF8574_Write 0003  
                  atoi@sign 000B         ??_I2C_PCF8574_Write 0004                 ??_keyNumber 0013  
                _LCD_putcmd 1124                    isdigit@c 0003                 ??_longDelay 0003  
                 sprintf@ap 0041                   sprintf@sp 0030            ___lldiv@dividend 0001  
 __end_of_I2C_PCF8574_Write 126A            keyNumber@arreglo 0013                    sprintf@c 0043  
                  sprintf@f 0032            ___lldiv@quotient 0009                 _SSPCON1bits 000FC6  
               _SSPCON2bits 000FC5             ??_KP_Readbutton 0009  
